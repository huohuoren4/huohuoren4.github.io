import{_ as s,o as n,c as a,V as p}from"./chunks/framework.48c56699.js";const F=JSON.parse('{"title":"Pytest API and builtin fixtures","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/other/builtin.md","filePath":"python/pytest/other/builtin.md","lastUpdated":1692437254000}'),l={name:"python/pytest/other/builtin.md"},o=p(`<h1 id="pytest-api-and-builtin-fixtures" tabindex="-1">Pytest API and builtin fixtures <a class="header-anchor" href="#pytest-api-and-builtin-fixtures" aria-label="Permalink to &quot;Pytest API and builtin fixtures&quot;">â€‹</a></h1><p>Most of the information of this page has been moved over to <a href="/python/pytest/reference_guides/api_reference/constants#api-reference">API Reference</a>.</p><p>For information on plugin hooks and objects, see <a href="/python/pytest/how_to_guides/write_plugin#writing-plugins">Writing plugins</a>.</p><p>For information on the <code>pytest.mark</code> mechanism, see <a href="/python/pytest/how_to_guides/mark#how-to-mark-test-functions-with-attributes">How to mark test functions with attributes</a>.</p><p>For information about fixtures, see <a href="/python/pytest/reference_guides/fixture_reference#fixtures-reference">Fixtures reference</a>. To see a complete list of available fixtures (add <code>-v</code> to also see fixtures with leading <code>_</code>), type :</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--fixtures</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-7.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-1.x.y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> $PYTHON_PREFIX</span><span style="color:#C3E88D;">/bin/python</span></span>
<span class="line"><span style="color:#FFCB6B;">cachedir:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.pytest_cache</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/sweet/project</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"><span style="color:#FFCB6B;">cache</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.../_pytest/cacheprovider.py:528</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Return</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cache</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">that</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">can</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">persist</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">between</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">testing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sessions.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">cache.get(key,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">default</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">cache.set(key,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">value</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Keys</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">must</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">be</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">/</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">separated</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">strings,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">where</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">the</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">first</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">part</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">usually</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">your</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">plugin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">application</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">avoid</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clashes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">other</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cache</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">users.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Values</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">can</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">be</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">any</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">handled</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">by</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">the</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">json</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stdlib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">module.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">capsysbinary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.../_pytest/capture.py:1001</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Enable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bytes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">capturing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">writes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">sys.stdout</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">sys.stderr</span><span style="color:#89DDFF;">\`\`</span><span style="color:#82AAFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">The</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">made</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">available</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">via</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">\`\`capsysbinary.readouterr</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;">\`\`</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">method</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">calls,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">which</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">out,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">err</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">namedtuple.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">out</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">err</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">will</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">be</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">bytes</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Returns</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">an</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">instance</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">:class:</span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">CaptureFixture[bytes]</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pytest.CaptureFixture</span><span style="color:#89DDFF;">&gt;\`</span><span style="color:#82AAFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">..</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code-block::</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_output</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">capsysbinary</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">&quot;hello&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">capsysbinary.readouterr</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">captured.out</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">capfd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.../_pytest/capture.py:1029</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Enable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">capturing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">writes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">descriptors</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">1</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">2</span><span style="color:#89DDFF;">\`\`</span><span style="color:#82AAFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">The</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">made</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">available</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">via</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">\`\`capfd.readouterr</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">method</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">calls,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">which</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">out,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">err</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">namedtuple.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">out</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">err</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">will</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">be</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">text</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Returns</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">an</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">instance</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">:class:</span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">CaptureFixture[str]</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pytest.CaptureFixture</span><span style="color:#89DDFF;">&gt;\`</span><span style="color:#82AAFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">..</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code-block::</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_system_echo</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">capfd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">os.system(</span><span style="color:#FFCB6B;">&#39;echo &quot;hello&quot;&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">capfd.readouterr</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">captured.out</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">capfdbinary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.../_pytest/capture.py:1057</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Enable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bytes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">capturing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">writes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">descriptors</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">1</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">2</span><span style="color:#89DDFF;">\`\`</span><span style="color:#82AAFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">The</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">made</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">available</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">via</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">\`\`capfd.readouterr</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">method</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">calls,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">which</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">out,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">err</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">namedtuple.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">out</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">err</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">will</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">be</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">byte</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Returns</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">an</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">instance</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">:class:</span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">CaptureFixture[bytes]</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pytest.CaptureFixture</span><span style="color:#89DDFF;">&gt;\`</span><span style="color:#82AAFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">..</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code-block::</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_system_echo</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">capfdbinary</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">os.system(</span><span style="color:#FFCB6B;">&#39;echo &quot;hello&quot;&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">capfdbinary.readouterr</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">captured.out</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">capsys</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.../_pytest/capture.py:973</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Enable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">capturing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">writes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">sys.stdout</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">sys.stderr</span><span style="color:#89DDFF;">\`\`</span><span style="color:#82AAFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">The</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">output</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">made</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">available</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">via</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">\`\`capsys.readouterr</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">method</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">calls,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">which</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">out,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">err</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">namedtuple.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">out</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">err</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">will</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">be</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">text</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Returns</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">an</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">instance</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">:class:</span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">CaptureFixture[str]</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">pytest.CaptureFixture</span><span style="color:#89DDFF;">&gt;\`</span><span style="color:#82AAFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">..</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code-block::</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_output</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">capsys</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">&quot;hello&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">capsys.readouterr</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">captured.out</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">doctest_namespace</span><span style="color:#A6ACCD;"> [session </span><span style="color:#C3E88D;">scope]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.../_pytest/doctest.py:737</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Fixture</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">that</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">returns</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">:py:class:</span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">dict</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">that</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">will</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">be</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">injected</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">into</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">the</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">doctests.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Usually</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fixture</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">used</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">conjunction</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">another</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\`</span><span style="color:#FFCB6B;">autouse</span><span style="color:#89DDFF;">\`\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">fixture:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">..</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code-block::</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">@pytest.fixture(autouse</span><span style="color:#A6ACCD;">=True)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add_np</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">doctest_namespace</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">doctest_namespace[</span><span style="color:#FFCB6B;">&quot;np&quot;</span><span style="color:#FFCB6B;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">numpy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">For</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">more</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">details:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">:ref:</span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">doctest_namespace</span><span style="color:#89DDFF;">\`</span><span style="color:#82AAFF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">pytestconfig</span><span style="color:#A6ACCD;"> [session </span><span style="color:#C3E88D;">scope]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.../_pytest/fixtures.py:1353</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Session-scoped</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fixture</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">that</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">returns</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">the</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s :class:\`pytest.Config\`</span></span>
<span class="line"><span style="color:#C3E88D;">    object.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    Example::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">        def test_foo(pytestconfig):</span></span>
<span class="line"><span style="color:#C3E88D;">            if pytestconfig.getoption(&quot;verbose&quot;) &gt; 0:</span></span>
<span class="line"><span style="color:#C3E88D;">                ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">record_property -- .../_pytest/junitxml.py:282</span></span>
<span class="line"><span style="color:#C3E88D;">    Add extra properties to the calling test.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    User properties become part of the test report and are available to the</span></span>
<span class="line"><span style="color:#C3E88D;">    configured reporters, like JUnit XML.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    The fixture is callable with \`\`name, value\`\`. The value is automatically</span></span>
<span class="line"><span style="color:#C3E88D;">    XML-encoded.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    Example::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">        def test_function(record_property):</span></span>
<span class="line"><span style="color:#C3E88D;">            record_property(&quot;example_key&quot;, 1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">record_xml_attribute -- .../_pytest/junitxml.py:305</span></span>
<span class="line"><span style="color:#C3E88D;">    Add extra xml attributes to the tag for the calling test.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    The fixture is callable with \`\`name, value\`\`. The value is</span></span>
<span class="line"><span style="color:#C3E88D;">    automatically XML-encoded.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">record_testsuite_property [session scope] -- .../_pytest/junitxml.py:343</span></span>
<span class="line"><span style="color:#C3E88D;">    Record a new \`\`&lt;property&gt;\`\` tag as child of the root \`\`&lt;testsuite&gt;\`\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    This is suitable to writing global information regarding the entire test</span></span>
<span class="line"><span style="color:#C3E88D;">    suite, and is compatible with \`\`xunit2\`\` JUnit family.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    This is a \`\`session\`\`-scoped fixture which is called with \`\`(name, value)\`\`. Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    .. code-block:: python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">        def test_foo(record_testsuite_property):</span></span>
<span class="line"><span style="color:#C3E88D;">            record_testsuite_property(&quot;ARCH&quot;, &quot;PPC&quot;)</span></span>
<span class="line"><span style="color:#C3E88D;">            record_testsuite_property(&quot;STORAGE_TYPE&quot;, &quot;CEPH&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    :param name:</span></span>
<span class="line"><span style="color:#C3E88D;">        The property name.</span></span>
<span class="line"><span style="color:#C3E88D;">    :param value:</span></span>
<span class="line"><span style="color:#C3E88D;">        The property value. Will be converted to a string.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    .. warning::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">        Currently this fixture **does not work** with the</span></span>
<span class="line"><span style="color:#C3E88D;">        \`pytest-xdist &lt;https://github.com/pytest-dev/pytest-xdist&gt;\`__ plugin. See</span></span>
<span class="line"><span style="color:#C3E88D;">        :issue:\`7767\` for details.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">tmpdir_factory [session scope] -- .../_pytest/legacypath.py:302</span></span>
<span class="line"><span style="color:#C3E88D;">    Return a :class:\`pytest.TempdirFactory\` instance for the test session.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">tmpdir -- .../_pytest/legacypath.py:309</span></span>
<span class="line"><span style="color:#C3E88D;">    Return a temporary directory path object which is unique to each test</span></span>
<span class="line"><span style="color:#C3E88D;">    function invocation, created as a sub directory of the base temporary</span></span>
<span class="line"><span style="color:#C3E88D;">    directory.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    By default, a new base temporary directory is created each test session,</span></span>
<span class="line"><span style="color:#C3E88D;">    and old bases are removed after 3 sessions, to aid in debugging. If</span></span>
<span class="line"><span style="color:#C3E88D;">    \`\`--basetemp\`\` is used then it is cleared each session. See :ref:\`base</span></span>
<span class="line"><span style="color:#C3E88D;">    temporary directory\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    The returned object is a \`legacy_path\`_ object.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    .. note::</span></span>
<span class="line"><span style="color:#C3E88D;">        These days, it is preferred to use \`\`tmp_path\`\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">        :ref:\`About the tmpdir and tmpdir_factory fixtures&lt;tmpdir and tmpdir_factory&gt;\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    .. _legacy_path: https://py.readthedocs.io/en/latest/path.html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">caplog -- .../_pytest/logging.py:570</span></span>
<span class="line"><span style="color:#C3E88D;">    Access and control log capturing.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    Captured logs are available through the following properties/methods::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    * caplog.messages        -&gt; list of format-interpolated log messages</span></span>
<span class="line"><span style="color:#C3E88D;">    * caplog.text            -&gt; string containing formatted log output</span></span>
<span class="line"><span style="color:#C3E88D;">    * caplog.records         -&gt; list of logging.LogRecord instances</span></span>
<span class="line"><span style="color:#C3E88D;">    * caplog.record_tuples   -&gt; list of (logger_name, level, message) tuples</span></span>
<span class="line"><span style="color:#C3E88D;">    * caplog.clear()         -&gt; clear captured records and formatted log output string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">monkeypatch -- .../_pytest/monkeypatch.py:30</span></span>
<span class="line"><span style="color:#C3E88D;">    A convenient fixture for monkey-patching.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    The fixture provides these methods to modify objects, dictionaries, or</span></span>
<span class="line"><span style="color:#C3E88D;">    :data:\`os.environ\`:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    * :meth:\`monkeypatch.setattr(obj, name, value, raising=True) &lt;pytest.MonkeyPatch.setattr&gt;\`</span></span>
<span class="line"><span style="color:#C3E88D;">    * :meth:\`monkeypatch.delattr(obj, name, raising=True) &lt;pytest.MonkeyPatch.delattr&gt;\`</span></span>
<span class="line"><span style="color:#C3E88D;">    * :meth:\`monkeypatch.setitem(mapping, name, value) &lt;pytest.MonkeyPatch.setitem&gt;\`</span></span>
<span class="line"><span style="color:#C3E88D;">    * :meth:\`monkeypatch.delitem(obj, name, raising=True) &lt;pytest.MonkeyPatch.delitem&gt;\`</span></span>
<span class="line"><span style="color:#C3E88D;">    * :meth:\`monkeypatch.setenv(name, value, prepend=None) &lt;pytest.MonkeyPatch.setenv&gt;\`</span></span>
<span class="line"><span style="color:#C3E88D;">    * :meth:\`monkeypatch.delenv(name, raising=True) &lt;pytest.MonkeyPatch.delenv&gt;\`</span></span>
<span class="line"><span style="color:#C3E88D;">    * :meth:\`monkeypatch.syspath_prepend(path) &lt;pytest.MonkeyPatch.syspath_prepend&gt;\`</span></span>
<span class="line"><span style="color:#C3E88D;">    * :meth:\`monkeypatch.chdir(path) &lt;pytest.MonkeyPatch.chdir&gt;\`</span></span>
<span class="line"><span style="color:#C3E88D;">    * :meth:\`monkeypatch.context() &lt;pytest.MonkeyPatch.context&gt;\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    All modifications will be undone after the requesting test function or</span></span>
<span class="line"><span style="color:#C3E88D;">    fixture has finished. The \`\`raising\`\` parameter determines if a :class:\`KeyError\`</span></span>
<span class="line"><span style="color:#C3E88D;">    or :class:\`AttributeError\` will be raised if the set/deletion operation does not have the</span></span>
<span class="line"><span style="color:#C3E88D;">    specified target.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    To undo modifications done by the fixture in a contained scope,</span></span>
<span class="line"><span style="color:#C3E88D;">    use :meth:\`context() &lt;pytest.MonkeyPatch.context&gt;\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">recwarn -- .../_pytest/recwarn.py:30</span></span>
<span class="line"><span style="color:#C3E88D;">    Return a :class:\`WarningsRecorder\` instance that records all warnings emitted by test functions.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    See https://docs.pytest.org/en/latest/how-to/capture-warnings.html for information</span></span>
<span class="line"><span style="color:#C3E88D;">    on warning categories.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">tmp_path_factory [session scope] -- .../_pytest/tmpdir.py:245</span></span>
<span class="line"><span style="color:#C3E88D;">    Return a :class:\`pytest.TempPathFactory\` instance for the test session.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">tmp_path -- .../_pytest/tmpdir.py:260</span></span>
<span class="line"><span style="color:#C3E88D;">    Return a temporary directory path object which is unique to each test</span></span>
<span class="line"><span style="color:#C3E88D;">    function invocation, created as a sub directory of the base temporary</span></span>
<span class="line"><span style="color:#C3E88D;">    directory.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    By default, a new base temporary directory is created each test session,</span></span>
<span class="line"><span style="color:#C3E88D;">    and old bases are removed after 3 sessions, to aid in debugging.</span></span>
<span class="line"><span style="color:#C3E88D;">    This behavior can be configured with :confval:\`tmp_path_retention_count\` and</span></span>
<span class="line"><span style="color:#C3E88D;">    :confval:\`tmp_path_retention_policy\`.</span></span>
<span class="line"><span style="color:#C3E88D;">    If \`\`--basetemp\`\` is used then it is cleared each session. See :ref:\`base</span></span>
<span class="line"><span style="color:#C3E88D;">    temporary directory\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    The returned object is a :class:\`pathlib.Path\` object.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">========================== no tests ran in 0.12s ===========================</span></span></code></pre></div><p>You can also interactively ask for help, e.g. by typing on the Python interactive prompt something like:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">help(pytest</span><span style="color:#A6ACCD;">)</span></span></code></pre></div>`,8),e=[o];function t(c,r,C,y,D,A){return n(),a("div",null,e)}const E=s(l,[["render",t]]);export{F as __pageData,E as default};
