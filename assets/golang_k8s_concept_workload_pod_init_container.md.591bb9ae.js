import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"Init Containers","description":"","frontmatter":{},"headers":[],"relativePath":"golang/k8s/concept/workload/pod/init_container.md","filePath":"golang/k8s/concept/workload/pod/init_container.md","lastUpdated":1694534070000}'),l={name:"golang/k8s/concept/workload/pod/init_container.md"},o=e(`<h1 id="init-containers" tabindex="-1">Init Containers <a class="header-anchor" href="#init-containers" aria-label="Permalink to &quot;Init Containers&quot;">​</a></h1><p>This page provides an overview of init containers: specialized containers that run before app containers in a Pod. Init containers can contain utilities or setup scripts not present in an app image.</p><p>You can specify init containers in the Pod specification alongside the <code>containers</code> array (which describes app containers).</p><h2 id="understanding-init-containers" tabindex="-1">Understanding init containers <a class="header-anchor" href="#understanding-init-containers" aria-label="Permalink to &quot;Understanding init containers&quot;">​</a></h2><p>A Pod can have multiple containers running apps within it, but it can also have one or more init containers, which are run before the app containers are started.</p><p>Init containers are exactly like regular containers, except:</p><ul><li>Init containers always run to completion.</li><li>Each init container must complete successfully before the next one starts.</li></ul><p>If a Pod&#39;s init container fails, the kubelet repeatedly restarts that init container until it succeeds. However, if the Pod has a <code>restartPolicy</code> of Never, and an init container fails during startup of that Pod, Kubernetes treats the overall Pod as failed.</p><p>To specify an init container for a Pod, add the <code>initContainers</code> field into the <a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec" target="_blank" rel="noreferrer">Pod specification</a>, as an array of <code>container</code> items (similar to the app <code>containers</code> field and its contents). See <a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container" target="_blank" rel="noreferrer">Container</a> in the API reference for more details.</p><p>The status of the init containers is returned in <code>.status.initContainerStatuses</code> field as an array of the container statuses (similar to the <code>.status.containerStatuses</code> field).</p><h3 id="differences-from-regular-containers" tabindex="-1">Differences from regular containers <a class="header-anchor" href="#differences-from-regular-containers" aria-label="Permalink to &quot;Differences from regular containers&quot;">​</a></h3><p>Init containers support all the fields and features of app containers, including resource limits, <a href="https://kubernetes.io/docs/concepts/storage/volumes/" target="_blank" rel="noreferrer">volumes</a>, and security settings. However, the resource requests and limits for an init container are handled differently, as documented in <a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/#resources" target="_blank" rel="noreferrer">Resources</a>.</p><p>Also, init containers do not support <code>lifecycle</code>, <code>livenessProbe</code>, <code>readinessProbe</code>, or <code>startupProbe</code> because they must run to completion before the Pod can be ready.</p><p>If you specify multiple init containers for a Pod, kubelet runs each init container sequentially. Each init container must succeed before the next can run. When all of the init containers have run to completion, kubelet initializes the application containers for the Pod and runs them as usual.</p><h2 id="using-init-containers" tabindex="-1">Using init containers <a class="header-anchor" href="#using-init-containers" aria-label="Permalink to &quot;Using init containers&quot;">​</a></h2><p>Because init containers have separate images from app containers, they have some advantages for start-up related code:</p><ul><li>Init containers can contain utilities or custom code for setup that are not present in an app image. For example, there is no need to make an image <code>FROM</code> another image just to use a tool like <code>sed</code>, <code>awk</code>, <code>python</code>, or <code>dig</code> during setup.</li><li>The application image builder and deployer roles can work independently without the need to jointly build a single app image.</li><li>Init containers can run with a different view of the filesystem than app containers in the same Pod. Consequently, they can be given access to Secrets that app containers cannot access.</li><li>Because init containers run to completion before any app containers start, init containers offer a mechanism to block or delay app container startup until a set of preconditions are met. Once preconditions are met, all of the app containers in a Pod can start in parallel.</li><li>Init containers can securely run utilities or custom code that would otherwise make an app container image less secure. By keeping unnecessary tools separate you can limit the attack surface of your app container image.</li></ul><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><p>Here are some ideas for how to use init containers:</p><ul><li>Wait for a Service to be created, using a shell one-line command like:</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">1..100}</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">nslookup</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myservice</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">then</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">fi</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">done</span><span style="color:#E1E4E8;">; </span><span style="color:#79B8FF;">exit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">1..100}</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nslookup</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myservice</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">then</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">fi</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">done</span><span style="color:#24292E;">; </span><span style="color:#005CC5;">exit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><ul><li>Register this Pod with a remote server from the downward API with a command like:</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-X</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http://</span><span style="color:#E1E4E8;">$MANAGEMENT_SERVICE_HOST</span><span style="color:#9ECBFF;">:</span><span style="color:#E1E4E8;">$MANAGEMENT_SERVICE_PORT</span><span style="color:#9ECBFF;">/register</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;instance=$(&lt;POD_NAME&gt;)&amp;ip=$(&lt;POD_IP&gt;)&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-X</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http://</span><span style="color:#24292E;">$MANAGEMENT_SERVICE_HOST</span><span style="color:#032F62;">:</span><span style="color:#24292E;">$MANAGEMENT_SERVICE_PORT</span><span style="color:#032F62;">/register</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;instance=$(&lt;POD_NAME&gt;)&amp;ip=$(&lt;POD_IP&gt;)&#39;</span></span></code></pre></div><ul><li>Wait for some time before starting the app container with a command like</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span></span></code></pre></div><ul><li><p>Clone a Git repository into a Volume</p></li><li><p>Place values into a configuration file and run a template tool to dynamically generate a configuration file for the main app container. For example, place the <code>POD_IP</code> value in a configuration and generate the main app configuration file using Jinja.</p></li></ul><h4 id="init-containers-in-use" tabindex="-1">Init containers in use <a class="header-anchor" href="#init-containers-in-use" aria-label="Permalink to &quot;Init containers in use&quot;">​</a></h4><p>This example defines a simple Pod that has two init containers. The first waits for <code>myservice</code>, and the second waits for <code>mydb</code>. Once both init containers complete, the Pod runs the app container from its <code>spec</code> section.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Pod</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapp-pod</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">app.kubernetes.io/name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">MyApp</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapp-container</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox:1.28</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;echo The app is running! &amp;&amp; sleep 3600&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">initContainers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">init-myservice</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox:1.28</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">init-mydb</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">busybox:1.28</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Pod</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapp-pod</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">app.kubernetes.io/name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">MyApp</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapp-container</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox:1.28</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;echo The app is running! &amp;&amp; sleep 3600&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">initContainers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">init-myservice</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox:1.28</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">init-mydb</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">busybox:1.28</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>You can start this Pod by running:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myapp.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myapp.yaml</span></span></code></pre></div><p>The output is similar to this:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pod/myapp-pod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">created</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pod/myapp-pod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">created</span></span></code></pre></div><p>And check on its status with:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myapp.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myapp.yaml</span></span></code></pre></div><p>The output is similar to this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">NAME        READY     STATUS     RESTARTS   AGE</span></span>
<span class="line"><span style="color:#e1e4e8;">myapp-pod   0/1       Init:0/2   0          6m</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">NAME        READY     STATUS     RESTARTS   AGE</span></span>
<span class="line"><span style="color:#24292e;">myapp-pod   0/1       Init:0/2   0          6m</span></span></code></pre></div><p>or for more details:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myapp.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myapp.yaml</span></span></code></pre></div><p>The output is similar to this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Name:          myapp-pod</span></span>
<span class="line"><span style="color:#e1e4e8;">Namespace:     default</span></span>
<span class="line"><span style="color:#e1e4e8;">[...]</span></span>
<span class="line"><span style="color:#e1e4e8;">Labels:        app.kubernetes.io/name=MyApp</span></span>
<span class="line"><span style="color:#e1e4e8;">Status:        Pending</span></span>
<span class="line"><span style="color:#e1e4e8;">[...]</span></span>
<span class="line"><span style="color:#e1e4e8;">Init Containers:</span></span>
<span class="line"><span style="color:#e1e4e8;">  init-myservice:</span></span>
<span class="line"><span style="color:#e1e4e8;">[...]</span></span>
<span class="line"><span style="color:#e1e4e8;">    State:         Running</span></span>
<span class="line"><span style="color:#e1e4e8;">[...]</span></span>
<span class="line"><span style="color:#e1e4e8;">  init-mydb:</span></span>
<span class="line"><span style="color:#e1e4e8;">[...]</span></span>
<span class="line"><span style="color:#e1e4e8;">    State:         Waiting</span></span>
<span class="line"><span style="color:#e1e4e8;">      Reason:      PodInitializing</span></span>
<span class="line"><span style="color:#e1e4e8;">    Ready:         False</span></span>
<span class="line"><span style="color:#e1e4e8;">[...]</span></span>
<span class="line"><span style="color:#e1e4e8;">Containers:</span></span>
<span class="line"><span style="color:#e1e4e8;">  myapp-container:</span></span>
<span class="line"><span style="color:#e1e4e8;">[...]</span></span>
<span class="line"><span style="color:#e1e4e8;">    State:         Waiting</span></span>
<span class="line"><span style="color:#e1e4e8;">      Reason:      PodInitializing</span></span>
<span class="line"><span style="color:#e1e4e8;">    Ready:         False</span></span>
<span class="line"><span style="color:#e1e4e8;">[...]</span></span>
<span class="line"><span style="color:#e1e4e8;">Events:</span></span>
<span class="line"><span style="color:#e1e4e8;">  FirstSeen    LastSeen    Count    From                      SubObjectPath                           Type          Reason        Message</span></span>
<span class="line"><span style="color:#e1e4e8;">  ---------    --------    -----    ----                      -------------                           --------      ------        -------</span></span>
<span class="line"><span style="color:#e1e4e8;">  16s          16s         1        {default-scheduler }                                              Normal        Scheduled     Successfully assigned myapp-pod to 172.17.4.201</span></span>
<span class="line"><span style="color:#e1e4e8;">  16s          16s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Pulling       pulling image &quot;busybox&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">  13s          13s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Pulled        Successfully pulled image &quot;busybox&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">  13s          13s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Created       Created container init-myservice</span></span>
<span class="line"><span style="color:#e1e4e8;">  13s          13s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Started       Started container init-myservice</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Name:          myapp-pod</span></span>
<span class="line"><span style="color:#24292e;">Namespace:     default</span></span>
<span class="line"><span style="color:#24292e;">[...]</span></span>
<span class="line"><span style="color:#24292e;">Labels:        app.kubernetes.io/name=MyApp</span></span>
<span class="line"><span style="color:#24292e;">Status:        Pending</span></span>
<span class="line"><span style="color:#24292e;">[...]</span></span>
<span class="line"><span style="color:#24292e;">Init Containers:</span></span>
<span class="line"><span style="color:#24292e;">  init-myservice:</span></span>
<span class="line"><span style="color:#24292e;">[...]</span></span>
<span class="line"><span style="color:#24292e;">    State:         Running</span></span>
<span class="line"><span style="color:#24292e;">[...]</span></span>
<span class="line"><span style="color:#24292e;">  init-mydb:</span></span>
<span class="line"><span style="color:#24292e;">[...]</span></span>
<span class="line"><span style="color:#24292e;">    State:         Waiting</span></span>
<span class="line"><span style="color:#24292e;">      Reason:      PodInitializing</span></span>
<span class="line"><span style="color:#24292e;">    Ready:         False</span></span>
<span class="line"><span style="color:#24292e;">[...]</span></span>
<span class="line"><span style="color:#24292e;">Containers:</span></span>
<span class="line"><span style="color:#24292e;">  myapp-container:</span></span>
<span class="line"><span style="color:#24292e;">[...]</span></span>
<span class="line"><span style="color:#24292e;">    State:         Waiting</span></span>
<span class="line"><span style="color:#24292e;">      Reason:      PodInitializing</span></span>
<span class="line"><span style="color:#24292e;">    Ready:         False</span></span>
<span class="line"><span style="color:#24292e;">[...]</span></span>
<span class="line"><span style="color:#24292e;">Events:</span></span>
<span class="line"><span style="color:#24292e;">  FirstSeen    LastSeen    Count    From                      SubObjectPath                           Type          Reason        Message</span></span>
<span class="line"><span style="color:#24292e;">  ---------    --------    -----    ----                      -------------                           --------      ------        -------</span></span>
<span class="line"><span style="color:#24292e;">  16s          16s         1        {default-scheduler }                                              Normal        Scheduled     Successfully assigned myapp-pod to 172.17.4.201</span></span>
<span class="line"><span style="color:#24292e;">  16s          16s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Pulling       pulling image &quot;busybox&quot;</span></span>
<span class="line"><span style="color:#24292e;">  13s          13s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Pulled        Successfully pulled image &quot;busybox&quot;</span></span>
<span class="line"><span style="color:#24292e;">  13s          13s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Created       Created container init-myservice</span></span>
<span class="line"><span style="color:#24292e;">  13s          13s         1        {kubelet 172.17.4.201}    spec.initContainers{init-myservice}     Normal        Started       Started container init-myservice</span></span></code></pre></div><p>To see logs for the init containers in this Pod, run:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">logs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myapp-pod</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init-myservice</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># Inspect the first init container</span></span>
<span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">logs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myapp-pod</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-c</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init-mydb</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># Inspect the second init container</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myapp-pod</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init-myservice</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># Inspect the first init container</span></span>
<span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myapp-pod</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-c</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init-mydb</span><span style="color:#24292E;">      </span><span style="color:#6A737D;"># Inspect the second init container</span></span></code></pre></div><p>At this point, those init containers will be waiting to discover Services named <code>mydb</code> and <code>myservice</code>.</p><p>Here&#39;s a configuration you can use to make those Services appear:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">---</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Service</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myservice</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">protocol</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">TCP</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">targetPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9376</span></span>
<span class="line"><span style="color:#B392F0;">---</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Service</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">mydb</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">protocol</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">TCP</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">targetPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9377</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">---</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Service</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myservice</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">protocol</span><span style="color:#24292E;">: </span><span style="color:#032F62;">TCP</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">targetPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9376</span></span>
<span class="line"><span style="color:#6F42C1;">---</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Service</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mydb</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">protocol</span><span style="color:#24292E;">: </span><span style="color:#032F62;">TCP</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">targetPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9377</span></span></code></pre></div><p>To create the <code>mydb</code> and <code>myservice</code> services:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">services.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">services.yaml</span></span></code></pre></div><p>The output is similar to this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">service/myservice created</span></span>
<span class="line"><span style="color:#e1e4e8;">service/mydb created</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">service/myservice created</span></span>
<span class="line"><span style="color:#24292e;">service/mydb created</span></span></code></pre></div><p>You&#39;ll then see that those init containers complete, and that the <code>myapp-pod</code> Pod moves into the Running state:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myapp.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myapp.yaml</span></span></code></pre></div><p>The output is similar to this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">NAME        READY     STATUS    RESTARTS   AGE</span></span>
<span class="line"><span style="color:#e1e4e8;">myapp-pod   1/1       Running   0          9m</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">NAME        READY     STATUS    RESTARTS   AGE</span></span>
<span class="line"><span style="color:#24292e;">myapp-pod   1/1       Running   0          9m</span></span></code></pre></div><p>This simple example should provide some inspiration for you to create your own init containers. <a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/#what-s-next" target="_blank" rel="noreferrer">What&#39;s next</a> contains a link to a more detailed example.</p><h2 id="detailed-behavior" tabindex="-1">Detailed behavior <a class="header-anchor" href="#detailed-behavior" aria-label="Permalink to &quot;Detailed behavior&quot;">​</a></h2><p>During Pod startup, the kubelet delays running init containers until the networking and storage are ready. Then the kubelet runs the Pod&#39;s init containers in the order they appear in the Pod&#39;s spec.</p><p>Each init container must exit successfully before the next container starts. If a container fails to start due to the runtime or exits with failure, it is retried according to the Pod <code>restartPolicy</code>. However, if the Pod <code>restartPolicy</code> is set to Always, the init containers use <code>restartPolicy</code> OnFailure.</p><p>A Pod cannot be <code>Ready</code> until all init containers have succeeded. The ports on an init container are not aggregated under a Service. A Pod that is initializing is in the <code>Pending</code> state but should have a condition <code>Initialized</code> set to false.</p><p>If the Pod <a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/#pod-restart-reasons" target="_blank" rel="noreferrer">restarts</a>, or is restarted, all init containers must execute again.</p><p>Changes to the init container spec are limited to the container image field. Altering an init container image field is equivalent to restarting the Pod.</p><p>Because init containers can be restarted, retried, or re-executed, init container code should be idempotent. In particular, code that writes to files on <code>EmptyDirs</code> should be prepared for the possibility that an output file already exists.</p><p>Init containers have all of the fields of an app container. However, Kubernetes prohibits <code>readinessProbe</code> from being used because init containers cannot define readiness distinct from completion. This is enforced during validation.</p><p>Use <code>activeDeadlineSeconds</code> on the Pod to prevent init containers from failing forever. The active deadline includes init containers. However it is recommended to use <code>activeDeadlineSeconds</code> only if teams deploy their application as a Job, because <code>activeDeadlineSeconds</code> has an effect even after initContainer finished. The Pod which is already running correctly would be killed by <code>activeDeadlineSeconds</code> if you set.</p><p>The name of each app and init container in a Pod must be unique; a validation error is thrown for any container sharing a name with another.</p><h3 id="api-for-sidecar-containers" tabindex="-1">API for sidecar containers <a class="header-anchor" href="#api-for-sidecar-containers" aria-label="Permalink to &quot;API for sidecar containers&quot;">​</a></h3><p><em>FEATURE STATE</em>: <code>Kubernetes v1.28 [alpha]</code></p><p>Starting with Kubernetes 1.28 in alpha, a feature gate named <code>SidecarContainers</code> allows you to specify a <code>restartPolicy</code> for init containers which is independent of the Pod and other init containers. Container <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#types-of-probe" target="_blank" rel="noreferrer">probes</a> can also be added to control their lifecycle.</p><p>If an init container is created with its <code>restartPolicy</code> set to <code>Always</code>, it will start and remain running during the entire life of the Pod, which is useful for running supporting services separated from the main application containers.</p><p>If a <code>readinessProbe</code> is specified for this init container, its result will be used to determine the <code>ready</code> state of the Pod.</p><p>Since these containers are defined as init containers, they benefit from the same ordering and sequential guarantees as other init containers, allowing them to be mixed with other init containers into complex Pod initialization flows.</p><p>Compared to regular init containers, sidecar-style init containers continue to run and the next init container can begin starting once the kubelet has set the <code>started</code> container status for the sidecar-style init container to true. That status either becomes true because there is a process running in the container and no startup probe defined, or as a result of its <code>startupProbe</code> succeeding.</p><p>This feature can be used to implement the sidecar container pattern in a more robust way, as the kubelet always restarts a sidecar container if it fails.</p><p>Here&#39;s an example of a Deployment with two containers, one of which is a sidecar:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># application/deployment-sidecar.yaml </span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">apps/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Deployment</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapp</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapp</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">replicas</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">selector</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">matchLabels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapp</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapp</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myapp</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">alpine:latest</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;while true; do echo &quot;logging&quot; &gt;&gt; /opt/logs.txt; sleep 1; done&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">volumeMounts</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">mountPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/opt</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initContainers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">logshipper</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">alpine:latest</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Always</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;tail -F /opt/logs.txt&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">volumeMounts</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">mountPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/opt</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">emptyDir</span><span style="color:#E1E4E8;">: {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># application/deployment-sidecar.yaml </span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">apps/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Deployment</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapp</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapp</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">replicas</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">selector</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">matchLabels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapp</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapp</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myapp</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">alpine:latest</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;while true; do echo &quot;logging&quot; &gt;&gt; /opt/logs.txt; sleep 1; done&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">volumeMounts</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">data</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">mountPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/opt</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initContainers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">logshipper</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">alpine:latest</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Always</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;tail -F /opt/logs.txt&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">volumeMounts</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">data</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">mountPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/opt</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">data</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">emptyDir</span><span style="color:#24292E;">: {}</span></span></code></pre></div><p>This feature is also useful for running Jobs with sidecars, as the sidecar container will not prevent the Job from completing after the main container has finished.</p><p>Here&#39;s an example of a Job with two containers, one of which is a sidecar:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># application/job/job-sidecar.yaml</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myjob</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myjob</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">alpine:latest</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;echo &quot;logging&quot; &gt; /opt/logs.txt&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">volumeMounts</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">mountPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/opt</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">initContainers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">logshipper</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">alpine:latest</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Always</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;sh&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;tail -F /opt/logs.txt&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">volumeMounts</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#85E89D;">mountPath</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/opt</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Never</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">emptyDir</span><span style="color:#E1E4E8;">: {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># application/job/job-sidecar.yaml</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myjob</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myjob</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">alpine:latest</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;echo &quot;logging&quot; &gt; /opt/logs.txt&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">volumeMounts</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">data</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">mountPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/opt</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">initContainers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">logshipper</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">alpine:latest</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Always</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&#39;sh&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;-c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;tail -F /opt/logs.txt&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">volumeMounts</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">data</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#22863A;">mountPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/opt</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Never</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">data</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">emptyDir</span><span style="color:#24292E;">: {}</span></span></code></pre></div><h3 id="resource-sharing-within-containers" tabindex="-1">Resource sharing within containers <a class="header-anchor" href="#resource-sharing-within-containers" aria-label="Permalink to &quot;Resource sharing within containers&quot;">​</a></h3><p>Given the ordering and execution for init containers, the following rules for resource usage apply:</p><ul><li><p>The highest of any particular resource request or limit defined on all init containers is the effective init request/limit. If any resource has no resource limit specified this is considered as the highest limit.</p></li><li><p>The Pod&#39;s effective request/limit for a resource is the higher of:</p><ul><li>the sum of all app containers request/limit for a resource</li><li>the effective init request/limit for a resource</li></ul></li><li><p>Scheduling is done based on effective requests/limits, which means init containers can reserve resources for initialization that are not used during the life of the Pod.</p></li><li><p>The QoS (quality of service) tier of the Pod&#39;s effective QoS tier is the QoS tier for init containers and app containers alike.</p></li></ul><p>Quota and limits are applied based on the effective Pod request and limit.</p><p>Pod level control groups (cgroups) are based on the effective Pod request and limit, the same as the scheduler.</p><h3 id="pod-restart-reasons" tabindex="-1">Pod restart reasons <a class="header-anchor" href="#pod-restart-reasons" aria-label="Permalink to &quot;Pod restart reasons&quot;">​</a></h3><p>A Pod can restart, causing re-execution of init containers, for the following reasons:</p><ul><li>The Pod infrastructure container is restarted. This is uncommon and would have to be done by someone with root access to nodes.</li><li>All containers in a Pod are terminated while <code>restartPolicy</code> is set to Always, forcing a restart, and the init container completion record has been lost due to garbage collection.</li></ul><p>The Pod will not be restarted when the init container image is changed, or the init container completion record has been lost due to garbage collection. This applies for Kubernetes v1.20 and later. If you are using an earlier version of Kubernetes, consult the documentation for the version you are using.</p><h2 id="what-s-next" tabindex="-1">What&#39;s next <a class="header-anchor" href="#what-s-next" aria-label="Permalink to &quot;What&#39;s next&quot;">​</a></h2><ul><li>Read about <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-initialization/#create-a-pod-that-has-an-init-container" target="_blank" rel="noreferrer">creating a Pod that has an init container</a></li><li>Learn how to <a href="https://kubernetes.io/docs/tasks/debug/debug-application/debug-init-containers/" target="_blank" rel="noreferrer">debug init containers</a></li><li>Read about an overview of <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/" target="_blank" rel="noreferrer">kubelet</a> and <a href="https://kubernetes.io/docs/reference/kubectl/" target="_blank" rel="noreferrer">kubectl</a></li><li>Learn about the <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#types-of-probe" target="_blank" rel="noreferrer">types of probes</a>: liveness, readiness, startup probe.</li></ul>`,89),p=[o];function t(c,r,i,y,E,d){return n(),a("div",null,p)}const m=s(l,[["render",t]]);export{h as __pageData,m as default};
