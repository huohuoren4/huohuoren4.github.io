import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.01af844e.js";const B=JSON.parse('{"title":"Pytest API and builtin fixtures","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/other/builtin.md","filePath":"python/pytest/other/builtin.md","lastUpdated":1692437254000}'),l={name:"python/pytest/other/builtin.md"},o=p(`<h1 id="pytest-api-and-builtin-fixtures" tabindex="-1">Pytest API and builtin fixtures <a class="header-anchor" href="#pytest-api-and-builtin-fixtures" aria-label="Permalink to &quot;Pytest API and builtin fixtures&quot;">â€‹</a></h1><p>Most of the information of this page has been moved over to <a href="/python/pytest/reference_guides/api_reference/constants#api-reference">API Reference</a>.</p><p>For information on plugin hooks and objects, see <a href="/python/pytest/how_to_guides/write_plugin#writing-plugins">Writing plugins</a>.</p><p>For information on the <code>pytest.mark</code> mechanism, see <a href="/python/pytest/how_to_guides/mark#how-to-mark-test-functions-with-attributes">How to mark test functions with attributes</a>.</p><p>For information about fixtures, see <a href="/python/pytest/reference_guides/fixture_reference#fixtures-reference">Fixtures reference</a>. To see a complete list of available fixtures (add <code>-v</code> to also see fixtures with leading <code>_</code>), type :</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">--fixtures</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"><span style="color:#B392F0;">cache</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.../_pytest/cacheprovider.py:528</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cache</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">that</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">can</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">persist</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">between</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">testing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sessions.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cache.get(key,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">default</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cache.set(key,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">value</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Keys</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">must</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">/</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">separated</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">strings,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">where</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">first</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">part</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">usually</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">your</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">or</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">application</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">avoid</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clashes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">other</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cache</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">users.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Values</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">can</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">any</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">handled</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">by</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">json</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stdlib</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">module.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">capsysbinary</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.../_pytest/capture.py:1001</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Enable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bytes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">capturing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">writes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">sys.stdout</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">sys.stderr</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#79B8FF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">The</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">output</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">made</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">available</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">via</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">\`\`capsysbinary.readouterr</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">\`\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">calls,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">which</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">out,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">err</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namedtuple.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">out</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">err</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">bytes</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Returns</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">an</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:class:\`</span><span style="color:#B392F0;">CaptureFixture[bytes]</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">pytest.CaptureFixture</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">..</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">code-block::</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_output</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">capsysbinary</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">capsysbinary.readouterr</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">captured.out</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b&quot;hello\\n&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">capfd</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.../_pytest/capture.py:1029</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Enable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">capturing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">writes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">descriptors</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">1</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">2</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#79B8FF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">The</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">output</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">made</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">available</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">via</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">\`\`capfd.readouterr</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">calls,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">which</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">out,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">err</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namedtuple.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">out</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">err</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">text</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Returns</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">an</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:class:\`</span><span style="color:#B392F0;">CaptureFixture[str]</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">pytest.CaptureFixture</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">..</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">code-block::</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_system_echo</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">capfd</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">os.system(</span><span style="color:#B392F0;">&#39;echo &quot;hello&quot;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">capfd.readouterr</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">captured.out</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello\\n&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">capfdbinary</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.../_pytest/capture.py:1057</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Enable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bytes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">capturing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">writes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">file</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">descriptors</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">1</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">2</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#79B8FF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">The</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">output</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">made</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">available</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">via</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">\`\`capfd.readouterr</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">calls,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">which</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">out,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">err</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namedtuple.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">out</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">err</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">byte</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Returns</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">an</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:class:\`</span><span style="color:#B392F0;">CaptureFixture[bytes]</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">pytest.CaptureFixture</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">..</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">code-block::</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_system_echo</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">capfdbinary</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">os.system(</span><span style="color:#B392F0;">&#39;echo &quot;hello&quot;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">capfdbinary.readouterr</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">captured.out</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b&quot;hello\\n&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">capsys</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.../_pytest/capture.py:973</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Enable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">capturing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">writes</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">sys.stdout</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">sys.stderr</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#79B8FF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">The</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">output</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">made</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">available</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">via</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">\`\`capsys.readouterr</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">calls,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">which</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">out,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">err</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">namedtuple.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">out</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">and</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">err</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">text</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Returns</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">an</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:class:\`</span><span style="color:#B392F0;">CaptureFixture[str]</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">pytest.CaptureFixture</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">..</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">code-block::</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_output</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">capsys</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">capsys.readouterr</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">captured.out</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello\\n&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">doctest_namespace</span><span style="color:#E1E4E8;"> [session </span><span style="color:#9ECBFF;">scope]</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.../_pytest/doctest.py:737</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Fixture</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">that</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">returns</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:py:class:\`</span><span style="color:#B392F0;">dict</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">that</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">injected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">into</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">doctests.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Usually</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fixture</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">used</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">conjunction</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">another</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\`</span><span style="color:#B392F0;">autouse</span><span style="color:#9ECBFF;">\`\`</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fixture:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">..</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">code-block::</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">@pytest.fixture(autouse</span><span style="color:#E1E4E8;">=True)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add_np</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">doctest_namespace</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">doctest_namespace[</span><span style="color:#B392F0;">&quot;np&quot;</span><span style="color:#B392F0;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">numpy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">For</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">more</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">details:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">:ref:\`</span><span style="color:#B392F0;">doctest_namespace</span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">pytestconfig</span><span style="color:#E1E4E8;"> [session </span><span style="color:#9ECBFF;">scope]</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.../_pytest/fixtures.py:1353</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">Session-scoped</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fixture</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">that</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">returns</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session&#39;s :class:\`pytest.Config\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    object.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    Example::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">        def test_foo(pytestconfig):</span></span>
<span class="line"><span style="color:#9ECBFF;">            if pytestconfig.getoption(&quot;verbose&quot;) &gt; 0:</span></span>
<span class="line"><span style="color:#9ECBFF;">                ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">record_property -- .../_pytest/junitxml.py:282</span></span>
<span class="line"><span style="color:#9ECBFF;">    Add extra properties to the calling test.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    User properties become part of the test report and are available to the</span></span>
<span class="line"><span style="color:#9ECBFF;">    configured reporters, like JUnit XML.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    The fixture is callable with \`\`name, value\`\`. The value is automatically</span></span>
<span class="line"><span style="color:#9ECBFF;">    XML-encoded.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    Example::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">        def test_function(record_property):</span></span>
<span class="line"><span style="color:#9ECBFF;">            record_property(&quot;example_key&quot;, 1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">record_xml_attribute -- .../_pytest/junitxml.py:305</span></span>
<span class="line"><span style="color:#9ECBFF;">    Add extra xml attributes to the tag for the calling test.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    The fixture is callable with \`\`name, value\`\`. The value is</span></span>
<span class="line"><span style="color:#9ECBFF;">    automatically XML-encoded.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">record_testsuite_property [session scope] -- .../_pytest/junitxml.py:343</span></span>
<span class="line"><span style="color:#9ECBFF;">    Record a new \`\`&lt;property&gt;\`\` tag as child of the root \`\`&lt;testsuite&gt;\`\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    This is suitable to writing global information regarding the entire test</span></span>
<span class="line"><span style="color:#9ECBFF;">    suite, and is compatible with \`\`xunit2\`\` JUnit family.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    This is a \`\`session\`\`-scoped fixture which is called with \`\`(name, value)\`\`. Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    .. code-block:: python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">        def test_foo(record_testsuite_property):</span></span>
<span class="line"><span style="color:#9ECBFF;">            record_testsuite_property(&quot;ARCH&quot;, &quot;PPC&quot;)</span></span>
<span class="line"><span style="color:#9ECBFF;">            record_testsuite_property(&quot;STORAGE_TYPE&quot;, &quot;CEPH&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    :param name:</span></span>
<span class="line"><span style="color:#9ECBFF;">        The property name.</span></span>
<span class="line"><span style="color:#9ECBFF;">    :param value:</span></span>
<span class="line"><span style="color:#9ECBFF;">        The property value. Will be converted to a string.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    .. warning::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">        Currently this fixture **does not work** with the</span></span>
<span class="line"><span style="color:#9ECBFF;">        \`pytest-xdist &lt;https://github.com/pytest-dev/pytest-xdist&gt;\`__ plugin. See</span></span>
<span class="line"><span style="color:#9ECBFF;">        :issue:\`7767\` for details.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">tmpdir_factory [session scope] -- .../_pytest/legacypath.py:302</span></span>
<span class="line"><span style="color:#9ECBFF;">    Return a :class:\`pytest.TempdirFactory\` instance for the test session.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">tmpdir -- .../_pytest/legacypath.py:309</span></span>
<span class="line"><span style="color:#9ECBFF;">    Return a temporary directory path object which is unique to each test</span></span>
<span class="line"><span style="color:#9ECBFF;">    function invocation, created as a sub directory of the base temporary</span></span>
<span class="line"><span style="color:#9ECBFF;">    directory.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    By default, a new base temporary directory is created each test session,</span></span>
<span class="line"><span style="color:#9ECBFF;">    and old bases are removed after 3 sessions, to aid in debugging. If</span></span>
<span class="line"><span style="color:#9ECBFF;">    \`\`--basetemp\`\` is used then it is cleared each session. See :ref:\`base</span></span>
<span class="line"><span style="color:#9ECBFF;">    temporary directory\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    The returned object is a \`legacy_path\`_ object.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    .. note::</span></span>
<span class="line"><span style="color:#9ECBFF;">        These days, it is preferred to use \`\`tmp_path\`\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">        :ref:\`About the tmpdir and tmpdir_factory fixtures&lt;tmpdir and tmpdir_factory&gt;\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    .. _legacy_path: https://py.readthedocs.io/en/latest/path.html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">caplog -- .../_pytest/logging.py:570</span></span>
<span class="line"><span style="color:#9ECBFF;">    Access and control log capturing.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    Captured logs are available through the following properties/methods::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    * caplog.messages        -&gt; list of format-interpolated log messages</span></span>
<span class="line"><span style="color:#9ECBFF;">    * caplog.text            -&gt; string containing formatted log output</span></span>
<span class="line"><span style="color:#9ECBFF;">    * caplog.records         -&gt; list of logging.LogRecord instances</span></span>
<span class="line"><span style="color:#9ECBFF;">    * caplog.record_tuples   -&gt; list of (logger_name, level, message) tuples</span></span>
<span class="line"><span style="color:#9ECBFF;">    * caplog.clear()         -&gt; clear captured records and formatted log output string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">monkeypatch -- .../_pytest/monkeypatch.py:30</span></span>
<span class="line"><span style="color:#9ECBFF;">    A convenient fixture for monkey-patching.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    The fixture provides these methods to modify objects, dictionaries, or</span></span>
<span class="line"><span style="color:#9ECBFF;">    :data:\`os.environ\`:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    * :meth:\`monkeypatch.setattr(obj, name, value, raising=True) &lt;pytest.MonkeyPatch.setattr&gt;\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    * :meth:\`monkeypatch.delattr(obj, name, raising=True) &lt;pytest.MonkeyPatch.delattr&gt;\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    * :meth:\`monkeypatch.setitem(mapping, name, value) &lt;pytest.MonkeyPatch.setitem&gt;\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    * :meth:\`monkeypatch.delitem(obj, name, raising=True) &lt;pytest.MonkeyPatch.delitem&gt;\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    * :meth:\`monkeypatch.setenv(name, value, prepend=None) &lt;pytest.MonkeyPatch.setenv&gt;\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    * :meth:\`monkeypatch.delenv(name, raising=True) &lt;pytest.MonkeyPatch.delenv&gt;\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    * :meth:\`monkeypatch.syspath_prepend(path) &lt;pytest.MonkeyPatch.syspath_prepend&gt;\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    * :meth:\`monkeypatch.chdir(path) &lt;pytest.MonkeyPatch.chdir&gt;\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    * :meth:\`monkeypatch.context() &lt;pytest.MonkeyPatch.context&gt;\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    All modifications will be undone after the requesting test function or</span></span>
<span class="line"><span style="color:#9ECBFF;">    fixture has finished. The \`\`raising\`\` parameter determines if a :class:\`KeyError\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    or :class:\`AttributeError\` will be raised if the set/deletion operation does not have the</span></span>
<span class="line"><span style="color:#9ECBFF;">    specified target.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    To undo modifications done by the fixture in a contained scope,</span></span>
<span class="line"><span style="color:#9ECBFF;">    use :meth:\`context() &lt;pytest.MonkeyPatch.context&gt;\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">recwarn -- .../_pytest/recwarn.py:30</span></span>
<span class="line"><span style="color:#9ECBFF;">    Return a :class:\`WarningsRecorder\` instance that records all warnings emitted by test functions.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    See https://docs.pytest.org/en/latest/how-to/capture-warnings.html for information</span></span>
<span class="line"><span style="color:#9ECBFF;">    on warning categories.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">tmp_path_factory [session scope] -- .../_pytest/tmpdir.py:245</span></span>
<span class="line"><span style="color:#9ECBFF;">    Return a :class:\`pytest.TempPathFactory\` instance for the test session.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">tmp_path -- .../_pytest/tmpdir.py:260</span></span>
<span class="line"><span style="color:#9ECBFF;">    Return a temporary directory path object which is unique to each test</span></span>
<span class="line"><span style="color:#9ECBFF;">    function invocation, created as a sub directory of the base temporary</span></span>
<span class="line"><span style="color:#9ECBFF;">    directory.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    By default, a new base temporary directory is created each test session,</span></span>
<span class="line"><span style="color:#9ECBFF;">    and old bases are removed after 3 sessions, to aid in debugging.</span></span>
<span class="line"><span style="color:#9ECBFF;">    This behavior can be configured with :confval:\`tmp_path_retention_count\` and</span></span>
<span class="line"><span style="color:#9ECBFF;">    :confval:\`tmp_path_retention_policy\`.</span></span>
<span class="line"><span style="color:#9ECBFF;">    If \`\`--basetemp\`\` is used then it is cleared each session. See :ref:\`base</span></span>
<span class="line"><span style="color:#9ECBFF;">    temporary directory\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">    The returned object is a :class:\`pathlib.Path\` object.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">========================== no tests ran in 0.12s ===========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">--fixtures</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"><span style="color:#6F42C1;">cache</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.../_pytest/cacheprovider.py:528</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cache</span><span style="color:#24292E;"> </span><span style="color:#032F62;">object</span><span style="color:#24292E;"> </span><span style="color:#032F62;">that</span><span style="color:#24292E;"> </span><span style="color:#032F62;">can</span><span style="color:#24292E;"> </span><span style="color:#032F62;">persist</span><span style="color:#24292E;"> </span><span style="color:#032F62;">state</span><span style="color:#24292E;"> </span><span style="color:#032F62;">between</span><span style="color:#24292E;"> </span><span style="color:#032F62;">testing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sessions.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">cache.get(key,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">default</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">cache.set(key,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">value</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Keys</span><span style="color:#24292E;"> </span><span style="color:#032F62;">must</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">/</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">separated</span><span style="color:#24292E;"> </span><span style="color:#032F62;">strings,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">where</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">first</span><span style="color:#24292E;"> </span><span style="color:#032F62;">part</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">usually</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">your</span><span style="color:#24292E;"> </span><span style="color:#032F62;">plugin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">or</span><span style="color:#24292E;"> </span><span style="color:#032F62;">application</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">avoid</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clashes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">other</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cache</span><span style="color:#24292E;"> </span><span style="color:#032F62;">users.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Values</span><span style="color:#24292E;"> </span><span style="color:#032F62;">can</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">any</span><span style="color:#24292E;"> </span><span style="color:#032F62;">object</span><span style="color:#24292E;"> </span><span style="color:#032F62;">handled</span><span style="color:#24292E;"> </span><span style="color:#032F62;">by</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">json</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stdlib</span><span style="color:#24292E;"> </span><span style="color:#032F62;">module.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">capsysbinary</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.../_pytest/capture.py:1001</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Enable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bytes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">capturing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">writes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">sys.stdout</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">sys.stderr</span><span style="color:#032F62;">\`\`</span><span style="color:#005CC5;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">The</span><span style="color:#24292E;"> </span><span style="color:#032F62;">captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">output</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">made</span><span style="color:#24292E;"> </span><span style="color:#032F62;">available</span><span style="color:#24292E;"> </span><span style="color:#032F62;">via</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">\`\`capsysbinary.readouterr</span><span style="color:#24292E;">()</span><span style="color:#032F62;">\`\`</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;"> </span><span style="color:#032F62;">calls,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">which</span><span style="color:#24292E;"> </span><span style="color:#032F62;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">out,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">err</span><span style="color:#24292E;">)</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namedtuple.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">out</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">err</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">bytes</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Returns</span><span style="color:#24292E;"> </span><span style="color:#032F62;">an</span><span style="color:#24292E;"> </span><span style="color:#032F62;">instance</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:class:\`</span><span style="color:#6F42C1;">CaptureFixture[bytes]</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">pytest.CaptureFixture</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">..</span><span style="color:#24292E;"> </span><span style="color:#032F62;">code-block::</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_output</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">capsysbinary</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">capsysbinary.readouterr</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">captured.out</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b&quot;hello\\n&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">capfd</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.../_pytest/capture.py:1029</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Enable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">capturing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">writes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file</span><span style="color:#24292E;"> </span><span style="color:#032F62;">descriptors</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">1</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">2</span><span style="color:#032F62;">\`\`</span><span style="color:#005CC5;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">The</span><span style="color:#24292E;"> </span><span style="color:#032F62;">captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">output</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">made</span><span style="color:#24292E;"> </span><span style="color:#032F62;">available</span><span style="color:#24292E;"> </span><span style="color:#032F62;">via</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">\`\`capfd.readouterr</span><span style="color:#24292E;">()</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">calls,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">which</span><span style="color:#24292E;"> </span><span style="color:#032F62;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">out,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">err</span><span style="color:#24292E;">)</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namedtuple.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">out</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">err</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">text</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Returns</span><span style="color:#24292E;"> </span><span style="color:#032F62;">an</span><span style="color:#24292E;"> </span><span style="color:#032F62;">instance</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:class:\`</span><span style="color:#6F42C1;">CaptureFixture[str]</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">pytest.CaptureFixture</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">..</span><span style="color:#24292E;"> </span><span style="color:#032F62;">code-block::</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_system_echo</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">capfd</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">os.system(</span><span style="color:#6F42C1;">&#39;echo &quot;hello&quot;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">capfd.readouterr</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">captured.out</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello\\n&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">capfdbinary</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.../_pytest/capture.py:1057</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Enable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bytes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">capturing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">writes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">file</span><span style="color:#24292E;"> </span><span style="color:#032F62;">descriptors</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">1</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">2</span><span style="color:#032F62;">\`\`</span><span style="color:#005CC5;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">The</span><span style="color:#24292E;"> </span><span style="color:#032F62;">captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">output</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">made</span><span style="color:#24292E;"> </span><span style="color:#032F62;">available</span><span style="color:#24292E;"> </span><span style="color:#032F62;">via</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">\`\`capfd.readouterr</span><span style="color:#24292E;">()</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">calls,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">which</span><span style="color:#24292E;"> </span><span style="color:#032F62;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">out,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">err</span><span style="color:#24292E;">)</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namedtuple.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">out</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">err</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">byte</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Returns</span><span style="color:#24292E;"> </span><span style="color:#032F62;">an</span><span style="color:#24292E;"> </span><span style="color:#032F62;">instance</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:class:\`</span><span style="color:#6F42C1;">CaptureFixture[bytes]</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">pytest.CaptureFixture</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">..</span><span style="color:#24292E;"> </span><span style="color:#032F62;">code-block::</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_system_echo</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">capfdbinary</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">os.system(</span><span style="color:#6F42C1;">&#39;echo &quot;hello&quot;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">capfdbinary.readouterr</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">captured.out</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b&quot;hello\\n&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">capsys</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.../_pytest/capture.py:973</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Enable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">capturing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">writes</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">sys.stdout</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">sys.stderr</span><span style="color:#032F62;">\`\`</span><span style="color:#005CC5;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">The</span><span style="color:#24292E;"> </span><span style="color:#032F62;">captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">output</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">made</span><span style="color:#24292E;"> </span><span style="color:#032F62;">available</span><span style="color:#24292E;"> </span><span style="color:#032F62;">via</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">\`\`capsys.readouterr</span><span style="color:#24292E;">()</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">calls,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">which</span><span style="color:#24292E;"> </span><span style="color:#032F62;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">out,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">err</span><span style="color:#24292E;">)</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namedtuple.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">out</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">and</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">err</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">text</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">objects.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Returns</span><span style="color:#24292E;"> </span><span style="color:#032F62;">an</span><span style="color:#24292E;"> </span><span style="color:#032F62;">instance</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:class:\`</span><span style="color:#6F42C1;">CaptureFixture[str]</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">pytest.CaptureFixture</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">..</span><span style="color:#24292E;"> </span><span style="color:#032F62;">code-block::</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_output</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">capsys</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">capsys.readouterr</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">captured.out</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello\\n&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">doctest_namespace</span><span style="color:#24292E;"> [session </span><span style="color:#032F62;">scope]</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.../_pytest/doctest.py:737</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Fixture</span><span style="color:#24292E;"> </span><span style="color:#032F62;">that</span><span style="color:#24292E;"> </span><span style="color:#032F62;">returns</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:py:class:\`</span><span style="color:#6F42C1;">dict</span><span style="color:#032F62;">\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">that</span><span style="color:#24292E;"> </span><span style="color:#032F62;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">injected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">into</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">namespace</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">doctests.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Usually</span><span style="color:#24292E;"> </span><span style="color:#032F62;">this</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fixture</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">used</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">conjunction</span><span style="color:#24292E;"> </span><span style="color:#032F62;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">another</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\`</span><span style="color:#6F42C1;">autouse</span><span style="color:#032F62;">\`\`</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fixture:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">..</span><span style="color:#24292E;"> </span><span style="color:#032F62;">code-block::</span><span style="color:#24292E;"> </span><span style="color:#032F62;">python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">@pytest.fixture(autouse</span><span style="color:#24292E;">=True)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add_np</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">doctest_namespace</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">doctest_namespace[</span><span style="color:#6F42C1;">&quot;np&quot;</span><span style="color:#6F42C1;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">numpy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">For</span><span style="color:#24292E;"> </span><span style="color:#032F62;">more</span><span style="color:#24292E;"> </span><span style="color:#032F62;">details:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:ref:\`</span><span style="color:#6F42C1;">doctest_namespace</span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">pytestconfig</span><span style="color:#24292E;"> [session </span><span style="color:#032F62;">scope]</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.../_pytest/fixtures.py:1353</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Session-scoped</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fixture</span><span style="color:#24292E;"> </span><span style="color:#032F62;">that</span><span style="color:#24292E;"> </span><span style="color:#032F62;">returns</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session&#39;s :class:\`pytest.Config\`</span></span>
<span class="line"><span style="color:#032F62;">    object.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    Example::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">        def test_foo(pytestconfig):</span></span>
<span class="line"><span style="color:#032F62;">            if pytestconfig.getoption(&quot;verbose&quot;) &gt; 0:</span></span>
<span class="line"><span style="color:#032F62;">                ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">record_property -- .../_pytest/junitxml.py:282</span></span>
<span class="line"><span style="color:#032F62;">    Add extra properties to the calling test.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    User properties become part of the test report and are available to the</span></span>
<span class="line"><span style="color:#032F62;">    configured reporters, like JUnit XML.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    The fixture is callable with \`\`name, value\`\`. The value is automatically</span></span>
<span class="line"><span style="color:#032F62;">    XML-encoded.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    Example::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">        def test_function(record_property):</span></span>
<span class="line"><span style="color:#032F62;">            record_property(&quot;example_key&quot;, 1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">record_xml_attribute -- .../_pytest/junitxml.py:305</span></span>
<span class="line"><span style="color:#032F62;">    Add extra xml attributes to the tag for the calling test.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    The fixture is callable with \`\`name, value\`\`. The value is</span></span>
<span class="line"><span style="color:#032F62;">    automatically XML-encoded.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">record_testsuite_property [session scope] -- .../_pytest/junitxml.py:343</span></span>
<span class="line"><span style="color:#032F62;">    Record a new \`\`&lt;property&gt;\`\` tag as child of the root \`\`&lt;testsuite&gt;\`\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    This is suitable to writing global information regarding the entire test</span></span>
<span class="line"><span style="color:#032F62;">    suite, and is compatible with \`\`xunit2\`\` JUnit family.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    This is a \`\`session\`\`-scoped fixture which is called with \`\`(name, value)\`\`. Example:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    .. code-block:: python</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">        def test_foo(record_testsuite_property):</span></span>
<span class="line"><span style="color:#032F62;">            record_testsuite_property(&quot;ARCH&quot;, &quot;PPC&quot;)</span></span>
<span class="line"><span style="color:#032F62;">            record_testsuite_property(&quot;STORAGE_TYPE&quot;, &quot;CEPH&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    :param name:</span></span>
<span class="line"><span style="color:#032F62;">        The property name.</span></span>
<span class="line"><span style="color:#032F62;">    :param value:</span></span>
<span class="line"><span style="color:#032F62;">        The property value. Will be converted to a string.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    .. warning::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">        Currently this fixture **does not work** with the</span></span>
<span class="line"><span style="color:#032F62;">        \`pytest-xdist &lt;https://github.com/pytest-dev/pytest-xdist&gt;\`__ plugin. See</span></span>
<span class="line"><span style="color:#032F62;">        :issue:\`7767\` for details.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">tmpdir_factory [session scope] -- .../_pytest/legacypath.py:302</span></span>
<span class="line"><span style="color:#032F62;">    Return a :class:\`pytest.TempdirFactory\` instance for the test session.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">tmpdir -- .../_pytest/legacypath.py:309</span></span>
<span class="line"><span style="color:#032F62;">    Return a temporary directory path object which is unique to each test</span></span>
<span class="line"><span style="color:#032F62;">    function invocation, created as a sub directory of the base temporary</span></span>
<span class="line"><span style="color:#032F62;">    directory.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    By default, a new base temporary directory is created each test session,</span></span>
<span class="line"><span style="color:#032F62;">    and old bases are removed after 3 sessions, to aid in debugging. If</span></span>
<span class="line"><span style="color:#032F62;">    \`\`--basetemp\`\` is used then it is cleared each session. See :ref:\`base</span></span>
<span class="line"><span style="color:#032F62;">    temporary directory\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    The returned object is a \`legacy_path\`_ object.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    .. note::</span></span>
<span class="line"><span style="color:#032F62;">        These days, it is preferred to use \`\`tmp_path\`\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">        :ref:\`About the tmpdir and tmpdir_factory fixtures&lt;tmpdir and tmpdir_factory&gt;\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    .. _legacy_path: https://py.readthedocs.io/en/latest/path.html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">caplog -- .../_pytest/logging.py:570</span></span>
<span class="line"><span style="color:#032F62;">    Access and control log capturing.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    Captured logs are available through the following properties/methods::</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    * caplog.messages        -&gt; list of format-interpolated log messages</span></span>
<span class="line"><span style="color:#032F62;">    * caplog.text            -&gt; string containing formatted log output</span></span>
<span class="line"><span style="color:#032F62;">    * caplog.records         -&gt; list of logging.LogRecord instances</span></span>
<span class="line"><span style="color:#032F62;">    * caplog.record_tuples   -&gt; list of (logger_name, level, message) tuples</span></span>
<span class="line"><span style="color:#032F62;">    * caplog.clear()         -&gt; clear captured records and formatted log output string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">monkeypatch -- .../_pytest/monkeypatch.py:30</span></span>
<span class="line"><span style="color:#032F62;">    A convenient fixture for monkey-patching.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    The fixture provides these methods to modify objects, dictionaries, or</span></span>
<span class="line"><span style="color:#032F62;">    :data:\`os.environ\`:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    * :meth:\`monkeypatch.setattr(obj, name, value, raising=True) &lt;pytest.MonkeyPatch.setattr&gt;\`</span></span>
<span class="line"><span style="color:#032F62;">    * :meth:\`monkeypatch.delattr(obj, name, raising=True) &lt;pytest.MonkeyPatch.delattr&gt;\`</span></span>
<span class="line"><span style="color:#032F62;">    * :meth:\`monkeypatch.setitem(mapping, name, value) &lt;pytest.MonkeyPatch.setitem&gt;\`</span></span>
<span class="line"><span style="color:#032F62;">    * :meth:\`monkeypatch.delitem(obj, name, raising=True) &lt;pytest.MonkeyPatch.delitem&gt;\`</span></span>
<span class="line"><span style="color:#032F62;">    * :meth:\`monkeypatch.setenv(name, value, prepend=None) &lt;pytest.MonkeyPatch.setenv&gt;\`</span></span>
<span class="line"><span style="color:#032F62;">    * :meth:\`monkeypatch.delenv(name, raising=True) &lt;pytest.MonkeyPatch.delenv&gt;\`</span></span>
<span class="line"><span style="color:#032F62;">    * :meth:\`monkeypatch.syspath_prepend(path) &lt;pytest.MonkeyPatch.syspath_prepend&gt;\`</span></span>
<span class="line"><span style="color:#032F62;">    * :meth:\`monkeypatch.chdir(path) &lt;pytest.MonkeyPatch.chdir&gt;\`</span></span>
<span class="line"><span style="color:#032F62;">    * :meth:\`monkeypatch.context() &lt;pytest.MonkeyPatch.context&gt;\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    All modifications will be undone after the requesting test function or</span></span>
<span class="line"><span style="color:#032F62;">    fixture has finished. The \`\`raising\`\` parameter determines if a :class:\`KeyError\`</span></span>
<span class="line"><span style="color:#032F62;">    or :class:\`AttributeError\` will be raised if the set/deletion operation does not have the</span></span>
<span class="line"><span style="color:#032F62;">    specified target.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    To undo modifications done by the fixture in a contained scope,</span></span>
<span class="line"><span style="color:#032F62;">    use :meth:\`context() &lt;pytest.MonkeyPatch.context&gt;\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">recwarn -- .../_pytest/recwarn.py:30</span></span>
<span class="line"><span style="color:#032F62;">    Return a :class:\`WarningsRecorder\` instance that records all warnings emitted by test functions.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    See https://docs.pytest.org/en/latest/how-to/capture-warnings.html for information</span></span>
<span class="line"><span style="color:#032F62;">    on warning categories.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">tmp_path_factory [session scope] -- .../_pytest/tmpdir.py:245</span></span>
<span class="line"><span style="color:#032F62;">    Return a :class:\`pytest.TempPathFactory\` instance for the test session.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">tmp_path -- .../_pytest/tmpdir.py:260</span></span>
<span class="line"><span style="color:#032F62;">    Return a temporary directory path object which is unique to each test</span></span>
<span class="line"><span style="color:#032F62;">    function invocation, created as a sub directory of the base temporary</span></span>
<span class="line"><span style="color:#032F62;">    directory.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    By default, a new base temporary directory is created each test session,</span></span>
<span class="line"><span style="color:#032F62;">    and old bases are removed after 3 sessions, to aid in debugging.</span></span>
<span class="line"><span style="color:#032F62;">    This behavior can be configured with :confval:\`tmp_path_retention_count\` and</span></span>
<span class="line"><span style="color:#032F62;">    :confval:\`tmp_path_retention_policy\`.</span></span>
<span class="line"><span style="color:#032F62;">    If \`\`--basetemp\`\` is used then it is cleared each session. See :ref:\`base</span></span>
<span class="line"><span style="color:#032F62;">    temporary directory\`.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">    The returned object is a :class:\`pathlib.Path\` object.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">========================== no tests ran in 0.12s ===========================</span></span></code></pre></div><p>You can also interactively ask for help, e.g. by typing on the Python interactive prompt something like:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">help(pytest</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">help(pytest</span><span style="color:#24292E;">)</span></span></code></pre></div>`,8),e=[o];function t(c,r,y,E,F,i){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{B as __pageData,u as default};
