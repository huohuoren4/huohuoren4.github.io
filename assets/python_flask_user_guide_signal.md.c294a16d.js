import{_ as s,o as a,c as e,V as n}from"./chunks/framework.d3b95951.js";const d=JSON.parse('{"title":"Signals","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/signal.md","filePath":"python/flask/user_guide/signal.md"}'),l={name:"python/flask/user_guide/signal.md"},t=n(`<h1 id="signals" tabindex="-1">Signals <a class="header-anchor" href="#signals" aria-label="Permalink to &quot;Signals&quot;">​</a></h1><p>Signals are a lightweight way to notify subscribers of certain events during the lifecycle of the application and each request. When an event occurs, it emits the signal, which calls each subscriber.</p><p>Signals are implemented by the Blinker library. See its documentation for detailed information. Flask provides some built-in signals. Extensions may provide their own.</p><p>Many signals mirror Flask’s decorator-based callbacks with similar names. For example, the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.request_started" target="_blank" rel="noreferrer">request_started</a> signal is similar to the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.before_request" target="_blank" rel="noreferrer">before_request()</a> decorator. The advantage of signals over handlers is that they can be subscribed to temporarily, and can’t directly affect the application. This is useful for testing, metrics, auditing, and more. For example, if you want to know what templates were rendered at what parts of what requests, there is a signal that will notify you of that information.</p><h2 id="core-signals" tabindex="-1">Core Signals <a class="header-anchor" href="#core-signals" aria-label="Permalink to &quot;Core Signals&quot;">​</a></h2><p>See <a href="https://flask.palletsprojects.com/en/2.3.x/api/#core-signals-list" target="_blank" rel="noreferrer">Signals</a> for a list of all built-in signals. The <a href="https://flask.palletsprojects.com/en/2.3.x/lifecycle/" target="_blank" rel="noreferrer">Application Structure and Lifecycle</a> page also describes the order that signals and decorators execute.</p><h2 id="subscribing-to-signals" tabindex="-1">Subscribing to Signals <a class="header-anchor" href="#subscribing-to-signals" aria-label="Permalink to &quot;Subscribing to Signals&quot;">​</a></h2><p>To subscribe to a signal, you can use the <a href="https://blinker.readthedocs.io/en/stable/#blinker.base.Signal.connect" target="_blank" rel="noreferrer">connect()</a> method of a signal. The first argument is the function that should be called when the signal is emitted, the optional second argument specifies a sender. To unsubscribe from a signal, you can use the <a href="https://blinker.readthedocs.io/en/stable/#blinker.base.Signal.disconnect" target="_blank" rel="noreferrer">disconnect()</a> method.</p><p>For all core Flask signals, the sender is the application that issued the signal. When you subscribe to a signal, be sure to also provide a sender unless you really want to listen for signals from all applications. This is especially true if you are developing an extension.</p><p>For example, here is a helper context manager that can be used in a unit test to determine which templates were rendered and what variables were passed to the template:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> flask </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> template_rendered</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> contextlib </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> contextmanager</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">contextmanager</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">captured_templates</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    recorded </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">sender</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">template</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;font-style:italic;">extra</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        recorded</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">((</span><span style="color:#82AAFF;">template</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> context</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    template_rendered</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> app</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> recorded</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        template_rendered</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">disconnect</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> app</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>This can now easily be paired with a test client:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">captured_templates</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> templates</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    rv </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test_client</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> rv</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">status_code</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">templates</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    template</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> templates</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> template</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.html</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">context</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">items</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span></code></pre></div><p>Make sure to subscribe with an extra <code>**extra</code> argument so that your calls don’t fail if Flask introduces new arguments to the signals.</p><p>All the template rendering in the code issued by the application app in the body of the <code>with</code> block will now be recorded in the templates variable. Whenever a template is rendered, the template object as well as context are appended to it.</p><p>Additionally there is a convenient helper method (<a href="https://blinker.readthedocs.io/en/stable/#blinker.base.Signal.connected_to" target="_blank" rel="noreferrer">connected_to()</a>) that allows you to temporarily subscribe a function to a signal with a context manager on its own. Because the return value of the context manager cannot be specified that way, you have to pass the list in as an argument:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> flask </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> template_rendered</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">captured_templates</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">recorded</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;font-style:italic;">extra</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">sender</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">template</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        recorded</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">((</span><span style="color:#82AAFF;">template</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> context</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> template_rendered</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connected_to</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> app</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>The example above would then look like this:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">templates </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">captured_templates</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> templates</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">**</span><span style="color:#82AAFF;">extra</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    template</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> context </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> templates</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span></span></code></pre></div><h2 id="creating-signals" tabindex="-1">Creating Signals <a class="header-anchor" href="#creating-signals" aria-label="Permalink to &quot;Creating Signals&quot;">​</a></h2><p>If you want to use signals in your own application, you can use the blinker library directly. The most common use case are named signals in a custom <a href="https://blinker.readthedocs.io/en/stable/#blinker.base.Namespace" target="_blank" rel="noreferrer">Namespace</a>. This is what is recommended most of the time:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> blinker </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Namespace</span></span>
<span class="line"><span style="color:#A6ACCD;">my_signals </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Namespace</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>Now you can create new signals like this:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">model_saved </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> my_signals</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">signal</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">model-saved</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>The name for the signal here makes it unique and also simplifies debugging. You can access the name of the signal with the <a href="https://blinker.readthedocs.io/en/stable/#blinker.base.NamedSignal.name" target="_blank" rel="noreferrer">name</a> attribute.</p><h2 id="sending-signals" tabindex="-1">Sending Signals <a class="header-anchor" href="#sending-signals" aria-label="Permalink to &quot;Sending Signals&quot;">​</a></h2><p>If you want to emit a signal, you can do so by calling the <a href="https://blinker.readthedocs.io/en/stable/#blinker.base.Signal.send" target="_blank" rel="noreferrer">send()</a> method. It accepts a sender as first argument and optionally some keyword arguments that are forwarded to the signal subscribers:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Model</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        model_saved</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Try to always pick a good sender. If you have a class that is emitting a signal, pass <code>self</code> as sender. If you are emitting a signal from a random function, you can pass <code>current_app._get_current_object()</code> as sender.</p><div class="tip custom-block"><p class="custom-block-title">Passing Proxies as Senders</p><p>Never pass <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.current_app" target="_blank" rel="noreferrer">current_app</a> as sender to a signal. Use <code>current_app._get_current_object()</code> instead. The reason for this is that <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.current_app" target="_blank" rel="noreferrer">current_app</a> is a proxy and not the real application object.</p></div><h2 id="signals-and-flask-s-request-context" tabindex="-1">Signals and Flask’s Request Context <a class="header-anchor" href="#signals-and-flask-s-request-context" aria-label="Permalink to &quot;Signals and Flask’s Request Context&quot;">​</a></h2><p>Signals fully support <a href="https://flask.palletsprojects.com/en/2.3.x/reqcontext/" target="_blank" rel="noreferrer">The Request Context</a> when receiving signals. Context-local variables are consistently available between <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.request_started" target="_blank" rel="noreferrer">request_started</a> and <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.request_finished" target="_blank" rel="noreferrer">request_finished</a>, so you can rely on <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.g" target="_blank" rel="noreferrer">flask.g</a> and others as needed. Note the limitations described in <a href="https://flask.palletsprojects.com/en/2.3.x/signals/#signals-sending" target="_blank" rel="noreferrer">Sending Signals</a> and the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.request_tearing_down" target="_blank" rel="noreferrer">request_tearing_down</a> signal.</p><h2 id="decorator-based-signal-subscriptions" tabindex="-1">Decorator Based Signal Subscriptions <a class="header-anchor" href="#decorator-based-signal-subscriptions" aria-label="Permalink to &quot;Decorator Based Signal Subscriptions&quot;">​</a></h2><p>You can also easily subscribe to signals by using the <code>connect_via()</code> decorator:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> flask </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> template_rendered</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">template_rendered</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect_via</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">when_template_rendered</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">sender</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">template</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;font-style:italic;">extra</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&#39;Template </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">template</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">name</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> is rendered with </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">context</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div>`,35),o=[t];function p(r,c,i,y,F,D){return a(),e("div",null,o)}const C=s(l,[["render",p]]);export{d as __pageData,C as default};
