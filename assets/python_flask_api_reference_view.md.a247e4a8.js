import{_ as s,o as e,c as a,Q as o}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"Class-Based Views","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/api_reference/view.md","filePath":"python/flask/api_reference/view.md","lastUpdated":1693404008000}'),l={name:"python/flask/api_reference/view.md"},n=o(`<h1 id="class-based-views" tabindex="-1">Class-Based Views <a class="header-anchor" href="#class-based-views" aria-label="Permalink to &quot;Class-Based Views {#class-based-views}&quot;">​</a></h1><details class="details custom-block"><summary>Changelog</summary><p><em>New in version 0.7.</em></p></details><h2 id="class-flask-views-view" tabindex="-1"><code>class</code> flask.views.View <a class="header-anchor" href="#class-flask-views-view" aria-label="Permalink to &quot;\`class\` flask.views.View&quot;">​</a></h2><p>Subclass this class and override <code>dispatch_request()</code> to create a generic class-based view. Call <code>as_view()</code> to create a view function that creates an instance of the class with the given arguments and calls its · method with any URL variables.</p><p>See Class-based Views for a detailed guide.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Hello</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">View</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    init_every_request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatch_request</span><span style="color:#E1E4E8;">(self, name):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Hello, </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;/hello/&lt;name&gt;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">Hello.as_view(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Hello</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">View</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    init_every_request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch_request</span><span style="color:#24292E;">(self, name):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Hello, </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;/hello/&lt;name&gt;&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">Hello.as_view(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>Set <code>methods</code> on the class to change what methods the view accepts.</p><p>Set <code>decorators</code> on the class to apply a list of decorators to the generated view function. Decorators applied to the class itself will not be applied to the generated view function!</p><p>Set <code>init_every_request</code> to <code>False</code> for efficiency, unless you need to store request-global data on <code>self</code>.</p><ul><li><h3 id="classmethod-as-view-name-class-args-class-kwargs" tabindex="-1"><code>classmethod</code> as_view(<code>name, *class_args, **class_kwargs</code>) <a class="header-anchor" href="#classmethod-as-view-name-class-args-class-kwargs" aria-label="Permalink to &quot;\`classmethod\` as_view(\`name, *class_args, **class_kwargs\`)&quot;">​</a></h3><p>Convert the class into a view function that can be registered for a route.</p><p>By default, the generated view will create a new instance of the view class for every request and call its <code>dispatch_request()</code> method. If the view class sets <code>init_every_request</code> to <code>False</code>, the same instance will be used for every request.</p><p>Except for <code>name</code>, all other arguments passed to this method are forwarded to the view class <code>__init__</code> method.</p><details class="details custom-block"><summary>Changelog</summary><p><em>Changed in version 2.2</em>: Added the <code>init_every_request</code> class attribute.</p></details><p><em>Parameters</em>:</p><ul><li><p><code>name (str)</code> –</p></li><li><p><code>class_args (t.Any)</code> –</p></li><li><p><code>class_kwargs (t.Any)</code> –</p></li></ul><p><em>Return type</em>: <code>ft.RouteCallable</code></p></li><li><h3 id="decorators-classvar-list-callable" tabindex="-1">decorators: <code>ClassVar[list[Callable]] = []</code> <a class="header-anchor" href="#decorators-classvar-list-callable" aria-label="Permalink to &quot;decorators: \`ClassVar[list[Callable]] = []\`&quot;">​</a></h3></li><li><p>A list of decorators to apply, in order, to the generated view function. Remember that <code>@decorator</code> syntax is applied bottom to top, so the first decorator in the list would be the bottom decorator.</p><details class="details custom-block"><summary>Changelog</summary><p><em>New in version 0.8.</em></p></details></li><li><h3 id="dispatch-request" tabindex="-1">dispatch_request() <a class="header-anchor" href="#dispatch-request" aria-label="Permalink to &quot;dispatch_request()&quot;">​</a></h3><p>The actual view function behavior. Subclasses must override this and return a valid response. Any variables from the URL rule are passed as keyword arguments.</p><p><em>Return type</em>: <code>ft.ResponseReturnValue</code></p></li><li><h3 id="init-every-request-classvar-bool-true" tabindex="-1">init_every_request: <code>ClassVar[bool] = True</code> <a class="header-anchor" href="#init-every-request-classvar-bool-true" aria-label="Permalink to &quot;init_every_request: \`ClassVar[bool] = True\`&quot;">​</a></h3><p>Create a new instance of this view class for every request by default. If a view subclass sets this to <code>False</code>, the same instance is used for every request.</p><p>A single instance is more efficient, especially if complex setup is done during init. However, storing data on <code>self</code> is no longer safe across requests, and <code>g</code> should be used instead.</p><details class="details custom-block"><summary>Changelog</summary><p><em>New in version 2.2.</em></p></details></li><li><h3 id="methods-classvar-collection-str-none-none" tabindex="-1">methods: <code>ClassVar[Collection[str] | None] = None</code> <a class="header-anchor" href="#methods-classvar-collection-str-none-none" aria-label="Permalink to &quot;methods: \`ClassVar[Collection[str] | None] = None\`&quot;">​</a></h3><p>The methods this view is registered for. Uses the same default (<code>[&quot;GET&quot;, &quot;HEAD&quot;, &quot;OPTIONS&quot;]</code>) as route and <code>add_url_rule</code> by default.</p></li><li><h3 id="provide-automatic-options-classvar-bool-none-none" tabindex="-1">provide_automatic_options: <code>ClassVar[bool | None] = None</code> <a class="header-anchor" href="#provide-automatic-options-classvar-bool-none-none" aria-label="Permalink to &quot;provide_automatic_options: \`ClassVar[bool | None] = None\`&quot;">​</a></h3><p>Control whether the <code>OPTIONS</code> method is handled automatically. Uses the same default (<code>True</code>) as <code>route</code> and <code>add_url_rule</code> by default.</p></li></ul><h2 id="class-flask-views-methodview" tabindex="-1"><code>class</code> flask.views.MethodView <a class="header-anchor" href="#class-flask-views-methodview" aria-label="Permalink to &quot;\`class\` flask.views.MethodView&quot;">​</a></h2><p>Dispatches request methods to the corresponding instance methods. For example, if you implement a <code>get</code> method, it will be used to handle <code>GET</code> requests.</p><p>This can be useful for defining a REST API.</p><p><code>methods</code> is automatically set based on the methods defined on the class.</p><p>See <a href="/python/flask/user_guide/view#class-based-views">Class-based Views</a> for a detailed guide.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CounterAPI</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">MethodView</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(session.get(</span><span style="color:#9ECBFF;">&quot;counter&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        session[</span><span style="color:#9ECBFF;">&quot;counter&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> session.get(</span><span style="color:#9ECBFF;">&quot;counter&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> redirect(url_for(</span><span style="color:#9ECBFF;">&quot;counter&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;/counter&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">CounterAPI.as_view(</span><span style="color:#9ECBFF;">&quot;counter&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CounterAPI</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">MethodView</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(session.get(</span><span style="color:#032F62;">&quot;counter&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        session[</span><span style="color:#032F62;">&quot;counter&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> session.get(</span><span style="color:#032F62;">&quot;counter&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> redirect(url_for(</span><span style="color:#032F62;">&quot;counter&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;/counter&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">CounterAPI.as_view(</span><span style="color:#032F62;">&quot;counter&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><ul><li><h3 id="dispatch-request-kwargs" tabindex="-1">dispatch_request(<code>**kwargs</code>) <a class="header-anchor" href="#dispatch-request-kwargs" aria-label="Permalink to &quot;dispatch_request(\`**kwargs\`)&quot;">​</a></h3></li></ul><p>The actual view function behavior. Subclasses must override this and return a valid response. Any variables from the URL rule are passed as keyword arguments.</p><p><em>Parameters</em>:</p><ul><li><code>kwargs (t.Any)</code> –</li></ul><p><em>Return type</em>: <code>ft.ResponseReturnValue</code></p>`,21),t=[n];function p(c,r,i,d,u,y){return e(),a("div",null,t)}const m=s(l,[["render",p]]);export{h as __pageData,m as default};
