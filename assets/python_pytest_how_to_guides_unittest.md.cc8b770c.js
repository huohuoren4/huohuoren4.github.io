import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.01af844e.js";const F=JSON.parse('{"title":"How to use unittest-based tests with pytest","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/unittest.md","filePath":"python/pytest/how_to_guides/unittest.md","lastUpdated":1692751654000}'),t={name:"python/pytest/how_to_guides/unittest.md"},o=e(`<h1 id="how-to-use-unittest-based-tests-with-pytest" tabindex="-1">How to use unittest-based tests with pytest <a class="header-anchor" href="#how-to-use-unittest-based-tests-with-pytest" aria-label="Permalink to &quot;How to use unittest-based tests with pytest {#how-to-use-unittest-based-tests-with-pytest}&quot;">​</a></h1><p><code>pytest</code> supports running Python <code>unittest</code>-based tests out of the box. It’s meant for leveraging existing <code>unittest</code>-based test suites to use pytest as a test runner and also allow to incrementally adapt the test suite to take full advantage of pytest’s features.</p><p>To run an existing <code>unittest</code>-style test suite using <code>pytest</code>, type:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span></span></code></pre></div><p>pytest will automatically collect <code>unittest.TestCase</code> subclasses and their <code>test</code> methods in <code>test_*.py</code> or <code>*_test.py</code> files.</p><p>Almost all <code>unittest</code> features are supported:</p><ul><li><p><code>@unittest.skip</code> style decorators;</p></li><li><p><code>setUp/tearDown</code>;</p></li><li><p><code>setUpClass/tearDownClass</code>;</p></li><li><p><code>setUpModule/tearDownModule</code>;</p></li></ul><p>Additionally, <a href="https://docs.python.org/3/library/unittest.html#subtests" target="_blank" rel="noreferrer">subtests</a> are supported by the <a href="https://github.com/pytest-dev/pytest-subtests" target="_blank" rel="noreferrer">pytest-subtests</a> plugin.</p><p>Up to this point pytest does not have support for the following features:</p><ul><li><a href="https://docs.python.org/3/library/unittest.html#load-tests-protocol" target="_blank" rel="noreferrer">load_tests protocol</a>;</li></ul><h2 id="benefits-out-of-the-box" tabindex="-1">Benefits out of the box <a class="header-anchor" href="#benefits-out-of-the-box" aria-label="Permalink to &quot;Benefits out of the box {#benefits-out-of-the-box}&quot;">​</a></h2><p>By running your test suite with pytest you can make use of several features, in most cases without having to modify existing code:</p><ul><li><p>Obtain <a href="/python/pytest/further_topics/example_trick/failure_report#demo-of-python-failure-reports-with-pytest">more informative tracebacks</a>;</p></li><li><p><a href="/python/pytest/how_to_guides/output#how-to-capture-stdout-stderr-output">stdout and stderr</a> capturing;</p></li><li><p><a href="/python/pytest/how_to_guides/invoke_pytest#specifying-which-tests-to-run">Test selection options</a> using <code>-k</code> and <code>-m</code> flags;</p></li><li><p>Stopping after the first (or N) failures;</p></li><li><p><code>–pdb</code> command-line option for debugging on test failures (see <a href="/python/pytest/how_to_guides/unittest#using-autouse-fixtures-and-accessing-other-fixtures">note</a> below);</p></li><li><p>Distribute tests to multiple CPUs using the <a href="https://pypi.org/project/pytest-xdist/" target="_blank" rel="noreferrer">pytest-xdist</a> plugin;</p></li><li><p>Use <a href="/python/pytest/how_to_guides/assert#how-to-write-and-report-assertions-in-tests">plain assert-statements</a> instead of <code>self.assert*</code> functions (<a href="https://pypi.org/project/unittest2pytest/" target="_blank" rel="noreferrer">unittest2pytest</a> is immensely helpful in this);</p></li></ul><h2 id="pytest-features-in-unittest-testcase-subclasses" tabindex="-1">pytest features in <code>unittest.TestCase</code> subclasses <a class="header-anchor" href="#pytest-features-in-unittest-testcase-subclasses" aria-label="Permalink to &quot;pytest features in \`unittest.TestCase\` subclasses {#pytest-features-in-unittest-testcase-subclasses}&quot;">​</a></h2><p>The following pytest features work in <code>unittest.TestCase</code> subclasses:</p><ul><li><p>Marks: <code>skip</code>, <code>skipif</code>, <code>xfail</code>;</p></li><li><p><a href="/python/pytest/how_to_guides/unittest#mixing-pytest-fixtures-into-unittest-testcase-subclasses-using-marks">Auto-use fixtures</a>;</p></li></ul><p>The following pytest features do not work, and probably never will due to different design philosophies:</p><ul><li><p><a href="/python/pytest/reference_guides/fixture_reference#fixtures-reference">Fixtures</a> (except for <code>autouse</code> fixtures, see <a href="/python/pytest/how_to_guides/unittest#mixing-pytest-fixtures-into-unittest-testcase-subclasses-using-marks">below</a>);</p></li><li><p><a href="/python/pytest/how_to_guides/params_fixture#how-to-parametrize-fixtures-and-test-functions">Parametrization</a>;</p></li><li><p><a href="/python/pytest/how_to_guides/write_plugin#writing-plugins">Custom hooks</a>;</p></li></ul><p>Third party plugins may or may not work well, depending on the plugin and the test suite.</p><h2 id="mixing-pytest-fixtures-into-unittest-testcase-subclasses-using-marks" tabindex="-1">Mixing pytest fixtures into unittest.TestCase subclasses using marks <a class="header-anchor" href="#mixing-pytest-fixtures-into-unittest-testcase-subclasses-using-marks" aria-label="Permalink to &quot;Mixing pytest fixtures into unittest.TestCase subclasses using marks {#mixing-pytest-fixtures-into-unittest-testcase-subclasses-using-marks}&quot;">​</a></h2><p>Running your unittest with <code>pytest</code> allows you to use its <a href="/python/pytest/reference_guides/fixture_reference#fixtures-reference">fixture mechanism</a> with <code>unittest.TestCase</code> style tests. Assuming you have at least skimmed the pytest fixture features, let’s jump-start into an example that integrates a pytest <code>db_class</code> fixture, setting up a class-cached database object, and then reference it from a unittest-style test:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># we define a fixture function below and it will be &quot;used&quot; by</span></span>
<span class="line"><span style="color:#6A737D;"># referencing its name from tests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">db_class</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DummyDB</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># set a class attribute on the invoking test context</span></span>
<span class="line"><span style="color:#E1E4E8;">    request.cls.db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DummyDB()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># we define a fixture function below and it will be &quot;used&quot; by</span></span>
<span class="line"><span style="color:#6A737D;"># referencing its name from tests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">db_class</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DummyDB</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># set a class attribute on the invoking test context</span></span>
<span class="line"><span style="color:#24292E;">    request.cls.db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DummyDB()</span></span></code></pre></div><p>This defines a fixture function <code>db_class</code> which - if used - is called once for each test class and which sets the class-level <code>db</code> attribute to a <code>DummyDB</code> instance. The fixture function achieves this by receiving a special <code>request</code> object which gives access to <a href="/python/pytest/how_to_guides/fixture#fixtures-can-introspect-the-requesting-test-context">the requesting test context</a> such as the <code>cls</code> attribute, denoting the class from which the fixture is used. This architecture de-couples fixture writing from actual test code and allows re-use of the fixture by a minimal reference, the fixture name. So let’s write an actual <code>unittest.TestCase</code> class using our fixture definition:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_unittest_db.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.usefixtures</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db_class&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyTest</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unittest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TestCase</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_method1</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hasattr</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;db&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.db  </span><span style="color:#6A737D;"># fail for demo purposes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_method2</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.db  </span><span style="color:#6A737D;"># fail for demo purposes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_unittest_db.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.usefixtures</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;db_class&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyTest</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unittest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TestCase</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_method1</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hasattr</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;db&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.db  </span><span style="color:#6A737D;"># fail for demo purposes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_method2</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.db  </span><span style="color:#6A737D;"># fail for demo purposes</span></span></code></pre></div><p>The <code>@pytest.mark.usefixtures(&quot;db_class&quot;)</code> class-decorator makes sure that the pytest fixture function <code>db_class</code> is called once per class. Due to the deliberately failing assert statements, we can take a look at the <code>self.db</code> values in the traceback:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_unittest_db.py</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_unittest_db.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FF</span><span style="color:#E1E4E8;">                                               [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">___________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MyTest.test_method1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">____________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">self</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">test_unittest_db.MyTest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">testMethod=test_method</span><span style="color:#F97583;">1&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_method1</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">self</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hasattr</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">self,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">       assert 0, self.db  </span><span style="color:#6A737D;"># fail for demo purposes</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">AssertionError:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">conftest.db_class.</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">local</span><span style="color:#E1E4E8;">s</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">.DummyDB</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xdeadbeef000</span><span style="color:#F97583;">1&gt;</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_unittest_db.py:11:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AssertionError</span></span>
<span class="line"><span style="color:#B392F0;">___________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MyTest.test_method2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">____________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">self</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">test_unittest_db.MyTest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">testMethod=test_method</span><span style="color:#F97583;">2&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_method2</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">self</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">       assert 0, self.db  </span><span style="color:#6A737D;"># fail for demo purposes</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">AssertionError:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">conftest.db_class.</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">local</span><span style="color:#E1E4E8;">s</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">.DummyDB</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xdeadbeef000</span><span style="color:#F97583;">1&gt;</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_unittest_db.py:14:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AssertionError</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_unittest_db.py::MyTest::test_method1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AssertionError:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">conft...</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_unittest_db.py::MyTest::test_method2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AssertionError:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">conft...</span></span>
<span class="line"><span style="color:#E1E4E8;">============================ </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_unittest_db.py</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_unittest_db.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FF</span><span style="color:#24292E;">                                               [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">___________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MyTest.test_method1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">____________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">self</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">test_unittest_db.MyTest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">testMethod=test_method</span><span style="color:#D73A49;">1&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_method1</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">self</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hasattr</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">self,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">       assert 0, self.db  </span><span style="color:#6A737D;"># fail for demo purposes</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">AssertionError:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">conftest.db_class.</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">local</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">.DummyDB</span><span style="color:#24292E;"> </span><span style="color:#032F62;">object</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xdeadbeef000</span><span style="color:#D73A49;">1&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_unittest_db.py:11:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AssertionError</span></span>
<span class="line"><span style="color:#6F42C1;">___________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MyTest.test_method2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">____________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">self</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">test_unittest_db.MyTest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">testMethod=test_method</span><span style="color:#D73A49;">2&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_method2</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">self</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">       assert 0, self.db  </span><span style="color:#6A737D;"># fail for demo purposes</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">AssertionError:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">conftest.db_class.</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">local</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">.DummyDB</span><span style="color:#24292E;"> </span><span style="color:#032F62;">object</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xdeadbeef000</span><span style="color:#D73A49;">1&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_unittest_db.py:14:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AssertionError</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_unittest_db.py::MyTest::test_method1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AssertionError:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">conft...</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_unittest_db.py::MyTest::test_method2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AssertionError:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">conft...</span></span>
<span class="line"><span style="color:#24292E;">============================ </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span></code></pre></div><p>This default pytest traceback shows that the two test methods share the same <code>self.db</code> instance which was our intention when writing the class-scoped fixture function above.</p><h2 id="using-autouse-fixtures-and-accessing-other-fixtures" tabindex="-1">Using autouse fixtures and accessing other fixtures <a class="header-anchor" href="#using-autouse-fixtures-and-accessing-other-fixtures" aria-label="Permalink to &quot;Using autouse fixtures and accessing other fixtures {#using-autouse-fixtures-and-accessing-other-fixtures}&quot;">​</a></h2><p>Although it’s usually better to explicitly declare use of fixtures you need for a given test, you may sometimes want to have fixtures that are automatically used in a given context. After all, the traditional style of unittest-setup mandates the use of this implicit fixture writing and chances are, you are used to it or like it.</p><p>You can flag fixture functions with <code>@pytest.fixture(autouse=True)</code> and define the fixture function in the context where you want it used. Let’s look at an <code>initdir</code> fixture which makes all test methods of a <code>TestCase</code> class execute in a temporary directory with a pre-initialized <code>samplefile.ini</code>. Our <code>initdir</code> fixture itself uses the pytest builtin <code>tmp_path</code> fixture to delegate the creation of a per-test temporary directory:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_unittest_cleandir.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyTest</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">unittest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">TestCase</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">autouse</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initdir</span><span style="color:#E1E4E8;">(self, tmp_path, monkeypatch):</span></span>
<span class="line"><span style="color:#E1E4E8;">        monkeypatch.chdir(tmp_path)  </span><span style="color:#6A737D;"># change to pytest-provided temporary directory</span></span>
<span class="line"><span style="color:#E1E4E8;">        tmp_path.joinpath(</span><span style="color:#9ECBFF;">&quot;samplefile.ini&quot;</span><span style="color:#E1E4E8;">).write_text(</span><span style="color:#9ECBFF;">&quot;# testdata&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">encoding</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_method</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;samplefile.ini&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">encoding</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> f:</span></span>
<span class="line"><span style="color:#E1E4E8;">            s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f.read()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;testdata&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_unittest_cleandir.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyTest</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">unittest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">TestCase</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">autouse</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initdir</span><span style="color:#24292E;">(self, tmp_path, monkeypatch):</span></span>
<span class="line"><span style="color:#24292E;">        monkeypatch.chdir(tmp_path)  </span><span style="color:#6A737D;"># change to pytest-provided temporary directory</span></span>
<span class="line"><span style="color:#24292E;">        tmp_path.joinpath(</span><span style="color:#032F62;">&quot;samplefile.ini&quot;</span><span style="color:#24292E;">).write_text(</span><span style="color:#032F62;">&quot;# testdata&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">encoding</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_method</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;samplefile.ini&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">encoding</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">            s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.read()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;testdata&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> s</span></span></code></pre></div><p>Due to the <code>autouse</code> flag the <code>initdir</code> fixture function will be used for all methods of the class where it is defined. This is a shortcut for using a <code>@pytest.mark.usefixtures(&quot;initdir&quot;)</code> marker on the class like in the previous example.</p><p>Running this test module …:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_unittest_cleandir.py</span></span>
<span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_unittest_cleandir.py</span></span>
<span class="line"><span style="color:#005CC5;">.</span><span style="color:#24292E;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><p>… gives us one passed test because the <code>initdir</code> fixture function was executed ahead of the <code>test_method</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p><code>unittest.TestCase</code> methods cannot directly receive fixture arguments as implementing that is likely to inflict on the ability to run general <code>unittest.TestCase</code> test suites.</p><p>The above <code>usefixtures</code> and <code>autouse</code> examples should help to mix in pytest fixtures into unittest suites.</p><p>You can also gradually move away from subclassing from <code>unittest.TestCase</code> to plain asserts and then start to benefit from the full pytest feature set step by step.</p></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Due to architectural differences between the two frameworks, setup and teardown for <code>unittest</code>-based tests is performed during the <code>call</code> phase of testing instead of in <code>pytest</code>’s standard <code>setup</code> and <code>teardown</code> stages. This can be important to understand in some situations, particularly when reasoning about errors. For example, if a <code>unittest</code>-based suite exhibits errors during setup, <code>pytest</code> will report no errors during its <code>setup</code> phase and will instead raise the error during <code>call</code>.</p></div>`,37),l=[o];function p(c,r,y,i,E,u){return n(),a("div",null,l)}const _=s(t,[["render",p]]);export{F as __pageData,_ as default};
