import{_ as e,o as s,c as a,Q as n}from"./chunks/framework.01af844e.js";const E=JSON.parse('{"title":"Mixed Version Proxy","description":"","frontmatter":{},"headers":[],"relativePath":"container/k8s/concept/cluster_arch/mix_version.md","filePath":"container/k8s/concept/cluster_arch/mix_version.md","lastUpdated":1694607182000}'),o={name:"container/k8s/concept/cluster_arch/mix_version.md"},r=n(`<h1 id="mixed-version-proxy" tabindex="-1">Mixed Version Proxy <a class="header-anchor" href="#mixed-version-proxy" aria-label="Permalink to &quot;Mixed Version Proxy&quot;">​</a></h1><p><em>FEATURE STATE</em>: <code>Kubernetes v1.28 [alpha]</code></p><p>Kubernetes 1.28 includes an alpha feature that lets an API Server proxy a resource requests to other peer API servers. This is useful when there are multiple API servers running different versions of Kubernetes in one cluster (for example, during a long-lived rollout to a new release of Kubernetes).</p><p>This enables cluster administrators to configure highly available clusters that can be upgraded more safely, by directing resource requests (made during the upgrade) to the correct kube-apiserver. That proxying prevents users from seeing unexpected 404 Not Found errors that stem from the upgrade process.</p><p>This mechanism is called the Mixed Version Proxy.</p><h2 id="enabling-the-mixed-version-proxy" tabindex="-1">Enabling the Mixed Version Proxy <a class="header-anchor" href="#enabling-the-mixed-version-proxy" aria-label="Permalink to &quot;Enabling the Mixed Version Proxy&quot;">​</a></h2><p>Ensure that UnknownVersionInteroperabilityProxy feature gate is enabled when you start the API Server:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kube-apiserver</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">--feature-gates=UnknownVersionInteroperabilityProxy=true </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#6A737D;"># required command line arguments for this feature</span></span>
<span class="line"><span style="color:#E1E4E8;">--peer-ca-file</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kube-apiserver</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CA</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cer</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">--proxy-client-cert-file</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aggregator</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cer</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">--proxy-client-key-file</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aggregator</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ke</span><span style="color:#E1E4E8;">y</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">--requestheader-client-ca-file</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">aggregator</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CA</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cer</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#6A737D;"># requestheader-allowed-names can be set to blank to allow any Common Name</span></span>
<span class="line"><span style="color:#E1E4E8;">--requestheader-allowed-names</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">valid</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Common</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Names</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">verify</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">proxy</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">agains</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># optional flags for this feature</span></span>
<span class="line"><span style="color:#E1E4E8;">--peer-advertise-ip</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">IP</span><span style="color:#9ECBFF;"> of this kube-apiserver that should be used by peers to proxy requests\`</span></span>
<span class="line"><span style="color:#E1E4E8;">--peer-advertise-port</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">port</span><span style="color:#9ECBFF;"> of this kube-apiserver that should be used by peers to proxy requests\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># …and other flags as usual</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kube-apiserver</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">--feature-gates=UnknownVersionInteroperabilityProxy=true </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#6A737D;"># required command line arguments for this feature</span></span>
<span class="line"><span style="color:#24292E;">--peer-ca-file</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kube-apiserver</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CA</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cer</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">--proxy-client-cert-file</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aggregator</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cer</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">--proxy-client-key-file</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aggregator</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ke</span><span style="color:#24292E;">y</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">--requestheader-client-ca-file</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">path</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">aggregator</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CA</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cer</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#6A737D;"># requestheader-allowed-names can be set to blank to allow any Common Name</span></span>
<span class="line"><span style="color:#24292E;">--requestheader-allowed-names</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">valid</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Common</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Names</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">verify</span><span style="color:#24292E;"> </span><span style="color:#032F62;">proxy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">client</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">agains</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># optional flags for this feature</span></span>
<span class="line"><span style="color:#24292E;">--peer-advertise-ip</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">IP</span><span style="color:#032F62;"> of this kube-apiserver that should be used by peers to proxy requests\`</span></span>
<span class="line"><span style="color:#24292E;">--peer-advertise-port</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">port</span><span style="color:#032F62;"> of this kube-apiserver that should be used by peers to proxy requests\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># …and other flags as usual</span></span></code></pre></div><h3 id="proxy-transport-and-authentication-between-api-servers" tabindex="-1">Proxy transport and authentication between API servers <a class="header-anchor" href="#proxy-transport-and-authentication-between-api-servers" aria-label="Permalink to &quot;Proxy transport and authentication between API servers&quot;">​</a></h3><ul><li><p>The source kube-apiserver reuses the <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/#kubernetes-apiserver-client-authentication" target="_blank" rel="noreferrer">existing APIserver client authentication flags</a> <code>--proxy-client-cert-file</code> and <code>--proxy-client-key-file</code> to present its identity that will be verified by its peer (the destination kube-apiserver). The destination API server verifies that peer connection based on the configuration you specify using the <code>--requestheader-client-ca-file</code> command line argument.</p></li><li><p>To authenticate the destination server&#39;s serving certs, you must configure a certificate authority bundle by specifying the <code>--peer-ca-file</code> command line argument to the source API server.</p></li></ul><h3 id="configuration-for-peer-api-server-connectivity" tabindex="-1">Configuration for peer API server connectivity <a class="header-anchor" href="#configuration-for-peer-api-server-connectivity" aria-label="Permalink to &quot;Configuration for peer API server connectivity&quot;">​</a></h3><p>To set the network location of a kube-apiserver that peers will use to proxy requests, use the <code>--peer-advertise-ip</code> and <code>--peer-advertise-port</code> command line arguments to kube-apiserver or specify these fields in the API server configuration file. If these flags are unspecified, peers will use the value from either <code>--advertise-address</code> or <code>--bind-address</code> command line argument to the kube-apiserver. If those too, are unset, the host&#39;s default interface is used.</p><h2 id="mixed-version-proxying" tabindex="-1">Mixed version proxying <a class="header-anchor" href="#mixed-version-proxying" aria-label="Permalink to &quot;Mixed version proxying&quot;">​</a></h2><p>When you enable mixed version proxying, the <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/apiserver-aggregation/" target="_blank" rel="noreferrer">aggregation layer</a> loads a special filter that does the following:</p><ul><li>When a resource request reaches an API server that cannot serve that API (either because it is at a version pre-dating the introduction of the API or the API is turned off on the API server) the API server attempts to send the request to a peer API server that can serve the requested API. It does so by identifying API groups / versions / resources that the local server doesn&#39;t recognise, and tries to proxy those requests to a peer API server that is capable of handling the request.</li><li>If the peer API server fails to respond, the source API server responds with 503 (&quot;Service Unavailable&quot;) error.</li></ul><h3 id="how-it-works-under-the-hood" tabindex="-1">How it works under the hood <a class="header-anchor" href="#how-it-works-under-the-hood" aria-label="Permalink to &quot;How it works under the hood&quot;">​</a></h3><p>When an API Server receives a resource request, it first checks which API servers can serve the requested resource. This check happens using the internal <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.28/#storageversioncondition-v1alpha1-internal-apiserver-k8s-io" target="_blank" rel="noreferrer">StorageVersion API</a>.</p><ul><li><p>If the resource is known to the API server that received the request (for example,<code> GET /api/v1/pods/some-pod</code>), the request is handled locally.</p></li><li><p>If there is no internal <code>StorageVersion</code> object found for the requested resource (for example, <code>GET /my-api/v1/my-resource</code>) and the configured APIService specifies proxying to an extension API server, that proxying happens following the usual <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/" target="_blank" rel="noreferrer">flow</a> for extension APIs.</p></li><li><p>If a valid internal <code>StorageVersion</code> object is found for the requested resource (for example, <code>GET /batch/v1/jobs</code>) and the API server trying to handle the request (the handling API server) has the <code>batch</code> API disabled, then the handling API server fetches the peer API servers that do serve the relevant API group / version / resource (<code>api/v1/batch</code> in this case) using the information in the fetched <code>StorageVersion</code> object. The handling API server then proxies the request to one of the matching peer kube-apiservers that are aware of the requested resource.</p><ul><li><p>If there is no peer known for that API group / version / resource, the handling API server passes the request to its own handler chain which should eventually return a 404 (&quot;Not Found&quot;) response.</p></li><li><p>If the handling API server has identified and selected a peer API server, but that peer fails to respond (for reasons such as network connectivity issues, or a data race between the request being received and a controller registering the peer&#39;s info into the control plane), then the handling API server responds with a 503 (&quot;Service Unavailable&quot;) error.</p></li></ul></li></ul>`,18),t=[r];function l(p,c,i,y,h,d){return s(),a("div",null,t)}const f=e(o,[["render",l]]);export{E as __pageData,f as default};
