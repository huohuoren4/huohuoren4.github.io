import{_ as s,o as a,c as n,X as l}from"./chunks/framework.6e839c56.js";const F=JSON.parse('{"title":"Get Started","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/get_started.md","filePath":"python/pytest/get_started.md","lastUpdated":1692629285000}'),p={name:"python/pytest/get_started.md"},o=l(`<h1 id="get-started" tabindex="-1">Get Started <a class="header-anchor" href="#get-started" aria-label="Permalink to &quot;Get Started {#get-started}&quot;">​</a></h1><h2 id="install-pytest" tabindex="-1">Install pytest <a class="header-anchor" href="#install-pytest" aria-label="Permalink to &quot;Install pytest {#install-pytest}&quot;">​</a></h2><p>pytest requires: <code>Python 3.7+</code> or <code>PyPy3</code>.</p><ol><li>Run the following command in your command line:</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-U</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span></span></code></pre></div><ol start="2"><li>Check that you installed the correct version:</li></ol><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--version</span></span>
<span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7.4</span><span style="color:#C3E88D;">.0</span></span></code></pre></div><h2 id="create-your-first-test" tabindex="-1">Create your first test <a class="header-anchor" href="#create-your-first-test" aria-label="Permalink to &quot;Create your first test {#create-your-first-test}&quot;">​</a></h2><p>Create a new file called <code>test_sample.py</code>, containing a function, and a test:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_sample.py</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_answer</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span></code></pre></div><p>The test</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span></span>
<span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-7.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/sweet/project</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_sample.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">F</span><span style="color:#A6ACCD;">                                                     [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">================================= </span><span style="color:#C3E88D;">FAILURES</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=================================</span></span>
<span class="line"><span style="color:#FFCB6B;">_______________________________</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_answer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">________________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_answer</span><span style="color:#89DDFF;">()</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">       assert func</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">3</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> == 5</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">        </span><span style="color:#C3E88D;">+</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">where</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">func</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">3</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_sample.py:6:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError</span></span>
<span class="line"><span style="color:#A6ACCD;">========================= </span><span style="color:#C3E88D;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==========================</span></span>
<span class="line"><span style="color:#FFCB6B;">FAILED</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_sample.py::test_answer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#A6ACCD;">============================ </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=============================</span></span></code></pre></div><p>The [<code>100%</code>] refers to the overall progress of running all test cases. After it finishes, pytest then shows a failure report because <code>func(3)</code> does not return <code>5</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>You can use the <code>assert</code> statement to verify test expectations. pytest&#39;s <a href="https://docs.python.org/3/reference/simple_stmts.html#assert" target="_blank" rel="noreferrer">Advanced assertion introspection</a> will intelligently report intermediate values of the assert expression so you can avoid the many names of <a href="https://docs.python.org/3/library/unittest.html#testcase-objects" target="_blank" rel="noreferrer">JUnit legacy methods</a>.</p></div><h2 id="run-multiple-tests" tabindex="-1">Run multiple tests <a class="header-anchor" href="#run-multiple-tests" aria-label="Permalink to &quot;Run multiple tests {#run-multiple-tests}&quot;">​</a></h2><p>pytest will run all files of the form <code>test_*.py</code> or <code>*_test.py</code> in the current directory and its subdirectories. More generally, it follows <a href="/python/pytest/explanation/integration_practice#conventions-for-python-test-discovery">standard test discovery rules</a>.</p><h2 id="assert-that-a-certain-exception-is-raised" tabindex="-1">Assert that a certain exception is raised <a class="header-anchor" href="#assert-that-a-certain-exception-is-raised" aria-label="Permalink to &quot;Assert that a certain exception is raised {#assert-that-a-certain-exception-is-raised}&quot;">​</a></h2><p>Use the <code>raises</code> helper to assert that some code raises an exception:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_sysexit.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">raise</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SystemExit</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_mytest</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">raises</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">SystemExit</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>Execute the test function with “quiet” reporting mode:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-q</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_sysexit.py</span></span>
<span class="line"><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">passed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The <code>-q/--quiet</code> flag keeps the output brief in this and following examples.</p></div><h2 id="group-multiple-tests-in-a-class" tabindex="-1">Group multiple tests in a class <a class="header-anchor" href="#group-multiple-tests-in-a-class" aria-label="Permalink to &quot;Group multiple tests in a class {#group-multiple-tests-in-a-class}&quot;">​</a></h2><p>Once you develop multiple tests, you may want to group them into a class. pytest makes it easy to create a class containing more than one test:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_class.py</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestClass</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_one</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">this</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">h</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_two</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hasattr</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">check</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>pytest discovers all tests following its <a href="/python/pytest/explanation/integration_practice#conventions-for-python-test-discovery">Conventions for Python test discovery</a>, so it finds both <code>test_</code> prefixed functions. There is no need to subclass anything, but make sure to prefix your class with <code>Test</code> otherwise the class will be skipped. We can simply run the module by passing its filename:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-q</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_class.py</span></span>
<span class="line"><span style="color:#FFCB6B;">.F</span><span style="color:#A6ACCD;">                                                                   [100%]</span></span>
<span class="line"><span style="color:#A6ACCD;">================================= </span><span style="color:#C3E88D;">FAILURES</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=================================</span></span>
<span class="line"><span style="color:#FFCB6B;">____________________________</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TestClass.test_two</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">____________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">self</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">test_class.TestClass</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xdeadbeef000</span><span style="color:#89DDFF;">1&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_two</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">self</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">       assert hasattr</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">check</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">AssertionError:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">False</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">        </span><span style="color:#C3E88D;">+</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">where</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">False</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hasattr</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">&#39;hello&#39;</span><span style="color:#FFCB6B;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">check</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_class.py:8:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError</span></span>
<span class="line"><span style="color:#A6ACCD;">========================= </span><span style="color:#C3E88D;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==========================</span></span>
<span class="line"><span style="color:#FFCB6B;">FAILED</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_class.py::TestClass::test_two</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">False</span></span>
<span class="line"><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">passed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span></span></code></pre></div><p>The first test passed and the second failed. You can easily see the intermediate values in the assertion to help you understand the reason for the failure.</p><p>Grouping tests in classes can be beneficial for the following reasons:</p><ul><li>Test organization</li><li>Sharing fixtures for tests only in that particular class</li><li>Applying marks at the class level and having them implicitly apply to all tests</li></ul><p>Something to be aware of when grouping tests inside classes is that each test has a unique instance of the class. Having each test share the same class instance would be very detrimental to test isolation and would promote poor test practices. This is outlined below:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_class_demo.py</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestClassDemoInstance</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_one</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_two</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span></code></pre></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-k</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TestClassDemoInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-q</span></span>
<span class="line"><span style="color:#FFCB6B;">.F</span><span style="color:#A6ACCD;">                                                                   [100%]</span></span>
<span class="line"><span style="color:#A6ACCD;">================================= </span><span style="color:#C3E88D;">FAILURES</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=================================</span></span>
<span class="line"><span style="color:#FFCB6B;">______________________</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TestClassDemoInstance.test_two</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">______________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">self</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">test_class_demo.TestClassDemoInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xdeadbeef000</span><span style="color:#89DDFF;">2&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_two</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">self</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">       assert self.value == 1</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">        </span><span style="color:#C3E88D;">+</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">where</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">test_class_demo.TestClassDemoInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xdeadbeef000</span><span style="color:#89DDFF;">2&gt;</span><span style="color:#C3E88D;">.value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_class_demo.py:9:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError</span></span>
<span class="line"><span style="color:#A6ACCD;">========================= </span><span style="color:#C3E88D;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==========================</span></span>
<span class="line"><span style="color:#FFCB6B;">FAILED</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_class_demo.py::TestClassDemoInstance::test_two</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">passed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span></span></code></pre></div><p>Note that attributes added at class level are class attributes, so they will be shared between tests.</p><h2 id="request-a-unique-temporary-directory-for-functional-tests" tabindex="-1">Request a unique temporary directory for functional tests <a class="header-anchor" href="#request-a-unique-temporary-directory-for-functional-tests" aria-label="Permalink to &quot;Request a unique temporary directory for functional tests {#request-a-unique-temporary-directory-for-functional-tests}&quot;">​</a></h2><p>pytest provides <a href="/python/pytest/other/builtin">Builtin fixtures/function arguments</a> to request arbitrary resources, like a unique temporary directory:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_tmp_path.py</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_needsfiles</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">tmp_path</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tmp_path</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span></code></pre></div><p>List the name <code>tmp_path</code> in the test function signature and <code>pytest</code> will lookup and call a fixture factory to create the resource before performing the test function call. Before the test runs, <code>pytest</code> creates a unique-per-test-invocation temporary directory:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-q</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_tmp_path.py</span></span>
<span class="line"><span style="color:#FFCB6B;">F</span><span style="color:#A6ACCD;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#A6ACCD;">================================= </span><span style="color:#C3E88D;">FAILURES</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=================================</span></span>
<span class="line"><span style="color:#FFCB6B;">_____________________________</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_needsfiles</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">tmp_path</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">PosixPath</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">&#39;PYTEST_TMPDIR/test_needsfiles0&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_needsfiles</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">tmp_path</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#A6ACCD;">(tmp_path)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">       assert 0</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_tmp_path.py:3:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError</span></span>
<span class="line"><span style="color:#FFCB6B;">---------------------------</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stdout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">call</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">---------------------------</span></span>
<span class="line"><span style="color:#FFCB6B;">PYTEST_TMPDIR/test_needsfiles0</span></span>
<span class="line"><span style="color:#A6ACCD;">========================= </span><span style="color:#C3E88D;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==========================</span></span>
<span class="line"><span style="color:#FFCB6B;">FAILED</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_tmp_path.py::test_needsfiles</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span></span></code></pre></div><p>More info on temporary directory handling is available at <a href="/python/pytest/how_to_guides/temp#how-to-use-temporary-directories-and-files-in-tests">Temporary directories and files</a>.</p><p>Find out what kind of builtin <a href="/python/pytest/reference_guides/fixture_reference#fixtures-reference">pytest fixtures</a> exist with the command:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--fixtures</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># shows builtin and custom fixtures</span></span></code></pre></div><p>Note that this command omits fixtures with leading <code>_</code> unless the <code>-v</code> option is added.</p><h2 id="continue-reading" tabindex="-1">Continue reading <a class="header-anchor" href="#continue-reading" aria-label="Permalink to &quot;Continue reading {#continue-reading}&quot;">​</a></h2><p>Check out additional pytest resources to help you customize tests for your unique workflow:</p><ul><li>“<a href="/python/pytest/how_to_guides/invoke_pytest#how-to-invoke-pytest">How to invoke pytest</a>” for command line invocation examples</li><li>“<a href="/python/pytest/how_to_guides/test_suite#how-to-use-pytest-with-an-existing-test-suite">How to use pytest with an existing test suite</a>” for working with pre-existing tests</li><li>“<a href="/python/pytest/how_to_guides/mark#how-to-mark-test-functions-with-attributes">How to mark test functions with attributes</a>” for information on the <code>pytest.mark</code> mechanism</li><li>“<a href="/python/pytest/reference_guides/fixture_reference#fixtures-reference">Fixtures reference</a>” for providing a functional baseline to your tests</li><li>“<a href="/python/pytest/how_to_guides/write_plugin#writing-plugins">Writing plugins</a>” for managing and writing plugins</li><li>“<a href="/python/pytest/explanation/integration_practice#good-integration-practices">Good Integration Practices</a>” for virtualenv and test layouts</li></ul>`,46),e=[o];function t(c,r,y,C,i,D){return a(),n("div",null,e)}const _=s(p,[["render",t]]);export{F as __pageData,_ as default};
