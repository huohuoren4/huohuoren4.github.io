import{_ as s,o as n,c as a,V as e}from"./chunks/framework.48c56699.js";const A=JSON.parse('{"title":"How to capture warnings","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/warning.md","filePath":"python/pytest/how_to_guides/warning.md"}'),l={name:"python/pytest/how_to_guides/warning.md"},o=e(`<h1 id="how-to-capture-warnings" tabindex="-1">How to capture warnings <a class="header-anchor" href="#how-to-capture-warnings" aria-label="Permalink to &quot;How to capture warnings&quot;">​</a></h1><p>Starting from version <code>3.1</code>, pytest now automatically catches warnings during test execution and displays them at the end of the session:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_show_warnings.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> warnings</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">api_v1</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">api v1, should use functions from v2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_one</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">api_v1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span></code></pre></div><p>Running pytest now produces this output:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_show_warnings.py</span></span>
<span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-7.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/sweet/project</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_show_warnings.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;">                                              [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">============================= </span><span style="color:#C3E88D;">warnings</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=============================</span></span>
<span class="line"><span style="color:#FFCB6B;">test_show_warnings.py::test_one</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">/home/sweet/project/test_show_warnings.py:5:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">UserWarning:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">api</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v1,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">should</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">use</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">functions</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v2</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">warnings.warn(UserWarning(</span><span style="color:#FFCB6B;">&quot;api v1, should use functions from v2&quot;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Docs:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://docs.pytest.org/en/stable/how-to/capture-warnings.html</span></span>
<span class="line"><span style="color:#A6ACCD;">======================= </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">passed,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">warning</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=======================</span></span></code></pre></div><h2 id="controlling-warnings" tabindex="-1">Controlling warnings <a class="header-anchor" href="#controlling-warnings" aria-label="Permalink to &quot;Controlling warnings&quot;">​</a></h2><p>Similar to Python’s <a href="https://docs.python.org/3/library/warnings.html#warning-filter" target="_blank" rel="noreferrer">warning filter</a> and <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-W" target="_blank" rel="noreferrer">-W option</a> flag, pytest provides its own -W flag to control which warnings are ignored, displayed, or turned into errors. See the <a href="https://docs.python.org/3/library/warnings.html#warning-filter" target="_blank" rel="noreferrer">warning filter</a> documentation for more advanced use-cases.</p><p>This code sample shows how to treat any <code>UserWarning</code> category class of warning as an error:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-q</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_show_warnings.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-W</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">error::UserWarning</span></span>
<span class="line"><span style="color:#FFCB6B;">F</span><span style="color:#A6ACCD;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#A6ACCD;">================================= </span><span style="color:#C3E88D;">FAILURES</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=================================</span></span>
<span class="line"><span style="color:#FFCB6B;">_________________________________</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_one</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">_________________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_one</span><span style="color:#89DDFF;">()</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">       assert </span><span style="color:#82AAFF;">api_v1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> == 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">test_show_warnings.py:10:</span></span>
<span class="line"><span style="color:#A6ACCD;">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    def api_v1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">:</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">       warnings.warn</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">UserWarning(</span><span style="color:#FFCB6B;">&quot;api v1, should use functions from v2&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">UserWarning:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">api</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v1,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">should</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">use</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">functions</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_show_warnings.py:5:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">UserWarning</span></span>
<span class="line"><span style="color:#A6ACCD;">========================= </span><span style="color:#C3E88D;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==========================</span></span>
<span class="line"><span style="color:#FFCB6B;">FAILED</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_show_warnings.py::test_one</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">UserWarning:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">api</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v1,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">should</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">use</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">...</span></span>
<span class="line"><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span></span></code></pre></div><p>The same option can be set in the <code>pytest.ini</code> or <code>pyproject.toml</code> file using the <code>filterwarnings</code> ini option. For example, the configuration below will ignore all user warnings and specific deprecation warnings matching a regex, but will transform all other warnings into errors.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">filterwarnings</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">    error</span></span>
<span class="line"><span style="color:#A6ACCD;">    ignore::UserWarning</span></span>
<span class="line"><span style="color:#A6ACCD;">    ignore:function ham\\(\\) is deprecated:DeprecationWarning</span></span></code></pre></div><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># pyproject.toml</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">tool</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">ini_options</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">filterwarnings </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ignore::UserWarning</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;"># note the use of single quote below to denote &quot;raw&quot; strings in TOML</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ignore:function ham\\(\\) is deprecated:DeprecationWarning</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span></code></pre></div><p>When a warning matches more than one option in the list, the action for the last matching option is performed.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The -W flag and the <code>filterwarnings</code> ini option use warning filters that are similar in structure, but each configuration option interprets its filter differently. For example, message in <code>filterwarnings</code> is a string containing a regular expression that the start of the warning message must match, case-insensitively, while message in <code>-W</code> is a literal string that the start of the warning message must contain (case-insensitively), ignoring any whitespace at the start or end of message. Consult the <a href="https://docs.python.org/3/library/warnings.html#warning-filter" target="_blank" rel="noreferrer">warning filter</a> documentation for more details.</p></div><h2 id="pytest-mark-filterwarnings" tabindex="-1">@pytest.mark.filterwarnings <a class="header-anchor" href="#pytest-mark-filterwarnings" aria-label="Permalink to &quot;@pytest.mark.filterwarnings&quot;">​</a></h2><p>You can use the <code>@pytest.mark.filterwarnings</code> to add warning filters to specific test items, allowing you to have finer control of which warnings should be captured at test, class or even module level:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> warnings</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">api_v1</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">api v1, should use functions from v2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filterwarnings</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ignore:api v1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_one</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">api_v1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span></code></pre></div><p>Filters applied using a mark take precedence over filters passed on the command line or configured by the <code>filterwarnings</code> ini option.</p><p>You may apply a filter to all tests of a class by using the <code>filterwarnings</code> mark as a class decorator or to all tests in a module by setting the <code>pytestmark</code> variable:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># turns all warnings into errors for this module</span></span>
<span class="line"><span style="color:#A6ACCD;">pytestmark </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filterwarnings</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p><em>Credits go to Florian Schulze for the reference implementation in the <a href="https://github.com/fschulze/pytest-warnings" target="_blank" rel="noreferrer">pytest-warnings</a> plugin.</em></p><h2 id="disabling-warnings-summary" tabindex="-1">Disabling warnings summary <a class="header-anchor" href="#disabling-warnings-summary" aria-label="Permalink to &quot;Disabling warnings summary&quot;">​</a></h2><p>Although not recommended, you can use the <code>--disable-warnings</code> command-line option to suppress the warning summary entirely from the test run output.</p><h2 id="disabling-warning-capture-entirely" tabindex="-1">Disabling warning capture entirely <a class="header-anchor" href="#disabling-warning-capture-entirely" aria-label="Permalink to &quot;Disabling warning capture entirely&quot;">​</a></h2><p>This plugin is enabled by default but can be disabled entirely in your <code>pytest.ini</code> file with:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">addopts</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> -p no:warnings</span></span></code></pre></div><p>Or passing <code>-p no:warnings</code> in the command-line. This might be useful if your test suites handles warnings using an external system.</p><h2 id="deprecationwarning-and-pendingdeprecationwarning" tabindex="-1">DeprecationWarning and PendingDeprecationWarning <a class="header-anchor" href="#deprecationwarning-and-pendingdeprecationwarning" aria-label="Permalink to &quot;DeprecationWarning and PendingDeprecationWarning&quot;">​</a></h2><p>By default pytest will display <code>DeprecationWarning</code> and <code>PendingDeprecationWarning</code> warnings from user code and third-party libraries, as recommended by <a href="https://peps.python.org/pep-0565/" target="_blank" rel="noreferrer">PEP 565</a>. This helps users keep their code modern and avoid breakages when deprecated warnings are effectively removed.</p><p>However, in the specific case where users capture any type of warnings in their test, either with <a href="/python/pytest/reference_guides/api_reference#pytest-warns">pytest.warns()</a>, <a href="/python/pytest/reference_guides/api_reference#pytest-deprecated-call">pytest.deprecated_call()</a> or using the <code>recwarn</code> fixture, no warning will be displayed at all.</p><p>Sometimes it is useful to hide some specific deprecation warnings that happen in code that you have no control over (such as third-party libraries), in which case you might use the warning filters options (ini or marks) to ignore those warnings.</p><p>For example:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">filterwarnings</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">    ignore:.*U.*mode is deprecated:DeprecationWarning</span></span></code></pre></div><p>This will ignore all warnings of type <code>DeprecationWarning</code> where the start of the message matches the regular expression <code>&quot;.*U.*mode is deprecated&quot;</code>.</p><p>See <a href="/python/pytest/reference_guides/api_reference#pytest-mark-filterwarnings">@pytest.mark.filterwarnings</a> and <a href="/python/pytest/how_to_guides/warning#controlling-warnings">Controlling warnings</a> for more examples.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>If warnings are configured at the interpreter level, using the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS" target="_blank" rel="noreferrer">PYTHONWARNINGS</a> environment variable or the <code>-W</code> command-line option, pytest will not configure any filters by default.</p><p>Also pytest doesn’t follow <a href="https://peps.python.org/pep-0506/" target="_blank" rel="noreferrer">PEP 506</a> suggestion of resetting all warning filters because it might break test suites that configure warning filters themselves by calling <a href="https://docs.python.org/3/library/warnings.html#warnings.simplefilter" target="_blank" rel="noreferrer">warnings.simplefilter()</a> (see <a href="https://github.com/pytest-dev/pytest/issues/2430" target="_blank" rel="noreferrer">issue #2430</a> for an example of that).</p></div><h2 id="ensuring-code-triggers-a-deprecation-warning" tabindex="-1">Ensuring code triggers a deprecation warning <a class="header-anchor" href="#ensuring-code-triggers-a-deprecation-warning" aria-label="Permalink to &quot;Ensuring code triggers a deprecation warning&quot;">​</a></h2><p>You can also use <a href="/python/pytest/reference_guides/api_reference#pytest-deprecated-call">pytest.deprecated_call()</a> for checking that a certain function call triggers a <code>DeprecationWarning</code> or <code>PendingDeprecationWarning</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_myfunction_deprecated</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deprecated_call</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">myfunction</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">17</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>This test will fail if <code>myfunction</code> does not issue a deprecation warning when called with a <code>17</code> argument.</p><h2 id="asserting-warnings-with-the-warns-function" tabindex="-1">Asserting warnings with the warns function <a class="header-anchor" href="#asserting-warnings-with-the-warns-function" aria-label="Permalink to &quot;Asserting warnings with the warns function&quot;">​</a></h2><p>You can check that code raises a particular warning using <a href="/python/pytest/reference_guides/api_reference#pytest-warns">pytest.warns()</a>, which works in a similar manner to <a href="/python/pytest/how_to_guides/assert#assertions-about-expected-exceptions">raises</a> (except that <a href="/python/pytest/how_to_guides/assert#assertions-about-expected-exceptions">raises</a> does not capture all exceptions, only the <code>expected_exception</code>):</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> warnings</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_warning</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my warning</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>The test will fail if the warning in question is not raised. Use the keyword argument <code>match</code> to assert that the warning matches a text or regex. To match a literal string that may contain regular expression metacharacters like <code>(</code> or <code>.</code>, the pattern can first be escaped with <code>re.escape</code>.</p><p>Some examples:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">UserWarning,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">match=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">must be 0 or None</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">warnings.warn(</span><span style="color:#FFCB6B;">&quot;value must be 0 or None&quot;</span><span style="color:#FFCB6B;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">UserWarning</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">UserWarning,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">match=r</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">must be \\d+$</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">warnings.warn(</span><span style="color:#FFCB6B;">&quot;value must be 42&quot;</span><span style="color:#FFCB6B;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">UserWarning</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">UserWarning,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">match=r</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">must be \\d+$</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">warnings.warn(</span><span style="color:#FFCB6B;">&quot;this is not here&quot;</span><span style="color:#FFCB6B;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">UserWarning</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Traceback</span><span style="color:#A6ACCD;"> (most </span><span style="color:#C3E88D;">recent</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">call</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">last</span><span style="color:#A6ACCD;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">...</span></span>
<span class="line"><span style="color:#FFCB6B;">Failed:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">DID</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">NOT</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">WARN.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">No</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">warnings</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">...UserWarning...</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">were</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">emitted...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">UserWarning,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">match=re.escape</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">&quot;issue with foo() func&quot;</span><span style="color:#89DDFF;">))</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">warnings.warn(</span><span style="color:#FFCB6B;">&quot;issue with foo() func&quot;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>You can also call <a href="/python/pytest/reference_guides/api_reference#pytest-warns">pytest.warns()</a> on a function or code string:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">expected_warning</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> func</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">args</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">**</span><span style="color:#82AAFF;">kwargs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">expected_warning</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">func(*args, **kwargs)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>The function also returns a list of all raised warnings (as <code>warnings.WarningMessage</code> objects), which you can query for additional information:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">RuntimeWarning</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> record</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">another warning</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">RuntimeWarning</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># check that only one warning was raised</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># check that the message matches</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> record</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">another warning</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>Alternatively, you can examine raised warnings in detail using the <code>recwarn</code> fixture (see below).</p><p>The <code>recwarn</code> fixture automatically ensures to reset the warnings filter at the end of the test, so no global state is leaked.</p><h2 id="recording-warnings" tabindex="-1">Recording warnings <a class="header-anchor" href="#recording-warnings" aria-label="Permalink to &quot;Recording warnings&quot;">​</a></h2><p>You can record raised warnings either using <code>pytest.warns()</code> or with the <code>recwarn</code> fixture.</p><p>To record with <code>pytest.warns()</code> without asserting anything about the warnings, pass no arguments as the expected warning type and it will default to a generic Warning:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> record</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">runtime</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">RuntimeWarning</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">].</span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">record</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">].</span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">runtime</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>The <code>recwarn</code> fixture will record warnings for the whole function:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> warnings</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_hello</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">recwarn</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">recwarn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    w </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> recwarn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">issubclass</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">w</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">category</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">w</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> w</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">filename</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> w</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">lineno</span></span></code></pre></div><p>Both <code>recwarn</code> and <code>pytest.warns()</code> return the same interface for recorded warnings: a <code>WarningsRecorder</code> instance. To view the recorded warnings, you can iterate over this instance, call <code>len</code> on it to get the number of recorded warnings, or index into it to get a particular recorded warning.</p><p>Full API: <a href="/python/pytest/reference_guides/api_reference#recwarn">WarningsRecorder</a>.</p><h2 id="additional-use-cases-of-warnings-in-tests" tabindex="-1">Additional use cases of warnings in tests <a class="header-anchor" href="#additional-use-cases-of-warnings-in-tests" aria-label="Permalink to &quot;Additional use cases of warnings in tests&quot;">​</a></h2><p>Here are some use cases involving warnings that often come up in tests, and suggestions on how to deal with them:</p><ul><li>To ensure that at least one of the indicated warnings is issued, use:</li></ul><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_warning</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">((</span><span style="color:#FFCB6B;">RuntimeWarning</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">)):</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span></code></pre></div><p>To ensure that only certain warnings are issued, use:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_warning</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">recwarn</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">recwarn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    user_warning </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> recwarn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">issubclass</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">user_warning</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">category</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#FFCB6B;">UserWarning</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>To ensure that no warnings are emitted, use:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_warning</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch_warnings</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">        warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">simplefilter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span></code></pre></div><p>To suppress warnings, use:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch_warnings</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">simplefilter</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ignore</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><h2 id="custom-failure-messages" tabindex="-1">Custom failure messages <a class="header-anchor" href="#custom-failure-messages" aria-label="Permalink to &quot;Custom failure messages&quot;">​</a></h2><p>Recording warnings provides an opportunity to produce custom test failure messages for when no warnings are issued or other conditions are met.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Warning</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> record</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> record</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fail</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Expected a warning!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>If no warnings are issued when calling f, then <code>not record</code> will evaluate to <code>True</code>. You can then call <a href="/python/pytest/reference_guides/api_reference#pytest-fail">pytest.fail()</a> with a custom error message.</p><h2 id="internal-pytest-warnings" tabindex="-1">Internal pytest warnings <a class="header-anchor" href="#internal-pytest-warnings" aria-label="Permalink to &quot;Internal pytest warnings&quot;">​</a></h2><p>pytest may generate its own warnings in some situations, such as improper usage or deprecated features.</p><p>For example, pytest will emit a warning if it encounters a class that matches <code>python_classes</code> but also defines an <code>__init__</code> constructor, as this prevents the class from being instantiated:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_pytest_warnings.py</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Test</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span></code></pre></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_pytest_warnings.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-q</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">============================= </span><span style="color:#C3E88D;">warnings</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=============================</span></span>
<span class="line"><span style="color:#FFCB6B;">test_pytest_warnings.py:1</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">/home/sweet/project/test_pytest_warnings.py:1:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">PytestCollectionWarning:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cannot</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">collect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">because</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">has</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">__init__</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">constructor</span><span style="color:#A6ACCD;"> (from: </span><span style="color:#C3E88D;">test_pytest_warnings.py</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Test:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Docs:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://docs.pytest.org/en/stable/how-to/capture-warnings.html</span></span>
<span class="line"><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">warning</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span></span></code></pre></div><p>These warnings might be filtered using the same builtin mechanisms used to filter other types of warnings.</p><p>Please read our <a href="https://docs.pytest.org/en/latest/backwards-compatibility.html#backwards-compatibility" target="_blank" rel="noreferrer">Backwards Compatibility Policy</a> to learn how we proceed about deprecating and eventually removing features.</p><p>The full list of warnings is listed in <a href="/python/pytest/reference_guides/api_reference#warnings">the reference documentation</a>.</p><h2 id="resource-warnings" tabindex="-1">Resource Warnings <a class="header-anchor" href="#resource-warnings" aria-label="Permalink to &quot;Resource Warnings&quot;">​</a></h2><p>Additional information of the source of a <a href="https://docs.python.org/3/library/exceptions.html#ResourceWarning" target="_blank" rel="noreferrer">ResourceWarning</a> can be obtained when captured by pytest if <a href="https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc" target="_blank" rel="noreferrer">tracemalloc</a> module is enabled.</p><p>One convenient way to enable <a href="https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc" target="_blank" rel="noreferrer">tracemalloc</a> when running tests is to set the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONTRACEMALLOC" target="_blank" rel="noreferrer">PYTHONTRACEMALLOC</a> to a large enough number of frames (say <code>20</code>, but that number is application dependent).</p><p>For more information, consult the <a href="https://docs.python.org/3/library/devmode.html" target="_blank" rel="noreferrer">Python Development Mode</a> section in the Python documentation.</p>`,86),p=[o];function t(r,c,i,y,D,C){return n(),a("div",null,p)}const d=s(l,[["render",t]]);export{A as __pageData,d as default};
