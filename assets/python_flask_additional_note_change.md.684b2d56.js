import{_ as e,o as t,c as a,V as o}from"./chunks/framework.48c56699.js";const f=JSON.parse('{"title":"Changes","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/additional_note/change.md","filePath":"python/flask/additional_note/change.md"}'),s={name:"python/flask/additional_note/change.md"},n=o('<h1 id="changes" tabindex="-1">Changes <a class="header-anchor" href="#changes" aria-label="Permalink to &quot;Changes&quot;">​</a></h1><h2 id="version-2-3-3" tabindex="-1">Version 2.3.3 <a class="header-anchor" href="#version-2-3-3" aria-label="Permalink to &quot;Version 2.3.3&quot;">​</a></h2><p>Unreleased</p><ul><li><p><code>Python 3.12</code> compatibility.</p></li><li><p>Require <code>Werkzeug &gt;= 2.3.6</code>.</p></li><li><p>Use <code>flit_core</code> instead of <code>setuptools</code> as build backend.</p></li><li><p>Refactor how an app’s root and instance paths are determined. <a href="https://github.com/pallets/flask/issues/5160" target="_blank" rel="noreferrer">#5160</a></p></li></ul><h2 id="version-2-3-2" tabindex="-1">Version 2.3.2 <a class="header-anchor" href="#version-2-3-2" aria-label="Permalink to &quot;Version 2.3.2&quot;">​</a></h2><p>Released 2023-05-01</p><ul><li><p>Set <code>Vary: Cookie</code> header when the session is accessed, modified, or refreshed.</p></li><li><p>Update Werkzeug requirement to <code>&gt;=2.3.3</code> to apply recent bug fixes.</p></li></ul><h2 id="version-2-3-1" tabindex="-1">Version 2.3.1 <a class="header-anchor" href="#version-2-3-1" aria-label="Permalink to &quot;Version 2.3.1&quot;">​</a></h2><p>Released 2023-04-25</p><ul><li>Restore deprecated <code>from flask import Markup</code>. <a href="https://github.com/pallets/flask/issues/5084" target="_blank" rel="noreferrer">#5084</a></li></ul><h2 id="version-2-3-0" tabindex="-1">Version 2.3.0 <a class="header-anchor" href="#version-2-3-0" aria-label="Permalink to &quot;Version 2.3.0&quot;">​</a></h2><p>Released 2023-04-25</p><p>Drop support for <code>Python 3.7</code>. #5072</p><p>Update minimum requirements to the latest versions: Werkzeug&gt;=2.3.0, Jinja2&gt;3.1.2, itsdangerous&gt;=2.1.2, click&gt;=8.1.3.</p><p>Remove previously deprecated code. #4995</p><p>The push and pop methods of the deprecated _app_ctx_stack and _request_ctx_stack objects are removed. top still exists to give extensions more time to update, but it will be removed.</p><p>The FLASK_ENV environment variable, ENV config key, and app.env property are removed.</p><p>The session_cookie_name, send_file_max_age_default, use_x_sendfile, propagate_exceptions, and templates_auto_reload properties on app are removed.</p><p>The JSON_AS_ASCII, JSON_SORT_KEYS, JSONIFY_MIMETYPE, and JSONIFY_PRETTYPRINT_REGULAR config keys are removed.</p><p>The app.before_first_request and bp.before_app_first_request decorators are removed.</p><p>json_encoder and json_decoder attributes on app and blueprint, and the corresponding json.JSONEncoder and JSONDecoder classes, are removed.</p><p>The json.htmlsafe_dumps and htmlsafe_dump functions are removed.</p><p>Calling setup methods on blueprints after registration is an error instead of a warning. #4997</p><p>Importing escape and Markup from flask is deprecated. Import them directly from markupsafe instead. #4996</p><p>The app.got_first_request property is deprecated. #4997</p><p>The locked_cached_property decorator is deprecated. Use a lock inside the decorated function if locking is needed. #4993</p><p>Signals are always available. blinker&gt;=1.6.2 is a required dependency. The signals_available attribute is deprecated. #5056</p><p>Signals support async subscriber functions. #5049</p><p>Remove uses of locks that could cause requests to block each other very briefly. #4993</p><p>Use modern packaging metadata with pyproject.toml instead of setup.cfg. #4947</p><p>Ensure subdomains are applied with nested blueprints. #4834</p><p>config.from_file can use text=False to indicate that the parser wants a binary file instead. #4989</p><p>If a blueprint is created with an empty name it raises a ValueError. #5010</p><p>SESSION_COOKIE_DOMAIN does not fall back to SERVER_NAME. The default is not to set the domain, which modern browsers interpret as an exact match rather than a subdomain match. Warnings about localhost and IP addresses are also removed. #5051</p><p>The routes command shows each rule’s subdomain or host when domain matching is in use. #5004</p><p>Use postponed evaluation of annotations. #5071</p><h2 id="version-2-2-5" tabindex="-1">Version 2.2.5 <a class="header-anchor" href="#version-2-2-5" aria-label="Permalink to &quot;Version 2.2.5&quot;">​</a></h2><p>Released 2023-05-02</p><p>Update for compatibility with Werkzeug 2.3.3.</p><p>Set Vary: Cookie header when the session is accessed, modified, or refreshed.</p><h2 id="version-2-2-4" tabindex="-1">Version 2.2.4 <a class="header-anchor" href="#version-2-2-4" aria-label="Permalink to &quot;Version 2.2.4&quot;">​</a></h2><p>Released 2023-04-25</p><p>Update for compatibility with Werkzeug 2.3.</p><h2 id="version-2-2-3" tabindex="-1">Version 2.2.3 <a class="header-anchor" href="#version-2-2-3" aria-label="Permalink to &quot;Version 2.2.3&quot;">​</a></h2><p>Released 2023-02-15</p><p>Autoescape is enabled by default for .svg template files. #4831</p><p>Fix the type of template_folder to accept pathlib.Path. #4892</p><p>Add --debug option to the flask run command. #4777</p><h2 id="version-2-2-2" tabindex="-1">Version 2.2.2 <a class="header-anchor" href="#version-2-2-2" aria-label="Permalink to &quot;Version 2.2.2&quot;">​</a></h2><p>Released 2022-08-08</p><p>Update Werkzeug dependency to &gt;= 2.2.2. This includes fixes related to the new faster router, header parsing, and the development server. #4754</p><p>Fix the default value for app.env to be &quot;production&quot;. This attribute remains deprecated. #4740</p><h2 id="version-2-2-1" tabindex="-1">Version 2.2.1 <a class="header-anchor" href="#version-2-2-1" aria-label="Permalink to &quot;Version 2.2.1&quot;">​</a></h2><p>Released 2022-08-03</p><p>Setting or accessing json_encoder or json_decoder raises a deprecation warning. #4732</p><h2 id="version-2-2-0" tabindex="-1">Version 2.2.0 <a class="header-anchor" href="#version-2-2-0" aria-label="Permalink to &quot;Version 2.2.0&quot;">​</a></h2><p>Released 2022-08-01</p><p>Remove previously deprecated code. #4667</p><p>Old names for some send_file parameters have been removed. download_name replaces attachment_filename, max_age replaces cache_timeout, and etag replaces add_etags. Additionally, path replaces filename in send_from_directory.</p><p>The RequestContext.g property returning AppContext.g is removed.</p><p>Update Werkzeug dependency to &gt;= 2.2.</p><p>The app and request contexts are managed using Python context vars directly rather than Werkzeug’s LocalStack. This should result in better performance and memory use. #4682</p><p>Extension maintainers, be aware that _app_ctx_stack.top and _request_ctx_stack.top are deprecated. Store data on g instead using a unique prefix, like g._extension_name_attr.</p><p>The FLASK_ENV environment variable and app.env attribute are deprecated, removing the distinction between development and debug mode. Debug mode should be controlled directly using the --debug option or app.run(debug=True). #4714</p><p>Some attributes that proxied config keys on app are deprecated: session_cookie_name, send_file_max_age_default, use_x_sendfile, propagate_exceptions, and templates_auto_reload. Use the relevant config keys instead. #4716</p><p>Add new customization points to the Flask app object for many previously global behaviors.</p><p>flask.url_for will call app.url_for. #4568</p><p>flask.abort will call app.aborter. Flask.aborter_class and Flask.make_aborter can be used to customize this aborter. #4567</p><p>flask.redirect will call app.redirect. #4569</p><p>flask.json is an instance of JSONProvider. A different provider can be set to use a different JSON library. flask.jsonify will call app.json.response, other functions in flask.json will call corresponding functions in app.json. #4692</p><p>JSON configuration is moved to attributes on the default app.json provider. JSON_AS_ASCII, JSON_SORT_KEYS, JSONIFY_MIMETYPE, and JSONIFY_PRETTYPRINT_REGULAR are deprecated. #4692</p><p>Setting custom json_encoder and json_decoder classes on the app or a blueprint, and the corresponding json.JSONEncoder and JSONDecoder classes, are deprecated. JSON behavior can now be overridden using the app.json provider interface. #4692</p><p>json.htmlsafe_dumps and json.htmlsafe_dump are deprecated, the function is built-in to Jinja now. #4692</p><p>Refactor register_error_handler to consolidate error checking. Rewrite some error messages to be more consistent. #4559</p><p>Use Blueprint decorators and functions intended for setup after registering the blueprint will show a warning. In the next version, this will become an error just like the application setup methods. #4571</p><p>before_first_request is deprecated. Run setup code when creating the application instead. #4605</p><p>Added the View.init_every_request class attribute. If a view subclass sets this to False, the view will not create a new instance on every request. #2520.</p><p>A flask.cli.FlaskGroup Click group can be nested as a sub-command in a custom CLI. #3263</p><p>Add --app and --debug options to the flask CLI, instead of requiring that they are set through environment variables. #2836</p><p>Add --env-file option to the flask CLI. This allows specifying a dotenv file to load in addition to .env and .flaskenv. #3108</p><p>It is no longer required to decorate custom CLI commands on app.cli or blueprint.cli with @with_appcontext, an app context will already be active at that point. #2410</p><p>SessionInterface.get_expiration_time uses a timezone-aware value. #4645</p><p>View functions can return generators directly instead of wrapping them in a Response. #4629</p><p>Add stream_template and stream_template_string functions to render a template as a stream of pieces. #4629</p><p>A new implementation of context preservation during debugging and testing. #4666</p><p>request, g, and other context-locals point to the correct data when running code in the interactive debugger console. #2836</p><p>Teardown functions are always run at the end of the request, even if the context is preserved. They are also run after the preserved context is popped.</p><p>stream_with_context preserves context separately from a with client block. It will be cleaned up when response.get_data() or response.close() is called.</p><p>Allow returning a list from a view function, to convert it to a JSON response like a dict is. #4672</p><p>When type checking, allow TypedDict to be returned from view functions. #4695</p><p>Remove the --eager-loading/--lazy-loading options from the flask run command. The app is always eager loaded the first time, then lazily loaded in the reloader. The reloader always prints errors immediately but continues serving. Remove the internal DispatchingApp middleware used by the previous implementation. #4715</p><h2 id="version-2-1-3" tabindex="-1">Version 2.1.3 <a class="header-anchor" href="#version-2-1-3" aria-label="Permalink to &quot;Version 2.1.3&quot;">​</a></h2><p>Released 2022-07-13</p><p>Inline some optional imports that are only used for certain CLI commands. #4606</p><p>Relax type annotation for after_request functions. #4600</p><p>instance_path for namespace packages uses the path closest to the imported submodule. #4610</p><p>Clearer error message when render_template and render_template_string are used outside an application context. #4693</p><h2 id="version-2-1-2" tabindex="-1">Version 2.1.2 <a class="header-anchor" href="#version-2-1-2" aria-label="Permalink to &quot;Version 2.1.2&quot;">​</a></h2><p>Released 2022-04-28</p><p>Fix type annotation for json.loads, it accepts str or bytes. #4519</p><p>The --cert and --key options on flask run can be given in either order. #4459</p><h2 id="version-2-1-1" tabindex="-1">Version 2.1.1 <a class="header-anchor" href="#version-2-1-1" aria-label="Permalink to &quot;Version 2.1.1&quot;">​</a></h2><p>Released on 2022-03-30</p><p>Set the minimum required version of importlib_metadata to 3.6.0, which is required on Python &lt; 3.10. #4502</p><h2 id="version-2-1-0" tabindex="-1">Version 2.1.0 <a class="header-anchor" href="#version-2-1-0" aria-label="Permalink to &quot;Version 2.1.0&quot;">​</a></h2><p>Released 2022-03-28</p><p>Drop support for Python 3.6. #4335</p><p>Update Click dependency to &gt;= 8.0. #4008</p><p>Remove previously deprecated code. #4337</p><p>The CLI does not pass script_info to app factory functions.</p><p>config.from_json is replaced by config.from_file(name, load=json.load).</p><p>json functions no longer take an encoding parameter.</p><p>safe_join is removed, use werkzeug.utils.safe_join instead.</p><p>total_seconds is removed, use timedelta.total_seconds instead.</p><p>The same blueprint cannot be registered with the same name. Use name= when registering to specify a unique name.</p><p>The test client’s as_tuple parameter is removed. Use response.request.environ instead. #4417</p><p>Some parameters in send_file and send_from_directory were renamed in 2.0. The deprecation period for the old names is extended to 2.2. Be sure to test with deprecation warnings visible.</p><p>attachment_filename is renamed to download_name.</p><p>cache_timeout is renamed to max_age.</p><p>add_etags is renamed to etag.</p><p>filename is renamed to path.</p><p>The RequestContext.g property is deprecated. Use g directly or AppContext.g instead. #3898</p><p>copy_current_request_context can decorate async functions. #4303</p><p>The CLI uses importlib.metadata instead of pkg_resources to load command entry points. #4419</p><p>Overriding FlaskClient.open will not cause an error on redirect. #3396</p><p>Add an --exclude-patterns option to the flask run CLI command to specify patterns that will be ignored by the reloader. #4188</p><p>When using lazy loading (the default with the debugger), the Click context from the flask run command remains available in the loader thread. #4460</p><p>Deleting the session cookie uses the httponly flag. #4485</p><p>Relax typing for errorhandler to allow the user to use more precise types and decorate the same function multiple times. #4095, #4295, #4297</p><p>Fix typing for <strong>exit</strong> methods for better compatibility with ExitStack. #4474</p><p>From Werkzeug, for redirect responses the Location header URL will remain relative, and exclude the scheme and domain, by default. #4496</p><p>Add Config.from_prefixed_env() to load config values from environment variables that start with FLASK_ or another prefix. This parses values as JSON by default, and allows setting keys in nested dicts. #4479</p><h2 id="version-2-0-3" tabindex="-1">Version 2.0.3 <a class="header-anchor" href="#version-2-0-3" aria-label="Permalink to &quot;Version 2.0.3&quot;">​</a></h2><p>Released 2022-02-14</p><p>The test client’s as_tuple parameter is deprecated and will be removed in Werkzeug 2.1. It is now also deprecated in Flask, to be removed in Flask 2.1, while remaining compatible with both in 2.0.x. Use response.request.environ instead. #4341</p><p>Fix type annotation for errorhandler decorator. #4295</p><p>Revert a change to the CLI that caused it to hide ImportError tracebacks when importing the application. #4307</p><p>app.json_encoder and json_decoder are only passed to dumps and loads if they have custom behavior. This improves performance, mainly on PyPy. #4349</p><p>Clearer error message when after_this_request is used outside a request context. #4333</p><h2 id="version-2-0-2" tabindex="-1">Version 2.0.2 <a class="header-anchor" href="#version-2-0-2" aria-label="Permalink to &quot;Version 2.0.2&quot;">​</a></h2><p>Released 2021-10-04</p><p>Fix type annotation for teardown_* methods. #4093</p><p>Fix type annotation for before_request and before_app_request decorators. #4104</p><p>Fixed the issue where typing requires template global decorators to accept functions with no arguments. #4098</p><p>Support View and MethodView instances with async handlers. #4112</p><p>Enhance typing of app.errorhandler decorator. #4095</p><p>Fix registering a blueprint twice with differing names. #4124</p><p>Fix the type of static_folder to accept pathlib.Path. #4150</p><p>jsonify handles decimal.Decimal by encoding to str. #4157</p><p>Correctly handle raising deferred errors in CLI lazy loading. #4096</p><p>The CLI loader handles **kwargs in a create_app function. #4170</p><p>Fix the order of before_request and other callbacks that trigger before the view returns. They are called from the app down to the closest nested blueprint. #4229</p><h2 id="version-2-0-1" tabindex="-1">Version 2.0.1 <a class="header-anchor" href="#version-2-0-1" aria-label="Permalink to &quot;Version 2.0.1&quot;">​</a></h2><p>Released 2021-05-21</p><p>Re-add the filename parameter in send_from_directory. The filename parameter has been renamed to path, the old name is deprecated. #4019</p><p>Mark top-level names as exported so type checking understands imports in user projects. #4024</p><p>Fix type annotation for g and inform mypy that it is a namespace object that has arbitrary attributes. #4020</p><p>Fix some types that weren’t available in Python 3.6.0. #4040</p><p>Improve typing for send_file, send_from_directory, and get_send_file_max_age. #4044, #4026</p><p>Show an error when a blueprint name contains a dot. The . has special meaning, it is used to separate (nested) blueprint names and the endpoint name. #4041</p><p>Combine URL prefixes when nesting blueprints that were created with a url_prefix value. #4037</p><p>Revert a change to the order that URL matching was done. The URL is again matched after the session is loaded, so the session is available in custom URL converters. #4053</p><p>Re-add deprecated Config.from_json, which was accidentally removed early. #4078</p><p>Improve typing for some functions using Callable in their type signatures, focusing on decorator factories. #4060</p><p>Nested blueprints are registered with their dotted name. This allows different blueprints with the same name to be nested at different locations. #4069</p><p>register_blueprint takes a name option to change the (pre-dotted) name the blueprint is registered with. This allows the same blueprint to be registered multiple times with unique names for url_for. Registering the same blueprint with the same name multiple times is deprecated. #1091</p><p>Improve typing for stream_with_context. #4052</p><h2 id="version-2-0-0" tabindex="-1">Version 2.0.0 <a class="header-anchor" href="#version-2-0-0" aria-label="Permalink to &quot;Version 2.0.0&quot;">​</a></h2><p>Released 2021-05-11</p><p>Drop support for Python 2 and 3.5.</p><p>Bump minimum versions of other Pallets projects: Werkzeug &gt;= 2, Jinja2 &gt;= 3, MarkupSafe &gt;= 2, ItsDangerous &gt;= 2, Click &gt;= 8. Be sure to check the change logs for each project. For better compatibility with other applications (e.g. Celery) that still require Click 7, there is no hard dependency on Click 8 yet, but using Click 7 will trigger a DeprecationWarning and Flask 2.1 will depend on Click 8.</p><p>JSON support no longer uses simplejson. To use another JSON module, override app.json_encoder and json_decoder. #3555</p><p>The encoding option to JSON functions is deprecated. #3562</p><p>Passing script_info to app factory functions is deprecated. This was not portable outside the flask command. Use click.get_current_context().obj if it’s needed. #3552</p><p>The CLI shows better error messages when the app failed to load when looking up commands. #2741</p><p>Add SessionInterface.get_cookie_name to allow setting the session cookie name dynamically. #3369</p><p>Add Config.from_file to load config using arbitrary file loaders, such as toml.load or json.load. Config.from_json is deprecated in favor of this. #3398</p><p>The flask run command will only defer errors on reload. Errors present during the initial call will cause the server to exit with the traceback immediately. #3431</p><p>send_file raises a ValueError when passed an io object in text mode. Previously, it would respond with 200 OK and an empty file. #3358</p><p>When using ad-hoc certificates, check for the cryptography library instead of PyOpenSSL. #3492</p><p>When specifying a factory function with FLASK_APP, keyword argument can be passed. #3553</p><p>When loading a .env or .flaskenv file, the current working directory is no longer changed to the location of the file. #3560</p><p>When returning a (response, headers) tuple from a view, the headers replace rather than extend existing headers on the response. For example, this allows setting the Content-Type for jsonify(). Use response.headers.extend() if extending is desired. #3628</p><p>The Scaffold class provides a common API for the Flask and Blueprint classes. Blueprint information is stored in attributes just like Flask, rather than opaque lambda functions. This is intended to improve consistency and maintainability. #3215</p><p>Include samesite and secure options when removing the session cookie. #3726</p><p>Support passing a pathlib.Path to static_folder. #3579</p><p>send_file and send_from_directory are wrappers around the implementations in werkzeug.utils. #3828</p><p>Some send_file parameters have been renamed, the old names are deprecated. attachment_filename is renamed to download_name. cache_timeout is renamed to max_age. add_etags is renamed to etag. #3828, #3883</p><p>send_file passes download_name even if as_attachment=False by using Content-Disposition: inline. #3828</p><p>send_file sets conditional=True and max_age=None by default. Cache-Control is set to no-cache if max_age is not set, otherwise public. This tells browsers to validate conditional requests instead of using a timed cache. #3828</p><p>helpers.safe_join is deprecated. Use werkzeug.utils.safe_join instead. #3828</p><p>The request context does route matching before opening the session. This could allow a session interface to change behavior based on request.endpoint. #3776</p><p>Use Jinja’s implementation of the |tojson filter. #3881</p><p>Add route decorators for common HTTP methods. For example, @app.post(&quot;/login&quot;) is a shortcut for @app.route(&quot;/login&quot;, methods=[&quot;POST&quot;]). #3907</p><p>Support async views, error handlers, before and after request, and teardown functions. #3412</p><p>Support nesting blueprints. #593, #1548, #3923</p><p>Set the default encoding to “UTF-8” when loading .env and .flaskenv files to allow to use non-ASCII characters. #3931</p><p>flask shell sets up tab and history completion like the default python shell if readline is installed. #3941</p><p>helpers.total_seconds() is deprecated. Use timedelta.total_seconds() instead. #3962</p><p>Add type hinting. #3973.</p><h2 id="version-1-1-4" tabindex="-1">Version 1.1.4 <a class="header-anchor" href="#version-1-1-4" aria-label="Permalink to &quot;Version 1.1.4&quot;">​</a></h2><p>Released 2021-05-13</p><p>Update static_folder to use _compat.fspath instead of os.fspath to continue supporting Python &lt; 3.6 #4050</p><h2 id="version-1-1-3" tabindex="-1">Version 1.1.3 <a class="header-anchor" href="#version-1-1-3" aria-label="Permalink to &quot;Version 1.1.3&quot;">​</a></h2><p>Released 2021-05-13</p><p>Set maximum versions of Werkzeug, Jinja, Click, and ItsDangerous. #4043</p><p>Re-add support for passing a pathlib.Path for static_folder. #3579</p><h2 id="version-1-1-2" tabindex="-1">Version 1.1.2 <a class="header-anchor" href="#version-1-1-2" aria-label="Permalink to &quot;Version 1.1.2&quot;">​</a></h2><p>Released 2020-04-03</p><p>Work around an issue when running the flask command with an external debugger on Windows. #3297</p><p>The static route will not catch all URLs if the Flask static_folder argument ends with a slash. #3452</p><h2 id="version-1-1-1" tabindex="-1">Version 1.1.1 <a class="header-anchor" href="#version-1-1-1" aria-label="Permalink to &quot;Version 1.1.1&quot;">​</a></h2><p>Released 2019-07-08</p><p>The flask.json_available flag was added back for compatibility with some extensions. It will raise a deprecation warning when used, and will be removed in version 2.0.0. #3288</p><h2 id="version-1-1-0" tabindex="-1">Version 1.1.0 <a class="header-anchor" href="#version-1-1-0" aria-label="Permalink to &quot;Version 1.1.0&quot;">​</a></h2><p>Released 2019-07-04</p><p>Bump minimum Werkzeug version to &gt;= 0.15.</p><p>Drop support for Python 3.4.</p><p>Error handlers for InternalServerError or 500 will always be passed an instance of InternalServerError. If they are invoked due to an unhandled exception, that original exception is now available as e.original_exception rather than being passed directly to the handler. The same is true if the handler is for the base HTTPException. This makes error handler behavior more consistent. #3266</p><p>Flask.finalize_request is called for all unhandled exceptions even if there is no 500 error handler.</p><p>Flask.logger takes the same name as Flask.name (the value passed as Flask(import_name). This reverts 1.0’s behavior of always logging to &quot;flask.app&quot;, in order to support multiple apps in the same process. A warning will be shown if old configuration is detected that needs to be moved. #2866</p><p>RequestContext.copy includes the current session object in the request context copy. This prevents session pointing to an out-of-date object. #2935</p><p>Using built-in RequestContext, unprintable Unicode characters in Host header will result in a HTTP 400 response and not HTTP 500 as previously. #2994</p><p>send_file supports PathLike objects as described in PEP 519, to support pathlib in Python 3. #3059</p><p>send_file supports BytesIO partial content. #2957</p><p>open_resource accepts the “rt” file mode. This still does the same thing as “r”. #3163</p><p>The MethodView.methods attribute set in a base class is used by subclasses. #3138</p><p>Flask.jinja_options is a dict instead of an ImmutableDict to allow easier configuration. Changes must still be made before creating the environment. #3190</p><p>Flask’s JSONMixin for the request and response wrappers was moved into Werkzeug. Use Werkzeug’s version with Flask-specific support. This bumps the Werkzeug dependency to &gt;= 0.15. #3125</p><p>The flask command entry point is simplified to take advantage of Werkzeug 0.15’s better reloader support. This bumps the Werkzeug dependency to &gt;= 0.15. #3022</p><p>Support static_url_path that ends with a forward slash. #3134</p><p>Support empty static_folder without requiring setting an empty static_url_path as well. #3124</p><p>jsonify supports dataclass objects. #3195</p><p>Allow customizing the Flask.url_map_class used for routing. #3069</p><p>The development server port can be set to 0, which tells the OS to pick an available port. #2926</p><p>The return value from cli.load_dotenv is more consistent with the documentation. It will return False if python-dotenv is not installed, or if the given path isn’t a file. #2937</p><p>Signaling support has a stub for the connect_via method when the Blinker library is not installed. #3208</p><p>Add an --extra-files option to the flask run CLI command to specify extra files that will trigger the reloader on change. #2897</p><p>Allow returning a dictionary from a view function. Similar to how returning a string will produce a text/html response, returning a dict will call jsonify to produce a application/json response. #3111</p><p>Blueprints have a cli Click group like app.cli. CLI commands registered with a blueprint will be available as a group under the flask command. #1357.</p><p>When using the test client as a context manager (with client:), all preserved request contexts are popped when the block exits, ensuring nested contexts are cleaned up correctly. #3157</p><p>Show a better error message when the view return type is not supported. #3214</p><p>flask.testing.make_test_environ_builder() has been deprecated in favour of a new class flask.testing.EnvironBuilder. #3232</p><p>The flask run command no longer fails if Python is not built with SSL support. Using the --cert option will show an appropriate error message. #3211</p><p>URL matching now occurs after the request context is pushed, rather than when it’s created. This allows custom URL converters to access the app and request contexts, such as to query a database for an id. #3088</p><h2 id="version-1-0-4" tabindex="-1">Version 1.0.4 <a class="header-anchor" href="#version-1-0-4" aria-label="Permalink to &quot;Version 1.0.4&quot;">​</a></h2><p>Released 2019-07-04</p><p>The key information for BadRequestKeyError is no longer cleared outside debug mode, so error handlers can still access it. This requires upgrading to Werkzeug 0.15.5. #3249</p><p>send_file url quotes the “:” and “/” characters for more compatible UTF-8 filename support in some browsers. #3074</p><p>Fixes for PEP 451 import loaders and pytest 5.x. #3275</p><p>Show message about dotenv on stderr instead of stdout. #3285</p><h2 id="version-1-0-3" tabindex="-1">Version 1.0.3 <a class="header-anchor" href="#version-1-0-3" aria-label="Permalink to &quot;Version 1.0.3&quot;">​</a></h2><p>Released 2019-05-17</p><p>send_file encodes filenames as ASCII instead of Latin-1 (ISO-8859-1). This fixes compatibility with Gunicorn, which is stricter about header encodings than PEP 3333. #2766</p><p>Allow custom CLIs using FlaskGroup to set the debug flag without it always being overwritten based on environment variables. #2765</p><p>flask --version outputs Werkzeug’s version and simplifies the Python version. #2825</p><p>send_file handles an attachment_filename that is a native Python 2 string (bytes) with UTF-8 coded bytes. #2933</p><p>A catch-all error handler registered for HTTPException will not handle RoutingException, which is used internally during routing. This fixes the unexpected behavior that had been introduced in 1.0. #2986</p><p>Passing the json argument to app.test_client does not push/pop an extra app context. #2900</p><h2 id="version-1-0-2" tabindex="-1">Version 1.0.2 <a class="header-anchor" href="#version-1-0-2" aria-label="Permalink to &quot;Version 1.0.2&quot;">​</a></h2><p>Released 2018-05-02</p><p>Fix more backwards compatibility issues with merging slashes between a blueprint prefix and route. #2748</p><p>Fix error with flask routes command when there are no routes. #2751</p><h2 id="version-1-0-1" tabindex="-1">Version 1.0.1 <a class="header-anchor" href="#version-1-0-1" aria-label="Permalink to &quot;Version 1.0.1&quot;">​</a></h2><p>Released 2018-04-29</p><p>Fix registering partials (with no <strong>name</strong>) as view functions. #2730</p><p>Don’t treat lists returned from view functions the same as tuples. Only tuples are interpreted as response data. #2736</p><p>Extra slashes between a blueprint’s url_prefix and a route URL are merged. This fixes some backwards compatibility issues with the change in 1.0. #2731, #2742</p><p>Only trap BadRequestKeyError errors in debug mode, not all BadRequest errors. This allows abort(400) to continue working as expected. #2735</p><p>The FLASK_SKIP_DOTENV environment variable can be set to 1 to skip automatically loading dotenv files. #2722</p><h2 id="version-1-0" tabindex="-1">Version 1.0 <a class="header-anchor" href="#version-1-0" aria-label="Permalink to &quot;Version 1.0&quot;">​</a></h2><p>Released 2018-04-26</p><p>Python 2.6 and 3.3 are no longer supported.</p><p>Bump minimum dependency versions to the latest stable versions: Werkzeug &gt;= 0.14, Jinja &gt;= 2.10, itsdangerous &gt;= 0.24, Click &gt;= 5.1. #2586</p><p>Skip app.run when a Flask application is run from the command line. This avoids some behavior that was confusing to debug.</p><p>Change the default for JSONIFY_PRETTYPRINT_REGULAR to False. ~json.jsonify returns a compact format by default, and an indented format in debug mode. #2193</p><p>Flask.<strong>init</strong> accepts the host_matching argument and sets it on Flask.url_map. #1559</p><p>Flask.<strong>init</strong> accepts the static_host argument and passes it as the host argument when defining the static route. #1559</p><p>send_file supports Unicode in attachment_filename. #2223</p><p>Pass _scheme argument from url_for to Flask.handle_url_build_error. #2017</p><p>Flask.add_url_rule accepts the provide_automatic_options argument to disable adding the OPTIONS method. #1489</p><p>MethodView subclasses inherit method handlers from base classes. #1936</p><p>Errors caused while opening the session at the beginning of the request are handled by the app’s error handlers. #2254</p><p>Blueprints gained Blueprint.json_encoder and Blueprint.json_decoder attributes to override the app’s encoder and decoder. #1898</p><p>Flask.make_response raises TypeError instead of ValueError for bad response types. The error messages have been improved to describe why the type is invalid. #2256</p><p>Add routes CLI command to output routes registered on the application. #2259</p><p>Show warning when session cookie domain is a bare hostname or an IP address, as these may not behave properly in some browsers, such as Chrome. #2282</p><p>Allow IP address as exact session cookie domain. #2282</p><p>SESSION_COOKIE_DOMAIN is set if it is detected through SERVER_NAME. #2282</p><p>Auto-detect zero-argument app factory called create_app or make_app from FLASK_APP. #2297</p><p>Factory functions are not required to take a script_info parameter to work with the flask command. If they take a single parameter or a parameter named script_info, the ScriptInfo object will be passed. #2319</p><p>FLASK_APP can be set to an app factory, with arguments if needed, for example FLASK_APP=myproject.app:create_app(&#39;dev&#39;). #2326</p><p>FLASK_APP can point to local packages that are not installed in editable mode, although pip install -e is still preferred. #2414</p><p>The View class attribute View.provide_automatic_options is set in View.as_view, to be detected by Flask.add_url_rule. #2316</p><p>Error handling will try handlers registered for blueprint, code, app, code, blueprint, exception, app, exception. #2314</p><p>Cookie is added to the response’s Vary header if the session is accessed at all during the request (and not deleted). #2288</p><p>Flask.test_request_context accepts subdomain and url_scheme arguments for use when building the base URL. #1621</p><p>Set APPLICATION_ROOT to &#39;/&#39; by default. This was already the implicit default when it was set to None.</p><p>TRAP_BAD_REQUEST_ERRORS is enabled by default in debug mode. BadRequestKeyError has a message with the bad key in debug mode instead of the generic bad request message. #2348</p><p>Allow registering new tags with TaggedJSONSerializer to support storing other types in the session cookie. #2352</p><p>Only open the session if the request has not been pushed onto the context stack yet. This allows stream_with_context generators to access the same session that the containing view uses. #2354</p><p>Add json keyword argument for the test client request methods. This will dump the given object as JSON and set the appropriate content type. #2358</p><p>Extract JSON handling to a mixin applied to both the Request and Response classes. This adds the Response.is_json and Response.get_json methods to the response to make testing JSON response much easier. #2358</p><p>Removed error handler caching because it caused unexpected results for some exception inheritance hierarchies. Register handlers explicitly for each exception if you want to avoid traversing the MRO. #2362</p><p>Fix incorrect JSON encoding of aware, non-UTC datetimes. #2374</p><p>Template auto reloading will honor debug mode even even if Flask.jinja_env was already accessed. #2373</p><p>The following old deprecated code was removed. #2385</p><p>flask.ext - import extensions directly by their name instead of through the flask.ext namespace. For example, import flask.ext.sqlalchemy becomes import flask_sqlalchemy.</p><p>Flask.init_jinja_globals - extend Flask.create_jinja_environment instead.</p><p>Flask.error_handlers - tracked by Flask.error_handler_spec, use Flask.errorhandler to register handlers.</p><p>Flask.request_globals_class - use Flask.app_ctx_globals_class instead.</p><p>Flask.static_path - use Flask.static_url_path instead.</p><p>Request.module - use Request.blueprint instead.</p><p>The Request.json property is no longer deprecated. #1421</p><p>Support passing a EnvironBuilder or dict to test_client.open. #2412</p><p>The flask command and Flask.run will load environment variables from .env and .flaskenv files if python-dotenv is installed. #2416</p><p>When passing a full URL to the test client, the scheme in the URL is used instead of PREFERRED_URL_SCHEME. #2430</p><p>Flask.logger has been simplified. LOGGER_NAME and LOGGER_HANDLER_POLICY config was removed. The logger is always named flask.app. The level is only set on first access, it doesn’t check Flask.debug each time. Only one format is used, not different ones depending on Flask.debug. No handlers are removed, and a handler is only added if no handlers are already configured. #2436</p><p>Blueprint view function names may not contain dots. #2450</p><p>Fix a ValueError caused by invalid Range requests in some cases. #2526</p><p>The development server uses threads by default. #2529</p><p>Loading config files with silent=True will ignore ENOTDIR errors. #2581</p><p>Pass --cert and --key options to flask run to run the development server over HTTPS. #2606</p><p>Added SESSION_COOKIE_SAMESITE to control the SameSite attribute on the session cookie. #2607</p><p>Added Flask.test_cli_runner to create a Click runner that can invoke Flask CLI commands for testing. #2636</p><p>Subdomain matching is disabled by default and setting SERVER_NAME does not implicitly enable it. It can be enabled by passing subdomain_matching=True to the Flask constructor. #2635</p><p>A single trailing slash is stripped from the blueprint url_prefix when it is registered with the app. #2629</p><p>Request.get_json doesn’t cache the result if parsing fails when silent is true. #2651</p><p>Request.get_json no longer accepts arbitrary encodings. Incoming JSON should be encoded using UTF-8 per RFC 8259, but Flask will autodetect UTF-8, -16, or -32. #2691</p><p>Added MAX_COOKIE_SIZE and Response.max_cookie_size to control when Werkzeug warns about large cookies that browsers may ignore. #2693</p><p>Updated documentation theme to make docs look better in small windows. #2709</p><p>Rewrote the tutorial docs and example project to take a more structured approach to help new users avoid common pitfalls. #2676</p><h2 id="version-0-12-5" tabindex="-1">Version 0.12.5 <a class="header-anchor" href="#version-0-12-5" aria-label="Permalink to &quot;Version 0.12.5&quot;">​</a></h2><p>Released 2020-02-10</p><p>Pin Werkzeug to &lt; 1.0.0. #3497</p><h2 id="version-0-12-4" tabindex="-1">Version 0.12.4 <a class="header-anchor" href="#version-0-12-4" aria-label="Permalink to &quot;Version 0.12.4&quot;">​</a></h2><p>Released 2018-04-29</p><p>Repackage 0.12.3 to fix package layout issue. #2728</p><h2 id="version-0-12-3" tabindex="-1">Version 0.12.3 <a class="header-anchor" href="#version-0-12-3" aria-label="Permalink to &quot;Version 0.12.3&quot;">​</a></h2><p>Released 2018-04-26</p><p>Request.get_json no longer accepts arbitrary encodings. Incoming JSON should be encoded using UTF-8 per RFC 8259, but Flask will autodetect UTF-8, -16, or -32. #2692</p><p>Fix a Python warning about imports when using python -m flask. #2666</p><p>Fix a ValueError caused by invalid Range requests in some cases.</p><h2 id="version-0-12-2" tabindex="-1">Version 0.12.2 <a class="header-anchor" href="#version-0-12-2" aria-label="Permalink to &quot;Version 0.12.2&quot;">​</a></h2><p>Released 2017-05-16</p><p>Fix a bug in safe_join on Windows.</p><h2 id="version-0-12-1" tabindex="-1">Version 0.12.1 <a class="header-anchor" href="#version-0-12-1" aria-label="Permalink to &quot;Version 0.12.1&quot;">​</a></h2><p>Released 2017-03-31</p><p>Prevent flask run from showing a NoAppException when an ImportError occurs within the imported application module.</p><p>Fix encoding behavior of app.config.from_pyfile for Python 3. #2118</p><p>Use the SERVER_NAME config if it is present as default values for app.run. #2109, #2152</p><p>Call ctx.auto_pop with the exception object instead of None, in the event that a BaseException such as KeyboardInterrupt is raised in a request handler.</p><h2 id="version-0-12" tabindex="-1">Version 0.12 <a class="header-anchor" href="#version-0-12" aria-label="Permalink to &quot;Version 0.12&quot;">​</a></h2><p>Released 2016-12-21, codename Punsch</p><p>The cli command now responds to --version.</p><p>Mimetype guessing and ETag generation for file-like objects in send_file has been removed. #104, :pr<code>1849</code></p><p>Mimetype guessing in send_file now fails loudly and doesn’t fall back to application/octet-stream. #1988</p><p>Make flask.safe_join able to join multiple paths like os.path.join #1730</p><p>Revert a behavior change that made the dev server crash instead of returning an Internal Server Error. #2006</p><p>Correctly invoke response handlers for both regular request dispatching as well as error handlers.</p><p>Disable logger propagation by default for the app logger.</p><p>Add support for range requests in send_file.</p><p>app.test_client includes preset default environment, which can now be directly set, instead of per client.get.</p><p>Fix crash when running under PyPy3. #1814</p><h2 id="version-0-11-1" tabindex="-1">Version 0.11.1 <a class="header-anchor" href="#version-0-11-1" aria-label="Permalink to &quot;Version 0.11.1&quot;">​</a></h2><p>Released 2016-06-07</p><p>Fixed a bug that prevented FLASK_APP=foobar/<strong>init</strong>.py from working. #1872</p><h2 id="version-0-11" tabindex="-1">Version 0.11 <a class="header-anchor" href="#version-0-11" aria-label="Permalink to &quot;Version 0.11&quot;">​</a></h2><p>Released 2016-05-29, codename Absinthe</p><p>Added support to serializing top-level arrays to jsonify. This introduces a security risk in ancient browsers.</p><p>Added before_render_template signal.</p><p>Added **kwargs to Flask.test_client to support passing additional keyword arguments to the constructor of Flask.test_client_class.</p><p>Added SESSION_REFRESH_EACH_REQUEST config key that controls the set-cookie behavior. If set to True a permanent session will be refreshed each request and get their lifetime extended, if set to False it will only be modified if the session actually modifies. Non permanent sessions are not affected by this and will always expire if the browser window closes.</p><p>Made Flask support custom JSON mimetypes for incoming data.</p><p>Added support for returning tuples in the form (response, headers) from a view function.</p><p>Added Config.from_json.</p><p>Added Flask.config_class.</p><p>Added Config.get_namespace.</p><p>Templates are no longer automatically reloaded outside of debug mode. This can be configured with the new TEMPLATES_AUTO_RELOAD config key.</p><p>Added a workaround for a limitation in Python 3.3’s namespace loader.</p><p>Added support for explicit root paths when using Python 3.3’s namespace packages.</p><p>Added flask and the flask.cli module to start the local debug server through the click CLI system. This is recommended over the old flask.run() method as it works faster and more reliable due to a different design and also replaces Flask-Script.</p><p>Error handlers that match specific classes are now checked first, thereby allowing catching exceptions that are subclasses of HTTP exceptions (in werkzeug.exceptions). This makes it possible for an extension author to create exceptions that will by default result in the HTTP error of their choosing, but may be caught with a custom error handler if desired.</p><p>Added Config.from_mapping.</p><p>Flask will now log by default even if debug is disabled. The log format is now hardcoded but the default log handling can be disabled through the LOGGER_HANDLER_POLICY configuration key.</p><p>Removed deprecated module functionality.</p><p>Added the EXPLAIN_TEMPLATE_LOADING config flag which when enabled will instruct Flask to explain how it locates templates. This should help users debug when the wrong templates are loaded.</p><p>Enforce blueprint handling in the order they were registered for template loading.</p><p>Ported test suite to py.test.</p><p>Deprecated request.json in favour of request.get_json().</p><p>Add “pretty” and “compressed” separators definitions in jsonify() method. Reduces JSON response size when JSONIFY_PRETTYPRINT_REGULAR=False by removing unnecessary white space included by default after separators.</p><p>JSON responses are now terminated with a newline character, because it is a convention that UNIX text files end with a newline and some clients don’t deal well when this newline is missing. #1262</p><p>The automatically provided OPTIONS method is now correctly disabled if the user registered an overriding rule with the lowercase-version options. #1288</p><p>flask.json.jsonify now supports the datetime.date type. #1326</p><p>Don’t leak exception info of already caught exceptions to context teardown handlers. #1393</p><p>Allow custom Jinja environment subclasses. #1422</p><p>Updated extension dev guidelines.</p><p>flask.g now has pop() and setdefault methods.</p><p>Turn on autoescape for flask.templating.render_template_string by default. #1515</p><p>flask.ext is now deprecated. #1484</p><p>send_from_directory now raises BadRequest if the filename is invalid on the server OS. #1763</p><p>Added the JSONIFY_MIMETYPE configuration variable. #1728</p><p>Exceptions during teardown handling will no longer leave bad application contexts lingering around.</p><p>Fixed broken test_appcontext_signals() test case.</p><p>Raise an AttributeError in helpers.find_package with a useful message explaining why it is raised when a PEP 302 import hook is used without an is_package() method.</p><p>Fixed an issue causing exceptions raised before entering a request or app context to be passed to teardown handlers.</p><p>Fixed an issue with query parameters getting removed from requests in the test client when absolute URLs were requested.</p><p>Made @before_first_request into a decorator as intended.</p><p>Fixed an etags bug when sending a file streams with a name.</p><p>Fixed send_from_directory not expanding to the application root path correctly.</p><p>Changed logic of before first request handlers to flip the flag after invoking. This will allow some uses that are potentially dangerous but should probably be permitted.</p><p>Fixed Python 3 bug when a handler from app.url_build_error_handlers reraises the BuildError.</p><h2 id="version-0-10-1" tabindex="-1">Version 0.10.1 <a class="header-anchor" href="#version-0-10-1" aria-label="Permalink to &quot;Version 0.10.1&quot;">​</a></h2><p>Released 2013-06-14</p><p>Fixed an issue where |tojson was not quoting single quotes which made the filter not work properly in HTML attributes. Now it’s possible to use that filter in single quoted attributes. This should make using that filter with angular.js easier.</p><p>Added support for byte strings back to the session system. This broke compatibility with the common case of people putting binary data for token verification into the session.</p><p>Fixed an issue where registering the same method twice for the same endpoint would trigger an exception incorrectly.</p><h2 id="version-0-10" tabindex="-1">Version 0.10 <a class="header-anchor" href="#version-0-10" aria-label="Permalink to &quot;Version 0.10&quot;">​</a></h2><p>Released 2013-06-13, codename Limoncello</p><p>Changed default cookie serialization format from pickle to JSON to limit the impact an attacker can do if the secret key leaks.</p><p>Added template_test methods in addition to the already existing template_filter method family.</p><p>Added template_global methods in addition to the already existing template_filter method family.</p><p>Set the content-length header for x-sendfile.</p><p>tojson filter now does not escape script blocks in HTML5 parsers.</p><p>tojson used in templates is now safe by default. This was allowed due to the different escaping behavior.</p><p>Flask will now raise an error if you attempt to register a new function on an already used endpoint.</p><p>Added wrapper module around simplejson and added default serialization of datetime objects. This allows much easier customization of how JSON is handled by Flask or any Flask extension.</p><p>Removed deprecated internal flask.session module alias. Use flask.sessions instead to get the session module. This is not to be confused with flask.session the session proxy.</p><p>Templates can now be rendered without request context. The behavior is slightly different as the request, session and g objects will not be available and blueprint’s context processors are not called.</p><p>The config object is now available to the template as a real global and not through a context processor which makes it available even in imported templates by default.</p><p>Added an option to generate non-ascii encoded JSON which should result in less bytes being transmitted over the network. It’s disabled by default to not cause confusion with existing libraries that might expect flask.json.dumps to return bytes by default.</p><p>flask.g is now stored on the app context instead of the request context.</p><p>flask.g now gained a get() method for not erroring out on non existing items.</p><p>flask.g now can be used with the in operator to see what’s defined and it now is iterable and will yield all attributes stored.</p><p>flask.Flask.request_globals_class got renamed to flask.Flask.app_ctx_globals_class which is a better name to what it does since 0.10.</p><p>request, session and g are now also added as proxies to the template context which makes them available in imported templates. One has to be very careful with those though because usage outside of macros might cause caching.</p><p>Flask will no longer invoke the wrong error handlers if a proxy exception is passed through.</p><p>Added a workaround for chrome’s cookies in localhost not working as intended with domain names.</p><p>Changed logic for picking defaults for cookie values from sessions to work better with Google Chrome.</p><p>Added message_flashed signal that simplifies flashing testing.</p><p>Added support for copying of request contexts for better working with greenlets.</p><p>Removed custom JSON HTTP exception subclasses. If you were relying on them you can reintroduce them again yourself trivially. Using them however is strongly discouraged as the interface was flawed.</p><p>Python requirements changed: requiring Python 2.6 or 2.7 now to prepare for Python 3.3 port.</p><p>Changed how the teardown system is informed about exceptions. This is now more reliable in case something handles an exception halfway through the error handling process.</p><p>Request context preservation in debug mode now keeps the exception information around which means that teardown handlers are able to distinguish error from success cases.</p><p>Added the JSONIFY_PRETTYPRINT_REGULAR configuration variable.</p><p>Flask now orders JSON keys by default to not trash HTTP caches due to different hash seeds between different workers.</p><p>Added appcontext_pushed and appcontext_popped signals.</p><p>The builtin run method now takes the SERVER_NAME into account when picking the default port to run on.</p><p>Added flask.request.get_json() as a replacement for the old flask.request.json property.</p><h2 id="version-0-9" tabindex="-1">Version 0.9 <a class="header-anchor" href="#version-0-9" aria-label="Permalink to &quot;Version 0.9&quot;">​</a></h2><p>Released 2012-07-01, codename Campari</p><p>The Request.on_json_loading_failed now returns a JSON formatted response by default.</p><p>The url_for function now can generate anchors to the generated links.</p><p>The url_for function now can also explicitly generate URL rules specific to a given HTTP method.</p><p>Logger now only returns the debug log setting if it was not set explicitly.</p><p>Unregister a circular dependency between the WSGI environment and the request object when shutting down the request. This means that environ werkzeug.request will be None after the response was returned to the WSGI server but has the advantage that the garbage collector is not needed on CPython to tear down the request unless the user created circular dependencies themselves.</p><p>Session is now stored after callbacks so that if the session payload is stored in the session you can still modify it in an after request callback.</p><p>The Flask class will avoid importing the provided import name if it can (the required first parameter), to benefit tools which build Flask instances programmatically. The Flask class will fall back to using import on systems with custom module hooks, e.g. Google App Engine, or when the import name is inside a zip archive (usually an egg) prior to Python 2.7.</p><p>Blueprints now have a decorator to add custom template filters application wide, Blueprint.app_template_filter.</p><p>The Flask and Blueprint classes now have a non-decorator method for adding custom template filters application wide, Flask.add_template_filter and Blueprint.add_app_template_filter.</p><p>The get_flashed_messages function now allows rendering flashed message categories in separate blocks, through a category_filter argument.</p><p>The Flask.run method now accepts None for host and port arguments, using default values when None. This allows for calling run using configuration values, e.g. app.run(app.config.get(&#39;MYHOST&#39;), app.config.get(&#39;MYPORT&#39;)), with proper behavior whether or not a config file is provided.</p><p>The render_template method now accepts a either an iterable of template names or a single template name. Previously, it only accepted a single template name. On an iterable, the first template found is rendered.</p><p>Added Flask.app_context which works very similar to the request context but only provides access to the current application. This also adds support for URL generation without an active request context.</p><p>View functions can now return a tuple with the first instance being an instance of Response. This allows for returning jsonify(error=&quot;error msg&quot;), 400 from a view function.</p><p>Flask and Blueprint now provide a get_send_file_max_age hook for subclasses to override behavior of serving static files from Flask when using Flask.send_static_file (used for the default static file handler) and helpers.send_file. This hook is provided a filename, which for example allows changing cache controls by file extension. The default max-age for send_file and static files can be configured through a new SEND_FILE_MAX_AGE_DEFAULT configuration variable, which is used in the default get_send_file_max_age implementation.</p><p>Fixed an assumption in sessions implementation which could break message flashing on sessions implementations which use external storage.</p><p>Changed the behavior of tuple return values from functions. They are no longer arguments to the response object, they now have a defined meaning.</p><p>Added Flask.request_globals_class to allow a specific class to be used on creation of the g instance of each request.</p><p>Added required_methods attribute to view functions to force-add methods on registration.</p><p>Added flask.after_this_request.</p><p>Added flask.stream_with_context and the ability to push contexts multiple times without producing unexpected behavior.</p><h2 id="version-0-8-1" tabindex="-1">Version 0.8.1 <a class="header-anchor" href="#version-0-8-1" aria-label="Permalink to &quot;Version 0.8.1&quot;">​</a></h2><p>Released 2012-07-01</p><p>Fixed an issue with the undocumented flask.session module to not work properly on Python 2.5. It should not be used but did cause some problems for package managers.</p><h2 id="version-0-8" tabindex="-1">Version 0.8 <a class="header-anchor" href="#version-0-8" aria-label="Permalink to &quot;Version 0.8&quot;">​</a></h2><p>Released 2011-09-29, codename Rakija</p><p>Refactored session support into a session interface so that the implementation of the sessions can be changed without having to override the Flask class.</p><p>Empty session cookies are now deleted properly automatically.</p><p>View functions can now opt out of getting the automatic OPTIONS implementation.</p><p>HTTP exceptions and Bad Request errors can now be trapped so that they show up normally in the traceback.</p><p>Flask in debug mode is now detecting some common problems and tries to warn you about them.</p><p>Flask in debug mode will now complain with an assertion error if a view was attached after the first request was handled. This gives earlier feedback when users forget to import view code ahead of time.</p><p>Added the ability to register callbacks that are only triggered once at the beginning of the first request with Flask.before_first_request.</p><p>Malformed JSON data will now trigger a bad request HTTP exception instead of a value error which usually would result in a 500 internal server error if not handled. This is a backwards incompatible change.</p><p>Applications now not only have a root path where the resources and modules are located but also an instance path which is the designated place to drop files that are modified at runtime (uploads etc.). Also this is conceptually only instance depending and outside version control so it’s the perfect place to put configuration files etc.</p><p>Added the APPLICATION_ROOT configuration variable.</p><p>Implemented TestClient.session_transaction to easily modify sessions from the test environment.</p><p>Refactored test client internally. The APPLICATION_ROOT configuration variable as well as SERVER_NAME are now properly used by the test client as defaults.</p><p>Added View.decorators to support simpler decorating of pluggable (class-based) views.</p><p>Fixed an issue where the test client if used with the “with” statement did not trigger the execution of the teardown handlers.</p><p>Added finer control over the session cookie parameters.</p><p>HEAD requests to a method view now automatically dispatch to the get method if no handler was implemented.</p><p>Implemented the virtual flask.ext package to import extensions from.</p><p>The context preservation on exceptions is now an integral component of Flask itself and no longer of the test client. This cleaned up some internal logic and lowers the odds of runaway request contexts in unittests.</p><p>Fixed the Jinja2 environment’s list_templates method not returning the correct names when blueprints or modules were involved.</p><h2 id="version-0-7-2" tabindex="-1">Version 0.7.2 <a class="header-anchor" href="#version-0-7-2" aria-label="Permalink to &quot;Version 0.7.2&quot;">​</a></h2><p>Released 2011-07-06</p><p>Fixed an issue with URL processors not properly working on blueprints.</p><h2 id="version-0-7-1" tabindex="-1">Version 0.7.1 <a class="header-anchor" href="#version-0-7-1" aria-label="Permalink to &quot;Version 0.7.1&quot;">​</a></h2><p>Released 2011-06-29</p><p>Added missing future import that broke 2.5 compatibility.</p><p>Fixed an infinite redirect issue with blueprints.</p><h2 id="version-0-7" tabindex="-1">Version 0.7 <a class="header-anchor" href="#version-0-7" aria-label="Permalink to &quot;Version 0.7&quot;">​</a></h2><p>Released 2011-06-28, codename Grappa</p><p>Added Flask.make_default_options_response which can be used by subclasses to alter the default behavior for OPTIONS responses.</p><p>Unbound locals now raise a proper RuntimeError instead of an AttributeError.</p><p>Mimetype guessing and etag support based on file objects is now deprecated for send_file because it was unreliable. Pass filenames instead or attach your own etags and provide a proper mimetype by hand.</p><p>Static file handling for modules now requires the name of the static folder to be supplied explicitly. The previous autodetection was not reliable and caused issues on Google’s App Engine. Until 1.0 the old behavior will continue to work but issue dependency warnings.</p><p>Fixed a problem for Flask to run on jython.</p><p>Added a PROPAGATE_EXCEPTIONS configuration variable that can be used to flip the setting of exception propagation which previously was linked to DEBUG alone and is now linked to either DEBUG or TESTING.</p><p>Flask no longer internally depends on rules being added through the add_url_rule function and can now also accept regular werkzeug rules added to the url map.</p><p>Added an endpoint method to the flask application object which allows one to register a callback to an arbitrary endpoint with a decorator.</p><p>Use Last-Modified for static file sending instead of Date which was incorrectly introduced in 0.6.</p><p>Added create_jinja_loader to override the loader creation process.</p><p>Implemented a silent flag for config.from_pyfile.</p><p>Added teardown_request decorator, for functions that should run at the end of a request regardless of whether an exception occurred. Also the behavior for after_request was changed. It’s now no longer executed when an exception is raised.</p><p>Implemented has_request_context.</p><p>Deprecated init_jinja_globals. Override the Flask.create_jinja_environment method instead to achieve the same functionality.</p><p>Added safe_join.</p><p>The automatic JSON request data unpacking now looks at the charset mimetype parameter.</p><p>Don’t modify the session on get_flashed_messages if there are no messages in the session.</p><p>before_request handlers are now able to abort requests with errors.</p><p>It is not possible to define user exception handlers. That way you can provide custom error messages from a central hub for certain errors that might occur during request processing (for instance database connection errors, timeouts from remote resources etc.).</p><p>Blueprints can provide blueprint specific error handlers.</p><p>Implemented generic class-based views.</p><h2 id="version-0-6-1" tabindex="-1">Version 0.6.1 <a class="header-anchor" href="#version-0-6-1" aria-label="Permalink to &quot;Version 0.6.1&quot;">​</a></h2><p>Released 2010-12-31</p><p>Fixed an issue where the default OPTIONS response was not exposing all valid methods in the Allow header.</p><p>Jinja2 template loading syntax now allows “./” in front of a template load path. Previously this caused issues with module setups.</p><p>Fixed an issue where the subdomain setting for modules was ignored for the static folder.</p><p>Fixed a security problem that allowed clients to download arbitrary files if the host server was a windows based operating system and the client uses backslashes to escape the directory the files where exposed from.</p><h2 id="version-0-6" tabindex="-1">Version 0.6 <a class="header-anchor" href="#version-0-6" aria-label="Permalink to &quot;Version 0.6&quot;">​</a></h2><p>Released 2010-07-27, codename Whisky</p><p>After request functions are now called in reverse order of registration.</p><p>OPTIONS is now automatically implemented by Flask unless the application explicitly adds ‘OPTIONS’ as method to the URL rule. In this case no automatic OPTIONS handling kicks in.</p><p>Static rules are now even in place if there is no static folder for the module. This was implemented to aid GAE which will remove the static folder if it’s part of a mapping in the .yml file.</p><p>Flask.config is now available in the templates as config.</p><p>Context processors will no longer override values passed directly to the render function.</p><p>Added the ability to limit the incoming request data with the new MAX_CONTENT_LENGTH configuration value.</p><p>The endpoint for the Module.add_url_rule method is now optional to be consistent with the function of the same name on the application object.</p><p>Added a make_response function that simplifies creating response object instances in views.</p><p>Added signalling support based on blinker. This feature is currently optional and supposed to be used by extensions and applications. If you want to use it, make sure to have blinker installed.</p><p>Refactored the way URL adapters are created. This process is now fully customizable with the Flask.create_url_adapter method.</p><p>Modules can now register for a subdomain instead of just an URL prefix. This makes it possible to bind a whole module to a configurable subdomain.</p><h2 id="version-0-5-2" tabindex="-1">Version 0.5.2 <a class="header-anchor" href="#version-0-5-2" aria-label="Permalink to &quot;Version 0.5.2&quot;">​</a></h2><p>Released 2010-07-15</p><p>Fixed another issue with loading templates from directories when modules were used.</p><h2 id="version-0-5-1" tabindex="-1">Version 0.5.1 <a class="header-anchor" href="#version-0-5-1" aria-label="Permalink to &quot;Version 0.5.1&quot;">​</a></h2><p>Released 2010-07-06</p><p>Fixes an issue with template loading from directories when modules where used.</p><h2 id="version-0-5" tabindex="-1">Version 0.5 <a class="header-anchor" href="#version-0-5" aria-label="Permalink to &quot;Version 0.5&quot;">​</a></h2><p>Released 2010-07-06, codename Calvados</p><p>Fixed a bug with subdomains that was caused by the inability to specify the server name. The server name can now be set with the SERVER_NAME config key. This key is now also used to set the session cookie cross-subdomain wide.</p><p>Autoescaping is no longer active for all templates. Instead it is only active for .html, .htm, .xml and .xhtml. Inside templates this behavior can be changed with the autoescape tag.</p><p>Refactored Flask internally. It now consists of more than a single file.</p><p>send_file now emits etags and has the ability to do conditional responses builtin.</p><p>(temporarily) dropped support for zipped applications. This was a rarely used feature and led to some confusing behavior.</p><p>Added support for per-package template and static-file directories.</p><p>Removed support for create_jinja_loader which is no longer used in 0.5 due to the improved module support.</p><p>Added a helper function to expose files from any directory.</p><h2 id="version-0-4" tabindex="-1">Version 0.4 <a class="header-anchor" href="#version-0-4" aria-label="Permalink to &quot;Version 0.4&quot;">​</a></h2><p>Released 2010-06-18, codename Rakia</p><p>Added the ability to register application wide error handlers from modules.</p><p>Flask.after_request handlers are now also invoked if the request dies with an exception and an error handling page kicks in.</p><p>Test client has not the ability to preserve the request context for a little longer. This can also be used to trigger custom requests that do not pop the request stack for testing.</p><p>Because the Python standard library caches loggers, the name of the logger is configurable now to better support unittests.</p><p>Added TESTING switch that can activate unittesting helpers.</p><p>The logger switches to DEBUG mode now if debug is enabled.</p><h2 id="version-0-3-1" tabindex="-1">Version 0.3.1 <a class="header-anchor" href="#version-0-3-1" aria-label="Permalink to &quot;Version 0.3.1&quot;">​</a></h2><p>Released 2010-05-28</p><p>Fixed a error reporting bug with Config.from_envvar.</p><p>Removed some unused code.</p><p>Release does no longer include development leftover files (.git folder for themes, built documentation in zip and pdf file and some .pyc files)</p><h2 id="version-0-3" tabindex="-1">Version 0.3 <a class="header-anchor" href="#version-0-3" aria-label="Permalink to &quot;Version 0.3&quot;">​</a></h2><p>Released 2010-05-28, codename Schnaps</p><p>Added support for categories for flashed messages.</p><p>The application now configures a logging.Handler and will log request handling exceptions to that logger when not in debug mode. This makes it possible to receive mails on server errors for example.</p><p>Added support for context binding that does not require the use of the with statement for playing in the console.</p><p>The request context is now available within the with statement making it possible to further push the request context or pop it.</p><p>Added support for configurations.</p><h2 id="version-0-2" tabindex="-1">Version 0.2 <a class="header-anchor" href="#version-0-2" aria-label="Permalink to &quot;Version 0.2&quot;">​</a></h2><p>Released 2010-05-12, codename J?germeister</p><p>Various bugfixes</p><p>Integrated JSON support</p><p>Added get_template_attribute helper function.</p><p>Flask.add_url_rule can now also register a view function.</p><p>Refactored internal request dispatching.</p><p>Server listens on 127.0.0.1 by default now to fix issues with chrome.</p><p>Added external URL support.</p><p>Added support for send_file.</p><p>Module support and internal request handling refactoring to better support pluggable applications.</p><p>Sessions can be set to be permanent now on a per-session basis.</p><p>Better error reporting on missing secret keys.</p><p>Added support for Google Appengine.</p><h2 id="version-0-1" tabindex="-1">Version 0.1 <a class="header-anchor" href="#version-0-1" aria-label="Permalink to &quot;Version 0.1&quot;">​</a></h2><p>Released 2010-04-16</p><p>First public preview release.</p>',599),i=[n];function r(p,d,l,h,c,u){return t(),a("div",null,i)}const g=e(s,[["render",r]]);export{f as __pageData,g as default};
