import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"View Decorators","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/pattern/view_decorator.md","filePath":"python/flask/user_guide/pattern/view_decorator.md","lastUpdated":1693404008000}'),l={name:"python/flask/user_guide/pattern/view_decorator.md"},p=o(`<h1 id="view-decorators" tabindex="-1">View Decorators <a class="header-anchor" href="#view-decorators" aria-label="Permalink to &quot;View Decorators {#view-decorators}&quot;">​</a></h1><p>Python has a really interesting feature called function decorators. This allows some really neat things for web applications. Because each view in Flask is a function, decorators can be used to inject additional functionality to one or more functions. The <code>route()</code> decorator is the one you probably used already. But there are use cases for implementing your own decorator. For instance, imagine you have a view that should only be used by people that are logged in. If a user goes to the site and is not logged in, they should be redirected to the login page. This is a good example of a use case where a decorator is an excellent solution.</p><h2 id="login-required-decorator" tabindex="-1">Login Required Decorator <a class="header-anchor" href="#login-required-decorator" aria-label="Permalink to &quot;Login Required Decorator {#login-required-decorator}&quot;">​</a></h2><p>So let’s implement such a decorator. A decorator is a function that wraps and replaces another function. Since the original function is replaced, you need to remember to copy the original function’s information to the new function. Use <code>functools.wraps()</code> to handle this for you.</p><p>This example assumes that the login page is called <code>&#39;login&#39;</code> and that the current user is stored in <code>g.user</code> and is <code>None</code> if there is no-one logged in.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> functools </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> wraps</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> g, request, redirect, url_for</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">login_required</span><span style="color:#E1E4E8;">(f):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@wraps</span><span style="color:#E1E4E8;">(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decorated_function</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> g.user </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> redirect(url_for(</span><span style="color:#9ECBFF;">&#39;login&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">request.url))</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> f(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> decorated_function</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> functools </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> wraps</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> g, request, redirect, url_for</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">login_required</span><span style="color:#24292E;">(f):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@wraps</span><span style="color:#24292E;">(f)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorated_function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> g.user </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> redirect(url_for(</span><span style="color:#032F62;">&#39;login&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">request.url))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> f(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> decorated_function</span></span></code></pre></div><p>To use the decorator, apply it as innermost decorator to a view function. When applying further decorators, always remember that the <code>route()</code> decorator is the outermost.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/secret_page&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@login_required</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">secret_page</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/secret_page&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@login_required</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">secret_page</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>The next value will exist in <code>request.args</code> after a <code>GET</code> request for the login page. You’ll have to pass it along when sending the <code>POST</code> request from the login form. You can do this with a hidden input tag, then retrieve it from <code>request.form</code> when logging the user in.</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hidden&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{{ request.args.get(&#39;next&#39;, &#39;&#39;) }}&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hidden&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{{ request.args.get(&#39;next&#39;, &#39;&#39;) }}&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div></div><h2 id="caching-decorator" tabindex="-1">Caching Decorator <a class="header-anchor" href="#caching-decorator" aria-label="Permalink to &quot;Caching Decorator {#caching-decorator}&quot;">​</a></h2><p>Imagine you have a view function that does an expensive calculation and because of that you would like to cache the generated results for a certain amount of time. A decorator would be nice for that. We’re assuming you have set up a cache like mentioned in <a href="/python/flask/user_guide/pattern/caching#caching">Caching</a>.</p><p>Here is an example cache function. It generates the cache key from a specific prefix (actually a format string) and the current path of the request. Notice that we are using a function that first creates the decorator that then decorates the function. Sounds awful? Unfortunately it is a little bit more complex, but the code should still be straightforward to read.</p><p>The decorated function will then work as follows</p><ol><li><p>get the unique cache key for the current request based on the current path.</p></li><li><p>get the value for that key from the cache. If the cache returned something we will return that value.</p></li><li><p>otherwise the original function is called and the return value is stored in the cache for the timeout provided (by default 5 minutes).</p></li></ol><p>Here the code:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> functools </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> wraps</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cached</span><span style="color:#E1E4E8;">(timeout</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">, key</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;view/</span><span style="color:#79B8FF;">{}</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decorator</span><span style="color:#E1E4E8;">(f):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">@wraps</span><span style="color:#E1E4E8;">(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decorated_function</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">            cache_key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> key.format(request.path)</span></span>
<span class="line"><span style="color:#E1E4E8;">            rv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.get(cache_key)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> rv </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> rv</span></span>
<span class="line"><span style="color:#E1E4E8;">            rv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">            cache.set(cache_key, rv, </span><span style="color:#FFAB70;">timeout</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">timeout)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> rv</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> decorated_function</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> decorator</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> functools </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> wraps</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cached</span><span style="color:#24292E;">(timeout</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">, key</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;view/</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorator</span><span style="color:#24292E;">(f):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">@wraps</span><span style="color:#24292E;">(f)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorated_function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">            cache_key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key.format(request.path)</span></span>
<span class="line"><span style="color:#24292E;">            rv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.get(cache_key)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> rv </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rv</span></span>
<span class="line"><span style="color:#24292E;">            rv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">            cache.set(cache_key, rv, </span><span style="color:#E36209;">timeout</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">timeout)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rv</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> decorated_function</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> decorator</span></span></code></pre></div><p>Notice that this assumes an instantiated <code>cache</code> object is available, see <a href="/python/flask/user_guide/pattern/caching#caching">Caching</a>.</p><h2 id="templating-decorator" tabindex="-1">Templating Decorator <a class="header-anchor" href="#templating-decorator" aria-label="Permalink to &quot;Templating Decorator {#templating-decorator}&quot;">​</a></h2><p>A common pattern invented by the TurboGears guys a while back is a templating decorator. The idea of that decorator is that you return a dictionary with the values passed to the template from the view function and the template is automatically rendered. With that, the following three examples do exactly the same:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&#39;index.html&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@templated</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;index.html&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@templated</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&#39;index.html&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@templated</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;index.html&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@templated</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">)</span></span></code></pre></div><p>As you can see, if no template name is provided it will use the endpoint of the URL map with dots converted to slashes + <code>&#39;.html&#39;</code>. Otherwise the provided template name is used. When the decorated function returns, the dictionary returned is passed to the template rendering function. If <code>None</code> is returned, an empty dictionary is assumed, if something else than a dictionary is returned we return it from the function unchanged. That way you can still use the redirect function or return simple strings.</p><p>Here is the code for that decorator:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> functools </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> wraps</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> request, render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">templated</span><span style="color:#E1E4E8;">(template</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decorator</span><span style="color:#E1E4E8;">(f):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">@wraps</span><span style="color:#E1E4E8;">(f)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decorated_function</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">            template_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> template_name </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                template_name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">request.endpoint.replace(</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">.html&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ctx </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                ctx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ctx</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(template_name, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">ctx)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> decorated_function</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> decorator</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> functools </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> wraps</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> request, render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">templated</span><span style="color:#24292E;">(template</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorator</span><span style="color:#24292E;">(f):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">@wraps</span><span style="color:#24292E;">(f)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorated_function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">            template_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> template_name </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                template_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">request.endpoint.replace(</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">.html&quot;</span></span>
<span class="line"><span style="color:#24292E;">            ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ctx </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ctx</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(template_name, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">ctx)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> decorated_function</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> decorator</span></span></code></pre></div><h2 id="endpoint-decorator" tabindex="-1">Endpoint Decorator <a class="header-anchor" href="#endpoint-decorator" aria-label="Permalink to &quot;Endpoint Decorator {#endpoint-decorator}&quot;">​</a></h2><p>When you want to use the werkzeug routing system for more flexibility you need to map the endpoint as defined in the <code>Rule</code> to a view function. This is possible with this decorator. For example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Flask</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> werkzeug.routing </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Rule</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.url_map.add(Rule(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">endpoint</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;index&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.endpoint</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;index&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_index</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello world&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Flask</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> werkzeug.routing </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Rule</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">app.url_map.add(Rule(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">endpoint</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;index&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.endpoint</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;index&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_index</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello world&quot;</span></span></code></pre></div>`,26),e=[p];function t(r,c,y,E,i,d){return a(),n("div",null,e)}const F=s(l,[["render",t]]);export{h as __pageData,F as default};
