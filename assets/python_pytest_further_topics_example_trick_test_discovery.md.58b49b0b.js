import{_ as s,o as n,c as a,X as l}from"./chunks/framework.6e839c56.js";const d=JSON.parse('{"title":"Changing standard (Python) test discovery","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/further_topics/example_trick/test_discovery.md","filePath":"python/pytest/further_topics/example_trick/test_discovery.md","lastUpdated":1692807718000}'),o={name:"python/pytest/further_topics/example_trick/test_discovery.md"},e=l(`<h1 id="changing-standard-python-test-discovery" tabindex="-1">Changing standard (Python) test discovery <a class="header-anchor" href="#changing-standard-python-test-discovery" aria-label="Permalink to &quot;Changing standard (Python) test discovery {#changing-standard-python-test-discovery}&quot;">​</a></h1><h2 id="ignore-paths-during-test-collection" tabindex="-1">Ignore paths during test collection <a class="header-anchor" href="#ignore-paths-during-test-collection" aria-label="Permalink to &quot;Ignore paths during test collection {#ignore-paths-during-test-collection}&quot;">​</a></h2><p>You can easily ignore certain test directories and modules during collection by passing the <code>--ignore=path</code> option on the cli. <code>pytest</code> allows multiple <code>--ignore</code> options. Example:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tests/</span></span>
<span class="line"><span style="color:#A6ACCD;">|-- example</span></span>
<span class="line"><span style="color:#A6ACCD;">|   |-- test_example_01.py</span></span>
<span class="line"><span style="color:#A6ACCD;">|   |-- test_example_02.py</span></span>
<span class="line"><span style="color:#A6ACCD;">|   &#39;-- test_example_03.py</span></span>
<span class="line"><span style="color:#A6ACCD;">|-- foobar</span></span>
<span class="line"><span style="color:#A6ACCD;">|   |-- test_foobar_01.py</span></span>
<span class="line"><span style="color:#A6ACCD;">|   |-- test_foobar_02.py</span></span>
<span class="line"><span style="color:#A6ACCD;">|   &#39;-- test_foobar_03.py</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;-- hello</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;-- world</span></span>
<span class="line"><span style="color:#A6ACCD;">        |-- test_world_01.py</span></span>
<span class="line"><span style="color:#A6ACCD;">        |-- test_world_02.py</span></span>
<span class="line"><span style="color:#A6ACCD;">        &#39;-- test_world_03.py</span></span></code></pre></div><p>Now if you invoke <code>pytest</code> with <code>--ignore=tests/foobar/test_foobar_03.py --ignore=tests/hello/</code>, you will see that <code>pytest</code> only collects test-modules, which do not match the patterns specified:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-5.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">py-1.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-0.x.y</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> $REGENDOC_TMPDIR</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inifile:</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">tests/example/test_example_01.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;">                                   [ </span><span style="color:#F78C6C;">20</span><span style="color:#C3E88D;">%]</span></span>
<span class="line"><span style="color:#FFCB6B;">tests/example/test_example_02.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;">                                   [ </span><span style="color:#F78C6C;">40</span><span style="color:#C3E88D;">%]</span></span>
<span class="line"><span style="color:#FFCB6B;">tests/example/test_example_03.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;">                                   [ </span><span style="color:#F78C6C;">60</span><span style="color:#C3E88D;">%]</span></span>
<span class="line"><span style="color:#FFCB6B;">tests/foobar/test_foobar_01.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;">                                     [ </span><span style="color:#F78C6C;">80</span><span style="color:#C3E88D;">%]</span></span>
<span class="line"><span style="color:#FFCB6B;">tests/foobar/test_foobar_02.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;">                                     [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">========================= </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">passed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.02</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">seconds</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=========================</span></span></code></pre></div><p>The <code>--ignore-glob</code> option allows to ignore test file paths based on Unix shell-style wildcards. If you want to exclude test-modules that end with <code>_01.py</code>, execute <code>pytest</code> with <code>--ignore-glob=&#39;*_01.py&#39;</code>.</p><h2 id="deselect-tests-during-test-collection" tabindex="-1">Deselect tests during test collection <a class="header-anchor" href="#deselect-tests-during-test-collection" aria-label="Permalink to &quot;Deselect tests during test collection {#deselect-tests-during-test-collection}&quot;">​</a></h2><p>Tests can individually be deselected during collection by passing the <code>--deselect=item</code> option. For example, say <code>tests/foobar/test_foobar_01.py</code> contains <code>test_a</code> and <code>test_b</code>. You can run all of the tests within <code>tests/</code> except for <code>tests/foobar/test_foobar_01.py::test_a by</code> invoking pytest with <code>--deselect tests/foobar/test_foobar_01.py::test_a. pytest</code> allows multiple <code>--deselect</code> options.</p><h2 id="keeping-duplicate-paths-specified-from-command-line" tabindex="-1">Keeping duplicate paths specified from command line <a class="header-anchor" href="#keeping-duplicate-paths-specified-from-command-line" aria-label="Permalink to &quot;Keeping duplicate paths specified from command line {#keeping-duplicate-paths-specified-from-command-line}&quot;">​</a></h2><p>Default behavior of <code>pytest</code> is to ignore duplicate paths specified from the command line. Example:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">path_a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">path_a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">...</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">item</span></span>
<span class="line"><span style="color:#82AAFF;">...</span></span></code></pre></div><p>Just collect tests once.</p><p>To collect duplicate tests, use the <code>--keep-duplicates</code> option on the cli. Example:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--keep-duplicates</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">path_a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">path_a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">...</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"><span style="color:#82AAFF;">...</span></span></code></pre></div><p>As the collector just works on directories, if you specify twice a single test file, <code>pytest</code> will still collect it twice, no matter if the <code>--keep-duplicates</code> is not specified. Example:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_a.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_a.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">...</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"><span style="color:#82AAFF;">...</span></span></code></pre></div><h2 id="changing-directory-recursion" tabindex="-1">Changing directory recursion <a class="header-anchor" href="#changing-directory-recursion" aria-label="Permalink to &quot;Changing directory recursion {#changing-directory-recursion}&quot;">​</a></h2><p>You can set the <code>norecursedirs</code> option in an ini-file, for example your <code>pytest.ini</code> in the project root directory:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">norecursedirs</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> .svn _build tmp*</span></span></code></pre></div><p>This would tell <code>pytest</code> to not recurse into typical subversion or sphinx-build directories or into any <code>tmp</code> prefixed directory.</p><h2 id="changing-naming-conventions" tabindex="-1">Changing naming conventions <a class="header-anchor" href="#changing-naming-conventions" aria-label="Permalink to &quot;Changing naming conventions {#changing-naming-conventions}&quot;">​</a></h2><p>You can configure different naming conventions by setting the <code>python_files</code>, <code>python_classes</code> and <code>python_functions</code> in your configuration file. Here is an example:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Example 1: have pytest look for &quot;check&quot; instead of &quot;test&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">python_files</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> check_*.py</span></span>
<span class="line"><span style="color:#F07178;">python_classes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Check</span></span>
<span class="line"><span style="color:#F07178;">python_functions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> *_check</span></span></code></pre></div><p>This would make <code>pytest</code> look for tests in files that match the <code>check_* .py</code> glob-pattern, <code>Check</code> prefixes in classes, and functions and methods that match <code>*_check</code>. For example, if we have:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of check_myapp.py</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CheckMyApp</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">simple_check</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">complex_check</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">pass</span></span></code></pre></div><p>The test collection would look like this:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--collect-only</span></span>
<span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-7.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/sweet/project</span></span>
<span class="line"><span style="color:#FFCB6B;">configfile:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest.ini</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Module check_myapp.py</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Class</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CheckMyAp</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">simple_chec</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">complex_chec</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">======================== </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tests</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">========================</span></span></code></pre></div><p>You can check for multiple glob patterns by adding a space between the patterns:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Example 2: have pytest look for files with &quot;test&quot; and &quot;example&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">python_files</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> test_*.py example_*.py</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>the <code>python_functions</code> and <code>python_classes</code> options has no effect for <code>unittest.TestCase</code> test discovery because pytest delegates discovery of test case methods to unittest code.</p></div><h2 id="interpreting-cmdline-arguments-as-python-packages" tabindex="-1">Interpreting cmdline arguments as Python packages <a class="header-anchor" href="#interpreting-cmdline-arguments-as-python-packages" aria-label="Permalink to &quot;Interpreting cmdline arguments as Python packages {#interpreting-cmdline-arguments-as-python-packages}&quot;">​</a></h2><p>You can use the <code>--pyargs</code> option to make <code>pytest</code> try interpreting arguments as python package names, deriving their file system path and then running the test. For example if you have unittest2 installed you can type:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--pyargs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">unittest2.test.test_skipping</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-q</span></span></code></pre></div><p>which would run the respective test module. Like with other options, through an ini-file and the <code>addopts</code> option you can make this change more permanently:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">addopts</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> --pyargs</span></span></code></pre></div><p>Now a simple invocation of <code>pytest NAME</code> will check if NAME exists as an importable package/module and otherwise treat it as a filesystem path.</p><h2 id="finding-out-what-is-collected" tabindex="-1">Finding out what is collected <a class="header-anchor" href="#finding-out-what-is-collected" aria-label="Permalink to &quot;Finding out what is collected {#finding-out-what-is-collected}&quot;">​</a></h2><p>You can always peek at the collection tree without running tests like this:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;"> $ </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--collect-only</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pythoncollection.py</span></span>
<span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-7.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/sweet/project</span></span>
<span class="line"><span style="color:#FFCB6B;">configfile:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest.ini</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Module CWD/pythoncollection.py</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_functio</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Class</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TestClas</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_metho</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_anothermetho</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">======================== </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tests</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">========================</span></span></code></pre></div><h2 id="customizing-test-collection" tabindex="-1">Customizing test collection <a class="header-anchor" href="#customizing-test-collection" aria-label="Permalink to &quot;Customizing test collection {#customizing-test-collection}&quot;">​</a></h2><p>You can easily instruct pytest to discover tests from every Python file:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">python_files</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> *.py</span></span></code></pre></div><p>However, many projects will have a <code>setup.py</code> which they don’t want to be imported. Moreover, there may files only importable by a specific python version. For such cases you can dynamically define files to be ignored by listing them in a <code>conftest.py</code> file:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of conftest.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">collect_ignore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setup.py</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">version_info</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    collect_ignore</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pkg/module_py2.py</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>and then if you have a module file like this:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pkg/module_py2.py</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_only_on_python2</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">except</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Exception</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">pass</span></span></code></pre></div><p>and a <code>setup.py</code> dummy file like this:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of setup.py</span></span>
<span class="line"><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># will raise exception if imported</span></span></code></pre></div><p>If you run with a Python 2 interpreter then you will find the one test and will leave out the <code>setup.py</code> file:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#$ pytest --collect-only</span></span>
<span class="line"><span style="color:#A6ACCD;">====== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">======</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.7</span><span style="color:#C3E88D;">.10,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-2.9.1,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">py-1.4.31,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-0.3.1</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> $REGENDOC_TMPDIR</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inifile:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest.ini</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Module </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pkg/module_py2.py</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test_only_on_python2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">====== </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tests</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">found</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.04</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">seconds</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">======</span></span></code></pre></div><p>If you run with a Python 3 interpreter both the one test and the <code>setup.py</code> file will be left out:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--collect-only</span></span>
<span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-7.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/sweet/project</span></span>
<span class="line"><span style="color:#FFCB6B;">configfile:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest.ini</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">======================= </span><span style="color:#C3E88D;">no</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tests</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">========================</span></span></code></pre></div><p>It’s also possible to ignore files based on Unix shell-style wildcards by adding patterns to <code>collect_ignore_glob</code>.</p><p>The following example <code>conftest.py</code> ignores the file <code>setup.py</code> and in addition all files that end with <code>*_py2.py</code> when executed with a Python 3 interpreter:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of conftest.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">collect_ignore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setup.py</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">version_info</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    collect_ignore_glob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*_py2.py</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></code></pre></div><p>Since Pytest 2.6, users can prevent pytest from discovering classes that start with <code>Test</code> by setting a boolean <code>__test__</code> attribute to <code>False</code>.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Will not be discovered as a test</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestClass</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    __test__ </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span></code></pre></div>`,58),p=[e];function t(c,r,y,i,C,D){return n(),a("div",null,p)}const F=s(o,[["render",t]]);export{d as __pageData,F as default};
