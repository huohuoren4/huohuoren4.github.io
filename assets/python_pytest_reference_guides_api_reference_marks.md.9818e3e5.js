import{_ as s,o as e,c as a,Q as t}from"./chunks/framework.01af844e.js";const m=JSON.parse('{"title":"Marks","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/reference_guides/api_reference/marks.md","filePath":"python/pytest/reference_guides/api_reference/marks.md","lastUpdated":1692807718000}'),o={name:"python/pytest/reference_guides/api_reference/marks.md"},n=t(`<h1 id="marks" tabindex="-1">Marks <a class="header-anchor" href="#marks" aria-label="Permalink to &quot;Marks {#marks}&quot;">​</a></h1><p>Marks can be used apply meta data to test functions (but not fixtures), which can then be accessed by fixtures or plugins.</p><h2 id="pytest-mark-filterwarnings" tabindex="-1">pytest.mark.filterwarnings <a class="header-anchor" href="#pytest-mark-filterwarnings" aria-label="Permalink to &quot;pytest.mark.filterwarnings {#pytest-mark-filterwarnings}&quot;">​</a></h2><p><em>Tutorial</em>: <a href="/python/pytest/how_to_guides/warning#pytest-mark-filterwarnings">@pytest.mark.filterwarnings</a></p><p>Add warning filters to marked test items.</p><ul><li><p><strong>pytest.mark.filterwarnings</strong>(<code>filter</code>)</p><p><em>Parameters</em>:</p><ul><li><code>filter (str)</code> – A warning specification string, which is composed of contents of the tuple <code>(action, message, category, module, lineno)</code> as specified in The Warnings Filter section of the Python documentation, separated by <code>&quot;:&quot;</code>. Optional fields can be omitted. Module names passed for filtering are not regex-escaped.</li></ul><p><em>For example</em>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@pytest.mark.filterwarnings(</span><span style="color:#B392F0;">&quot;ignore:.*usage will be deprecated.*:DeprecationWarning&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_foo</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@pytest.mark.filterwarnings(</span><span style="color:#6F42C1;">&quot;ignore:.*usage will be deprecated.*:DeprecationWarning&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_foo</span><span style="color:#24292E;">()</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span></code></pre></div></li></ul><h2 id="pytest-mark-parametrize" tabindex="-1">pytest.mark.parametrize <a class="header-anchor" href="#pytest-mark-parametrize" aria-label="Permalink to &quot;pytest.mark.parametrize {#pytest-mark-parametrize}&quot;">​</a></h2><p><em>Tutorial</em>: <a href="/python/pytest/how_to_guides/params_fixture#how-to-parametrize-fixtures-and-test-functions">How to parametrize fixtures and test functions</a></p><p>This mark has the same signature as <code>pytest.Metafunc.parametrize()</code>; see there.</p><h2 id="pytest-mark-skip" tabindex="-1">pytest.mark.skip <a class="header-anchor" href="#pytest-mark-skip" aria-label="Permalink to &quot;pytest.mark.skip {#pytest-mark-skip}&quot;">​</a></h2><p><em>Tutorial</em>: <a href="/python/pytest/how_to_guides/skip_xfail#skipping-test-functions">Skipping test functions</a></p><p>Unconditionally skip a test function.</p><ul><li><p><strong>pytest.mark.skip</strong>(<code>reason=None</code>)</p><p><em>Parameters</em>:</p><ul><li><code>reason (str)</code> – Reason why the test function is being skipped.</li></ul></li></ul><h2 id="pytest-mark-skipif" tabindex="-1">pytest.mark.skipif <a class="header-anchor" href="#pytest-mark-skipif" aria-label="Permalink to &quot;pytest.mark.skipif {#pytest-mark-skipif}&quot;">​</a></h2><p><em>Tutorial</em>: <a href="/python/pytest/how_to_guides/skip_xfail#skipping-test-functions">Skipping test functions</a></p><p>Skip a test function if a condition is <code>True</code>.</p><ul><li><p><strong>pytest.mark.skipif</strong>(<code>condition, *, reason=None</code>)</p><p><em>Parameters</em>:</p><ul><li><p><code>condition (bool or str)</code> – <code>True/False</code> if the condition should be skipped or a <a href="/python/pytest/further_topics/historical_note#conditions-as-strings-instead-of-booleans">condition string</a>.</p></li><li><p><code>reason (str)</code> – Reason why the test function is being skipped.</p></li></ul></li></ul><h2 id="pytest-mark-usefixtures" tabindex="-1">pytest.mark.usefixtures <a class="header-anchor" href="#pytest-mark-usefixtures" aria-label="Permalink to &quot;pytest.mark.usefixtures {#pytest-mark-usefixtures}&quot;">​</a></h2><p><em>Tutorial</em>: <a href="/python/pytest/how_to_guides/fixture#use-fixtures-in-classes-and-modules-with-usefixtures">Use fixtures in classes and modules with usefixtures</a></p><p>Mark a test function as using the given fixture names.</p><ul><li><p><strong>pytest.mark.usefixtures</strong>(<code>*names</code>)</p><p><em>Parameters</em>:</p><ul><li><code>args</code> – The names of the fixture to use, as strings.</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">Note</p><p>When using <code>usefixtures</code> in hooks, it can only load fixtures when applied to a test function before test setup (for example in the <code>pytest_collection_modifyitems</code> hook).</p><p>Also note that this mark has no effect when applied to fixtures.</p></div><h2 id="pytest-mark-xfail" tabindex="-1">pytest.mark.xfail <a class="header-anchor" href="#pytest-mark-xfail" aria-label="Permalink to &quot;pytest.mark.xfail {#pytest-mark-xfail}&quot;">​</a></h2><p><em>Tutorial</em>: <a href="/python/pytest/how_to_guides/skip_xfail#xfail-mark-test-functions-as-expected-to-fail">XFail: mark test functions as expected to fail</a></p><p>Marks a test function as expected to fail.</p><ul><li><p><strong>pytest.mark.xfail</strong>(<code>condition=None, *, reason=None, raises=None, run=True, strict=False</code>)</p><p><em>Parameters</em>:</p><ul><li><p><code>condition (bool or str)</code> – Condition for marking the test function as xfail (<code>True/False</code> or a <a href="/python/pytest/further_topics/historical_note#conditions-as-strings-instead-of-booleans">condition string</a>). If a bool, you also have to specify <code>reason</code> (see <a href="/python/pytest/further_topics/historical_note#conditions-as-strings-instead-of-booleans">condition string</a>).</p></li><li><p><code>reason (str)</code> – Reason why the test function is marked as <code>xfail</code>.</p></li><li><p><code>raises (Type[Exception])</code> – Exception subclass (or tuple of subclasses) expected to be raised by the test function; other exceptions will fail the test.</p></li><li><p><code>run (bool)</code> – If the test function should actually be executed. If <code>False</code>, the function will always xfail and will not be executed (useful if a function is segfaulting).</p></li><li><p><code>strict (bool)</code> -</p><ul><li><p>If <code>False</code> (the default) the function will be shown in the terminal output as <code>xfailed</code> if it fails and as <code>xpass</code> if it passes. In both cases this will not cause the test suite to fail as a whole. This is particularly useful to mark flaky tests (tests that fail at random) to be tackled later.</p></li><li><p>If <code>True</code>, the function will be shown in the terminal output as <code>xfailed</code> if it fails, but if it unexpectedly passes then it will fail the test suite. This is particularly useful to mark functions that are always failing and there should be a clear indication if they unexpectedly start to pass (for example a new release of a library fixes a known bug).</p></li></ul></li></ul></li></ul><h2 id="custom-marks" tabindex="-1">Custom marks <a class="header-anchor" href="#custom-marks" aria-label="Permalink to &quot;Custom marks {#custom-marks}&quot;">​</a></h2><p>Marks are created dynamically using the factory object <code>pytest.mark</code> and applied as a decorator.</p><p><em>For example</em>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@pytest.mark.timeout</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;slow&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;thread&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_function</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@pytest.mark.timeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;slow&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;thread&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_function</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span></code></pre></div><p>Will create and attach a <code>Mark</code> object to the collected <code>Item</code>, which can then be accessed by fixtures or hooks with <code>Node.iter_markers</code>. The <code>mark</code> object will have the following attributes:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mark.args </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;slow&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">mark.kwargs </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;method&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;thread&quot;</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mark.args </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;slow&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">mark.kwargs </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;method&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;thread&quot;</span><span style="color:#24292E;">}</span></span></code></pre></div><p>Example for using multiple custom markers:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@pytest.mark.timeout</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;slow&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">method</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;thread&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.slow</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_function</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@pytest.mark.timeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;slow&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">method</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;thread&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.slow</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_function</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span></code></pre></div><p>When <code>Node.iter_markers</code> or <code>Node.iter_markers_with_node</code> is used with multiple markers, the marker closest to the function will be iterated over first. The above example will result in <code>@pytest.mark.slow</code> followed by <code>@pytest.mark.timeout(...)</code>.</p>`,35),p=[n];function l(r,i,c,d,u,y){return e(),a("div",null,p)}const f=s(o,[["render",l]]);export{m as __pageData,f as default};
