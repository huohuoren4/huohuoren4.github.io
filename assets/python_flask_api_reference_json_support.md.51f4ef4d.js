import{_ as e,o as a,c as s,Q as o}from"./chunks/framework.01af844e.js";const g=JSON.parse('{"title":"JSON Support","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/api_reference/json_support.md","filePath":"python/flask/api_reference/json_support.md","lastUpdated":1693404008000}'),l={name:"python/flask/api_reference/json_support.md"},t=o('<h1 id="json-support" tabindex="-1">JSON Support <a class="header-anchor" href="#json-support" aria-label="Permalink to &quot;JSON Support {#json-support}&quot;">​</a></h1><p>Flask uses Python’s built-in <code>json</code> module for handling JSON by default. The JSON implementation can be changed by assigning a different provider to <code>flask.Flask.json_provider_class</code> or <code>flask.Flask.json</code>. The functions provided by <code>flask.json</code> will use methods on <code>app.json</code> if an app context is active.</p><p>Jinja’s <code>|tojson</code> filter is configured to use the app’s JSON provider. The filter marks the output with <code>|safe</code>. Use it to render data inside HTML <code>&lt;script&gt;</code> tags.</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">names</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {{ names</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">tojson }};</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">renderChart</span><span style="color:#E1E4E8;">(names, {{ axis_data</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">tojson }});</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">names</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {{ names</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">tojson }};</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">renderChart</span><span style="color:#24292E;">(names, {{ axis_data</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">tojson }});</span></span>\n<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="flask-json-jsonify-args-kwargs" tabindex="-1">flask.json.jsonify(<code>*args, **kwargs</code>) <a class="header-anchor" href="#flask-json-jsonify-args-kwargs" aria-label="Permalink to &quot;flask.json.jsonify(`*args, **kwargs`)&quot;">​</a></h2><p>Serialize the given arguments as JSON, and return a <code>Response</code> object with the <code>application/json</code> mimetype. A dict or list returned from a view will be converted to a JSON response automatically without needing to call this.</p><p>This requires an active request or application context, and calls <code>app.json.response()</code>.</p><p>In debug mode, the output is formatted with indentation to make it easier to read. This may also be controlled by the provider.</p><p>Either positional or keyword arguments can be given, not both. If no arguments are given, <code>None</code> is serialized.</p><p><em>Parameters</em>:</p><ul><li><p><code>args (t.Any)</code> – A single value to serialize, or multiple values to treat as a list to serialize.</p></li><li><p><code>kwargs (t.Any) </code>– Treat as a dict to serialize.</p></li></ul><p><em>Return type</em>: <code>Response</code></p><details class="details custom-block"><summary>Changelog</summary><p><em>Changed in version 2.2</em>: Calls <code>current_app.json.response</code>, allowing an app to override the behavior.</p><p><em>Changed in version 2.0.2</em>: <code>decimal.Decimal</code> is supported by converting to a string.</p><p><em>Changed in version 0.11</em>: Added support for serializing top-level arrays. This was a security risk in ancient browsers. See <a href="/python/flask/user_guide/security#json-security">JSON Security</a>.</p><p><em>New in version 0.2.</em></p></details><h2 id="flask-json-dumps-obj-kwargs" tabindex="-1">flask.json.dumps(<code>obj, **kwargs</code>) <a class="header-anchor" href="#flask-json-dumps-obj-kwargs" aria-label="Permalink to &quot;flask.json.dumps(`obj, **kwargs`)&quot;">​</a></h2><p>Serialize data as <code>JSON</code>.</p><p>If <code>current_app</code> is available, it will use its <code>app.json.dumps()</code> method, otherwise it will use <code>json.dumps()</code>.</p><p><em>Parameters</em>:</p><ul><li><p><code>obj (Any)</code> – The data to serialize.</p></li><li><p>kwargs (Any) – Arguments passed to the dumps implementation.</p></li></ul><p><em>Return type</em>: <code>str</code></p><p><em>Changed in version 2.3</em>: The <code>app</code> parameter was removed.</p><details class="details custom-block"><summary>Changelog</summary><p><em>Changed in version 2.2</em>: Calls <code>current_app.json.dumps</code>, allowing an <code>app</code> to override the behavior.</p><p><em>Changed in version 2.0.2</em>: <code>decimal.Decimal</code> is supported by converting to a string.</p><p><em>Changed in version 2.0</em>: encoding will be removed in <code>Flask 2.1</code>.</p><p><em>Changed in version 1.0.3</em>: <code>app</code> can be passed directly, rather than requiring an <code>app</code> context for configuration.</p></details><h2 id="flask-json-dump-obj-fp-kwargs" tabindex="-1">flask.json.dump(<code>obj, fp, **kwargs</code>) <a class="header-anchor" href="#flask-json-dump-obj-fp-kwargs" aria-label="Permalink to &quot;flask.json.dump(`obj, fp, **kwargs`)&quot;">​</a></h2><p>Serialize data as <code>JSON</code> and write to a file.</p><p>If <code>current_app</code> is available, it will use its <code>app.json.dump()</code> method, otherwise it will <code>use json.dump()</code>.</p><p><em>Parameters</em>:</p><ul><li><p><code>obj (Any)</code> – The data to serialize.</p></li><li><p><code>fp (IO[str])</code> – A file opened for writing text. Should use the <code>UTF-8</code> encoding to be valid <code>JSON</code>.</p></li><li><p><code>kwargs (Any)</code> – Arguments passed to the dump implementation.</p></li></ul><p><em>Return type</em>: <code>None</code></p><p><em>Changed in version 2.3</em>: The app parameter was removed.</p><details class="details custom-block"><summary>Changelog</summary><p><em>Changed in version 2.2</em>: Calls <code>current_app.json.dump</code>, allowing an <code>app</code> to override the behavior.</p><p><em>Changed in version 2.0</em>: Writing to a binary file, and the encoding argument, will be removed in <code>Flask 2.1</code>.</p></details><h2 id="flask-json-loads-s-kwargs" tabindex="-1">flask.json.loads(<code>s, **kwargs</code>) <a class="header-anchor" href="#flask-json-loads-s-kwargs" aria-label="Permalink to &quot;flask.json.loads(`s, **kwargs`)&quot;">​</a></h2><p>Deserialize data as <code>JSON</code>.</p><p>If <code>current_app</code> is available, it will use its <code>app.json.loads()</code> method, otherwise it will use <code>json.loads()</code>.</p><p><em>Parameters</em>:</p><ul><li><p><code>s (str | bytes)</code> – Text or <code>UTF-8</code> bytes.</p></li><li><p><code>kwargs (Any)</code> – Arguments passed to the loads implementation.</p></li></ul><p><em>Return type</em>: <code>Any</code></p><p><em>Changed in version 2.3</em>: The <code>app</code> parameter was removed.</p><details class="details custom-block"><summary>Changelog</summary><p><em>Changed in version 2.2</em>: Calls <code>current_app.json.loads</code>, allowing an <code>app</code> to override the behavior.</p><p><em>Changed in version 2.0</em>: encoding will be removed in <code>Flask 2.1</code>. The data must be a string or <code>UTF-8</code> bytes.</p><p><em>Changed in version 1.0.3</em>: <code>app</code> can be passed directly, rather than requiring an <code>app</code> context for configuration.</p></details><h2 id="flask-json-load-fp-kwargs" tabindex="-1">flask.json.load(<code>fp, **kwargs</code>) <a class="header-anchor" href="#flask-json-load-fp-kwargs" aria-label="Permalink to &quot;flask.json.load(`fp, **kwargs`)&quot;">​</a></h2><p>Deserialize data as JSON read from a file.</p><p>If <code>current_app</code> is available, it will use its <code>app.json.load()</code> method, otherwise it will use <code>json.load()</code>.</p><p><em>Parameters</em>:</p><ul><li><p><code>fp (IO)</code> – A file opened for reading text or <code>UTF-8</code> bytes.</p></li><li><p><code>kwargs (Any)</code> – Arguments passed to the load implementation.</p></li></ul><p><em>Return type</em>: <code>Any</code></p><p>Changed in version 2.3: The app parameter was removed.</p><details class="details custom-block"><summary>Changelog</summary><p><em>Changed in version 2.2</em>: Calls <code>current_app.json.load</code>, allowing an app to override the behavior.</p><p><em>Changed in version 2.2</em>: The <code>app</code> parameter will be removed in <code>Flask 2.3</code>.</p><p><em>Changed in version 2.0</em>: encoding will be removed in <code>Flask 2.1</code>. The file must be text mode, or binary mode with <code>UTF-8</code> bytes.</p></details><h2 id="class-flask-json-provider-jsonprovider-app" tabindex="-1"><code>class</code> flask.json.provider.JSONProvider(<code>app</code>) <a class="header-anchor" href="#class-flask-json-provider-jsonprovider-app" aria-label="Permalink to &quot;`class` flask.json.provider.JSONProvider(`app`)&quot;">​</a></h2><p>A standard set of JSON operations for an application. Subclasses of this can be used to customize JSON behavior or use different JSON libraries.</p><p>To implement a provider for a specific library, subclass this base class and implement at least <code>dumps()</code> and <code>loads()</code>. All other methods have default implementations.</p><p>To use a different provider, either subclass <code>Flask</code> and set <code>json_provider_class</code> to a provider class, or set <code>app.json</code> to an instance of the class.</p><ul><li><p><em>Parameters</em>:</p><ul><li><code>app (Flask)</code> – An application instance. This will be stored as a <code>weakref.proxy</code> on the <code>_app</code> attribute.</li></ul></li></ul><details class="details custom-block"><summary>Changelog</summary><p><em>New in version 2.2.</em></p></details><ul><li><h3 id="dumps-obj-kwargs" tabindex="-1">dumps(<code>obj, **kwargs</code>) <a class="header-anchor" href="#dumps-obj-kwargs" aria-label="Permalink to &quot;dumps(`obj, **kwargs`)&quot;">​</a></h3><p>Serialize data as <code>JSON</code>.</p><p><em>Parameters</em>:</p><ul><li><p><code>obj (Any)</code> – The data to serialize.</p></li><li><p><code>kwargs (Any)</code> – May be passed to the underlying JSON library.</p></li></ul><p><em>Return type</em>: <code>str</code></p></li><li><h3 id="dump-obj-fp-kwargs" tabindex="-1">dump(obj, fp, **kwargs) <a class="header-anchor" href="#dump-obj-fp-kwargs" aria-label="Permalink to &quot;dump(obj, fp, **kwargs)&quot;">​</a></h3><p>Serialize data as JSON and write to a file.</p><p><em>Parameters</em>:</p><ul><li><p><code>obj (Any)</code> – The data to serialize.</p></li><li><p><code>fp (IO[str])</code> – A file opened for writing text. Should use the <code>UTF-8</code> encoding to be valid JSON.</p></li><li><p><code>kwargs (Any)</code> – May be passed to the underlying JSON library.</p></li></ul><p><em>Return type</em>: <code>None</code></p></li><li><h3 id="loads-s-kwargs" tabindex="-1">loads(<code>s, **kwargs</code>) <a class="header-anchor" href="#loads-s-kwargs" aria-label="Permalink to &quot;loads(`s, **kwargs`)&quot;">​</a></h3><p>Deserialize data as JSON.</p><p><em>Parameters</em>:</p><ul><li><p><code>s (str | bytes)</code> – Text or <code>UTF-8</code> bytes.</p></li><li><p><code>kwargs (Any)</code> – May be passed to the underlying JSON library.</p></li></ul><p><em>Return type</em>: <code>Any</code></p></li><li><h3 id="load-fp-kwargs" tabindex="-1">load(<code>fp, **kwargs</code>) <a class="header-anchor" href="#load-fp-kwargs" aria-label="Permalink to &quot;load(`fp, **kwargs`)&quot;">​</a></h3><p>Deserialize data as <code>JSON</code> read from a file.</p><p><em>Parameters</em>:</p><p><code>fp (IO)</code> – A file opened for reading text or UTF-8 bytes.</p><p><code>kwargs (Any)</code> – May be passed to the underlying JSON library.</p><p><em>Return type</em>: <code>Any</code></p></li><li><h3 id="response-args-kwargs" tabindex="-1">response(<code>*args, **kwargs</code>) <a class="header-anchor" href="#response-args-kwargs" aria-label="Permalink to &quot;response(`*args, **kwargs`)&quot;">​</a></h3><p>Serialize the given arguments as JSON, and return a <code>Response</code> object with the <code>application/json</code> mimetype.</p><p>The <code>jsonify()</code> function calls this method for the current application.</p><p>Either positional or keyword arguments can be given, not both. If no arguments are given, <code>None</code> is serialized.</p><p><em>Parameters</em>:</p><p><code>args (t.Any)</code> – A single value to serialize, or multiple values to treat as a list to serialize.</p><p><code>kwargs (t.Any) </code>– Treat as a dict to serialize.</p><p><em>Return type</em>: <code>Response</code></p></li></ul><h2 id="class-flask-json-provider-defaultjsonprovider-app" tabindex="-1"><code>class</code> flask.json.provider.DefaultJSONProvider(<code>app</code>) <a class="header-anchor" href="#class-flask-json-provider-defaultjsonprovider-app" aria-label="Permalink to &quot;`class` flask.json.provider.DefaultJSONProvider(`app`)&quot;">​</a></h2><p>Provide <code>JSON</code> operations using Python’s built-in <code>json</code> library. Serializes the following additional data types:</p><ol><li><p><code>datetime.datetime</code> and <code>datetime.date</code> are serialized to <code>RFC 822</code> strings. This is the same as the <code>HTTP</code> date format.</p></li><li><p><code>uuid.UUID</code> is serialized to a string.</p></li><li><p><code>dataclasses.dataclass</code> is passed to <code>dataclasses.asdict()</code>.</p></li><li><p><code>Markup</code> (or any object with a <code>__html__</code> method) will call the <code>__html__</code> method to get a string.</p></li></ol><ul><li><p><em>Parameters</em>:</p><ul><li><code>app (Flask)</code> –</li></ul></li><li><h3 id="static-default-o" tabindex="-1"><code>static</code> default(<code>o</code>) <a class="header-anchor" href="#static-default-o" aria-label="Permalink to &quot;`static` default(`o`)&quot;">​</a></h3><p>Apply this function to any object that <code>json.dumps()</code> does not know how to serialize. It should return a valid <code>JSON</code> type or raise a <code>TypeError</code>.</p><p><em>Parameters</em>:</p><ul><li><code>o (Any)</code> –</li></ul><p><em>Return type</em>: <code>Any</code></p></li><li><h3 id="ensure-ascii-true" tabindex="-1">ensure_ascii = <code>True</code> <a class="header-anchor" href="#ensure-ascii-true" aria-label="Permalink to &quot;ensure_ascii = `True`&quot;">​</a></h3><p>Replace non-ASCII characters with escape sequences. This may be more compatible with some clients, but can be disabled for better performance and size.</p></li><li><h3 id="sort-keys-true" tabindex="-1">sort_keys = <code>True</code> <a class="header-anchor" href="#sort-keys-true" aria-label="Permalink to &quot;sort_keys = `True`&quot;">​</a></h3><p>Sort the keys in any serialized dicts. This may be useful for some caching situations, but can be disabled for better performance. When enabled, keys must all be strings, they are not converted before sorting.</p></li><li><h3 id="compact-bool-none-none" tabindex="-1">compact: <code>bool | None = None</code> <a class="header-anchor" href="#compact-bool-none-none" aria-label="Permalink to &quot;compact: `bool | None = None`&quot;">​</a></h3><p>If <code>True</code>, or <code>None</code> out of debug mode, the <code>response()</code> output will not add indentation, newlines, or spaces. If <code>False</code>, or <code>None</code> in debug mode, it will use a non-compact representation.</p></li><li><h3 id="mimetype-application-json" tabindex="-1">mimetype = <code>&#39;application/json&#39;</code> <a class="header-anchor" href="#mimetype-application-json" aria-label="Permalink to &quot;mimetype = `&#39;application/json&#39;`&quot;">​</a></h3><p>The mimetype set in <code>response()</code>.</p></li><li><h3 id="dumps-obj-kwargs-1" tabindex="-1">dumps(<code>obj, **kwargs</code>) <a class="header-anchor" href="#dumps-obj-kwargs-1" aria-label="Permalink to &quot;dumps(`obj, **kwargs`)&quot;">​</a></h3><p>Serialize data as <code>JSON</code> to a string.</p><p>Keyword arguments are passed to <code>json.dumps()</code>. Sets some parameter defaults from the default, <code>ensure_ascii</code>, and <code>sort_keys</code> attributes.</p><p><em>Parameters</em>:</p><ul><li><p><code>obj (Any)</code> – The data to serialize.</p></li><li><p><code>kwargs (Any)</code> – Passed to json.dumps().</p></li></ul><p><em>Return type</em>: <code>str</code></p></li><li><h3 id="loads-s-kwargs-1" tabindex="-1">loads(<code>s, **kwargs</code>) <a class="header-anchor" href="#loads-s-kwargs-1" aria-label="Permalink to &quot;loads(`s, **kwargs`)&quot;">​</a></h3><p>Deserialize data as <code>JSON</code> from a string or bytes.</p><p><em>Parameters</em>:</p><ul><li><p><code>s (str | bytes)</code> – Text or <code>UTF-8</code> bytes.</p></li><li><p><code>kwargs (Any)</code> – Passed to <code>json.loads()</code>.</p></li></ul><p><em>Return type</em>: <code>Any</code></p></li><li><h3 id="response-args-kwargs-1" tabindex="-1">response(<code>*args, **kwargs</code>) <a class="header-anchor" href="#response-args-kwargs-1" aria-label="Permalink to &quot;response(`*args, **kwargs`)&quot;">​</a></h3><p>Serialize the given arguments as <code>JSON</code>, and return a <code>Response</code> object with it. The response mimetype will be <code>“application/json”</code> and can be changed with <code>mimetype</code>.</p><p>If compact is <code>False</code> or debug mode is enabled, the output will be formatted to be easier to read.</p><p>Either positional or keyword arguments can be given, not both. If no arguments are given, <code>None</code> is serialized.</p><p><em>Parameters</em>:</p><ul><li><p><code>args (t.Any)</code> – A single value to serialize, or multiple values to treat as a list to serialize.</p></li><li><p><code>kwargs (t.Any)</code> – Treat as a dict to serialize.</p></li></ul><p><em>Return type</em>: <code>Response</code></p></li></ul><h2 id="tagged-json" tabindex="-1">Tagged JSON <a class="header-anchor" href="#tagged-json" aria-label="Permalink to &quot;Tagged JSON&quot;">​</a></h2><p>A compact representation for lossless serialization of non-standard JSON types. <code>SecureCookieSessionInterface</code> uses this to serialize the session data, but it may be useful in other places. It can be extended to support other types.</p><h3 id="class-flask-json-tag-taggedjsonserializer" tabindex="-1"><code>class</code> flask.json.tag.TaggedJSONSerializer <a class="header-anchor" href="#class-flask-json-tag-taggedjsonserializer" aria-label="Permalink to &quot;`class` flask.json.tag.TaggedJSONSerializer&quot;">​</a></h3><p>Serializer that uses a tag system to compactly represent objects that are not <code>JSON</code> types. Passed as the intermediate serializer to <code>itsdangerous.Serializer</code>.</p><p>The following extra types are supported:</p><ol><li><p><code>dict</code></p></li><li><p><code>tuple</code></p></li><li><p><code>bytes</code></p></li><li><p><code>Markup</code></p></li><li><p><code>UUID</code></p></li><li><p><code>datetime</code></p></li></ol><ul><li><h4 id="default-tags-class-flask-json-tag-tagdict-class-flask-json-tag-passdict-class-flask-json-tag-tagtuple-class-flask-json-tag-passlist-class-flask-json-tag-tagbytes-class-flask-json-tag-tagmarkup-class-flask-json-tag-taguuid-class-flask-json-tag-tagdatetime" tabindex="-1">default_tags = <code>[&lt;class &#39;flask.json.tag.TagDict&#39;&gt;, &lt;class &#39;flask.json.tag.PassDict&#39;&gt;, &lt;class &#39;flask.json.tag.TagTuple&#39;&gt;, &lt;class &#39;flask.json.tag.PassList&#39;&gt;, &lt;class &#39;flask.json.tag.TagBytes&#39;&gt;, &lt;class &#39;flask.json.tag.TagMarkup&#39;&gt;, &lt;class &#39;flask.json.tag.TagUUID&#39;&gt;, &lt;class &#39;flask.json.tag.TagDateTime&#39;&gt;]</code> <a class="header-anchor" href="#default-tags-class-flask-json-tag-tagdict-class-flask-json-tag-passdict-class-flask-json-tag-tagtuple-class-flask-json-tag-passlist-class-flask-json-tag-tagbytes-class-flask-json-tag-tagmarkup-class-flask-json-tag-taguuid-class-flask-json-tag-tagdatetime" aria-label="Permalink to &quot;default_tags = `[&lt;class &#39;flask.json.tag.TagDict&#39;&gt;, &lt;class &#39;flask.json.tag.PassDict&#39;&gt;, &lt;class &#39;flask.json.tag.TagTuple&#39;&gt;, &lt;class &#39;flask.json.tag.PassList&#39;&gt;, &lt;class &#39;flask.json.tag.TagBytes&#39;&gt;, &lt;class &#39;flask.json.tag.TagMarkup&#39;&gt;, &lt;class &#39;flask.json.tag.TagUUID&#39;&gt;, &lt;class &#39;flask.json.tag.TagDateTime&#39;&gt;]`&quot;">​</a></h4><p>Tag classes to bind when creating the serializer. Other tags can be added later using <code>register()</code>.</p></li><li><h4 id="dumps-value" tabindex="-1">dumps(<code>value</code>) <a class="header-anchor" href="#dumps-value" aria-label="Permalink to &quot;dumps(`value`)&quot;">​</a></h4><p>Tag the value and dump it to a compact <code>JSON</code> string.</p><p><em>Parameters</em>:</p><ul><li><code>value (Any)</code> –</li></ul><p><em>Return type</em>: <code>str</code></p></li><li><h4 id="loads-value" tabindex="-1">loads(<code>value</code>) <a class="header-anchor" href="#loads-value" aria-label="Permalink to &quot;loads(`value`)&quot;">​</a></h4><p>Load data from a <code>JSON</code> string and deserialized any tagged objects.</p><p><em>Parameters</em>:</p><ul><li><code>value (str)</code> –</li></ul><p><em>Return type</em>: <code>Any</code></p></li><li><h4 id="register-tag-class-force-false-index-none" tabindex="-1">register(<code>tag_class, force=False, index=None</code>) <a class="header-anchor" href="#register-tag-class-force-false-index-none" aria-label="Permalink to &quot;register(`tag_class, force=False, index=None`)&quot;">​</a></h4><p>Register a new tag with this serializer.</p><p><em>Parameters</em>:</p><ul><li><p><code>tag_class (type[flask.json.tag.JSONTag])</code> – tag class to register. Will be instantiated with this serializer instance.</p></li><li><p><code>force (bool) </code>– overwrite an existing tag. If false (default), a <code>KeyError</code> is raised.</p></li><li><p><code>index (int | None)</code> – index to insert the new tag in the tag order. Useful when the new tag is a special case of an existing tag. If <code>None</code> (default), the tag is appended to the end of the order.</p></li></ul><p><em>Raises</em>:</p><p><code>KeyError</code> – if the tag key is already registered and <code>force</code> is not true.</p><p><em>Return type</em>: <code>None</code></p></li><li><h4 id="tag-value" tabindex="-1">tag(<code>value</code>) <a class="header-anchor" href="#tag-value" aria-label="Permalink to &quot;tag(`value`)&quot;">​</a></h4><p>Convert a value to a tagged representation if necessary.</p><p><em>Parameters</em>:</p><p><code>value (Any)</code> –</p><p><em>Return type</em>: <code>dict[str, Any]</code></p></li><li><h4 id="untag-value" tabindex="-1">untag(<code>value</code>) <a class="header-anchor" href="#untag-value" aria-label="Permalink to &quot;untag(`value`)&quot;">​</a></h4><p>Convert a tagged representation back to the original type.</p><p><em>Parameters</em>:</p><ul><li><code>value (dict[str, Any])</code> –</li></ul><p><em>Return type</em>: <code>Any</code></p></li><li><h4 id="class-flask-json-tag-jsontag-serializer" tabindex="-1"><code>class</code> flask.json.tag.JSONTag(<code>serializer</code>) <a class="header-anchor" href="#class-flask-json-tag-jsontag-serializer" aria-label="Permalink to &quot;`class` flask.json.tag.JSONTag(`serializer`)&quot;">​</a></h4><p>Base class for defining type tags for <code>TaggedJSONSerializer</code>.</p><p><em>Parameters</em>:</p><ul><li><code>serializer (TaggedJSONSerializer)</code> –</li></ul></li><li><h4 id="check-value" tabindex="-1">check(<code>value</code>) <a class="header-anchor" href="#check-value" aria-label="Permalink to &quot;check(`value`)&quot;">​</a></h4><p>Check if the given value should be tagged by this tag.</p><p><em>Parameters</em>:</p><ul><li><code>value (Any)</code> –</li></ul><p><em>Return type</em>: <code>bool</code></p></li><li><h4 id="key-str-none-none" tabindex="-1">key: <code>str | None = None</code> <a class="header-anchor" href="#key-str-none-none" aria-label="Permalink to &quot;key: `str | None = None`&quot;">​</a></h4><p>The tag to mark the serialized object with. If <code>None</code>, this tag is only used as an intermediate step during tagging.</p></li><li><h4 id="tag-value-1" tabindex="-1">tag(<code>value</code>) <a class="header-anchor" href="#tag-value-1" aria-label="Permalink to &quot;tag(`value`)&quot;">​</a></h4><p>Convert the value to a valid <code>JSON</code> type and add the tag structure around it.</p><p><em>Parameters</em>:</p><ul><li><code>value (Any)</code> –</li></ul><p><em>Return type</em>: <code>Any</code></p></li><li><h4 id="to-json-value" tabindex="-1">to_json(<code>value</code>) <a class="header-anchor" href="#to-json-value" aria-label="Permalink to &quot;to_json(`value`)&quot;">​</a></h4><p>Convert the Python object to an object that is a valid <code>JSON</code> type. The tag will be added later.</p><p><em>Parameters</em>:</p><ul><li><code>value (Any) </code>–</li></ul><p><em>Return type</em>: <code>Any</code></p></li><li><h4 id="to-python-value" tabindex="-1">to_python(<code>value</code>) <a class="header-anchor" href="#to-python-value" aria-label="Permalink to &quot;to_python(`value`)&quot;">​</a></h4><p>Convert the <code>JSON</code> representation back to the correct type. The tag will already be removed.</p><p><em>Parameters</em>:</p><ul><li><code>value (Any)</code> –</li></ul><p><em>Return type</em>: <code>Any</code></p></li></ul><p>Let’s see an example that adds support for <code>OrderedDict</code>. Dicts don’t have an order in <code>JSON</code>, so to handle this we will dump the items as a list of <code>[key, value]</code> pairs. Subclass <code>JSONTag</code> and give it the new key <code>&#39; od&#39;</code> to identify the type. The session serializer processes dicts first, so insert the new tag at the front of the order since <code>OrderedDict</code> must be processed before <code>dict</code>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask.json.tag </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> JSONTag</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TagOrderedDict</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">JSONTag</span><span style="color:#E1E4E8;">):</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">__slots__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;serializer&#39;</span><span style="color:#E1E4E8;">,)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39; od&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">check</span><span style="color:#E1E4E8;">(self, value):</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(value, OrderedDict)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to_json</span><span style="color:#E1E4E8;">(self, value):</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [[k, </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.serializer.tag(v)] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> iteritems(value)]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to_python</span><span style="color:#E1E4E8;">(self, value):</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> OrderedDict(value)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">app.session_interface.serializer.register(TagOrderedDict, </span><span style="color:#FFAB70;">index</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask.json.tag </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> JSONTag</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TagOrderedDict</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">JSONTag</span><span style="color:#24292E;">):</span></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">__slots__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;serializer&#39;</span><span style="color:#24292E;">,)</span></span>\n<span class="line"><span style="color:#24292E;">    key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39; od&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">check</span><span style="color:#24292E;">(self, value):</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(value, OrderedDict)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to_json</span><span style="color:#24292E;">(self, value):</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [[k, </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.serializer.tag(v)] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> iteritems(value)]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to_python</span><span style="color:#24292E;">(self, value):</span></span>\n<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> OrderedDict(value)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#24292E;">app.session_interface.serializer.register(TagOrderedDict, </span><span style="color:#E36209;">index</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre></div>',65),n=[t];function r(p,i,c,d,u,m){return a(),s("div",null,n)}const y=e(l,[["render",r]]);export{g as __pageData,y as default};
