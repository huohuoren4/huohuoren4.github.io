import{_ as e,o as s,c as a,V as t}from"./chunks/framework.48c56699.js";const D=JSON.parse('{"title":"Global Variables","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/reference_guides/api_reference/global_variables.md","filePath":"python/pytest/reference_guides/api_reference/global_variables.md"}'),l={name:"python/pytest/reference_guides/api_reference/global_variables.md"},o=t(`<h1 id="global-variables" tabindex="-1">Global Variables <a class="header-anchor" href="#global-variables" aria-label="Permalink to &quot;Global Variables&quot;">​</a></h1><p>pytest treats some global variables in a special manner when defined in a test module or <code>conftest.py</code> files.</p><h2 id="collect-ignore" tabindex="-1">collect_ignore <a class="header-anchor" href="#collect-ignore" aria-label="Permalink to &quot;collect_ignore&quot;">​</a></h2><p><em>Tutorial</em>: <a href="https://docs.pytest.org/en/latest/example/pythoncollection.html#customizing-test-collection" target="_blank" rel="noreferrer">Customizing test collection</a></p><p>Can be declared in <code>conftest.py</code> files to exclude test directories or modules. Needs to be a list of paths (<code>str</code>, <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path" target="_blank" rel="noreferrer">pathlib.Path</a> or any <a href="https://docs.python.org/3/library/os.html#os.PathLike" target="_blank" rel="noreferrer">os.PathLike</a>).</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">collect_ignore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setup.py</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></code></pre></div><h2 id="collect-ignore-glob" tabindex="-1">collect_ignore_glob <a class="header-anchor" href="#collect-ignore-glob" aria-label="Permalink to &quot;collect_ignore_glob&quot;">​</a></h2><p><em>Tutorial</em>: <a href="https://docs.pytest.org/en/latest/example/pythoncollection.html#customizing-test-collection" target="_blank" rel="noreferrer">Customizing test collection</a></p><p>Can be declared in conftest.py files to exclude test directories or modules with Unix shell-style wildcards. Needs to be <code>list[str]</code> where <code>str</code> can contain glob patterns.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">collect_ignore_glob </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*_ignore.py</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></code></pre></div><h2 id="pytest-plugins" tabindex="-1">pytest_plugins <a class="header-anchor" href="#pytest-plugins" aria-label="Permalink to &quot;pytest_plugins&quot;">​</a></h2><p><em>Tutorial</em>: <a href="https://docs.pytest.org/en/latest/how-to/plugins.html#available-installable-plugins" target="_blank" rel="noreferrer">Requiring/Loading plugins in a test module or conftest file</a></p><p>Can be declared at the global level in test modules and <code>conftest.py</code> files to register additional - plugins. Can be either a <code>str</code> or <code>Sequence[str]</code>.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pytest_plugins </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myapp.testsupport.myplugin</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pytest_plugins </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myapp.testsupport.tools</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myapp.testsupport.regression</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h2 id="pytestmark" tabindex="-1">pytestmark <a class="header-anchor" href="#pytestmark" aria-label="Permalink to &quot;pytestmark&quot;">​</a></h2><p><em>Tutorial</em>: <a href="https://docs.pytest.org/en/latest/example/markers.html#scoped-marking" target="_blank" rel="noreferrer">Marking whole classes or modules</a></p><p>Can be declared at the global level in test modules to apply one or more <a href="https://docs.pytest.org/en/latest/reference/reference.html#marks-ref" target="_blank" rel="noreferrer">marks</a> to all test - functions and methods. Can be either a single mark or a list of marks (applied in left-to-right - order).</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">pytestmark </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">webtest</span></span></code></pre></div><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">pytestmark </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">integration</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">slow</span><span style="color:#89DDFF;">]</span></span></code></pre></div>`,20),n=[o];function p(r,c,i,y,d,h){return s(),a("div",null,n)}const u=e(l,[["render",p]]);export{D as __pageData,u as default};
