import{_ as e,o as t,c as a,Q as l}from"./chunks/framework.01af844e.js";const _=JSON.parse('{"title":"Template Rendering","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/api_reference/template_render.md","filePath":"python/flask/api_reference/template_render.md","lastUpdated":1692979908000}'),s={name:"python/flask/api_reference/template_render.md"},o=l('<h1 id="template-rendering" tabindex="-1">Template Rendering <a class="header-anchor" href="#template-rendering" aria-label="Permalink to &quot;Template Rendering {#template-rendering}&quot;">​</a></h1><h2 id="flask-render-template-template-name-or-list-context" tabindex="-1">flask.render_template(<code>template_name_or_list, **context</code>) <a class="header-anchor" href="#flask-render-template-template-name-or-list-context" aria-label="Permalink to &quot;flask.render_template(`template_name_or_list, **context`)&quot;">​</a></h2><p>Render a template by name with the given context.</p><p><em>Parameters</em>:</p><ul><li><p><code>template_name_or_list (str | Template | list[str | jinja2.environment.Template])</code> – The name of the template to render. If a list is given, the first name to exist will be rendered.</p></li><li><p><code>context (Any)</code> – The variables to make available in the template.</p></li></ul><p><em>Return type</em>: <code>str</code></p><h2 id="flask-render-template-string-source-context" tabindex="-1">flask.render_template_string(<code>source, **context</code>) <a class="header-anchor" href="#flask-render-template-string-source-context" aria-label="Permalink to &quot;flask.render_template_string(`source, **context`)&quot;">​</a></h2><p>Render a template from the given source string with the given context.</p><p><em>Parameters</em>:</p><ul><li><p><code>source (str)</code> – The source code of the template to render.</p></li><li><p><code>context (Any)</code> – The variables to make available in the template.</p></li></ul><p><em>Return type</em>: <code>str</code></p><h2 id="flask-stream-template-template-name-or-list-context" tabindex="-1">flask.stream_template(<code>template_name_or_list, **context</code>) <a class="header-anchor" href="#flask-stream-template-template-name-or-list-context" aria-label="Permalink to &quot;flask.stream_template(`template_name_or_list, **context`)&quot;">​</a></h2><p>Render a template by name with the given context as a stream. This returns an iterator of strings, which can be used as a streaming response from a view.</p><p><em>Parameters</em>:</p><ul><li><p><code>template_name_or_list (str | Template | list[str | jinja2.environment.Template])</code> – The name of the template to render. If a list is given, the first name to exist will be rendered.</p></li><li><p><code>context (Any)</code> – The variables to make available in the template.</p></li></ul><p><em>Return type</em>: <code>Iterator[str]</code></p><details class="details custom-block"><summary>Changelog</summary><p><em>New in version 2.2.</em></p></details><h2 id="flask-stream-template-string-source-context" tabindex="-1">flask.stream_template_string(<code>source, **context</code>) <a class="header-anchor" href="#flask-stream-template-string-source-context" aria-label="Permalink to &quot;flask.stream_template_string(`source, **context`)&quot;">​</a></h2><p>Render a template from the given source string with the given context as a stream. This returns an iterator of strings, which can be used as a streaming response from a view.</p><p><em>Parameters</em>:</p><ul><li><p><code>source (str)</code> – The source code of the template to render.</p></li><li><p><code>context (Any)</code> – The variables to make available in the template.</p></li></ul><p><em>Return type</em>: <code>Iterator[str]</code></p><details class="details custom-block"><summary>Changelog</summary><p><em>New in version 2.2.</em></p></details><h2 id="flask-get-template-attribute-template-name-attribute" tabindex="-1">flask.get_template_attribute(<code>template_name, attribute</code>) <a class="header-anchor" href="#flask-get-template-attribute-template-name-attribute" aria-label="Permalink to &quot;flask.get_template_attribute(`template_name, attribute`)&quot;">​</a></h2><p>Loads a macro (or variable) a template exports. This can be used to invoke a macro from within Python code. If you for example have a template named <code>_cider.html</code> with the following contents:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{% macro hello(name) %}Hello {{ name }}!{% endmacro %}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{% macro hello(name) %}Hello {{ name }}!{% endmacro %}</span></span></code></pre></div><p>You can access this from Python code like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">hello </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_template_attribute(</span><span style="color:#9ECBFF;">&#39;_cider.html&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> hello(</span><span style="color:#9ECBFF;">&#39;World&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">hello </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_template_attribute(</span><span style="color:#032F62;">&#39;_cider.html&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">)</span></span>\n<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> hello(</span><span style="color:#032F62;">&#39;World&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><details class="details custom-block"><summary>Changelog</summary><p><em>New in version 0.2.</em></p></details><p><em>Parameters</em>:</p><ul><li><p><code>template_name (str)</code> – the name of the template</p></li><li><p><code>attribute (str)</code> – the name of the variable of macro to access</p></li></ul><p><em>Return type</em>: <code>Any</code></p>',32),n=[o];function r(p,i,c,m,d,h){return t(),a("div",null,n)}const f=e(s,[["render",r]]);export{_ as __pageData,f as default};
