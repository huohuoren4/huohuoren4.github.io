import{_ as e,o as a,c as t,V as o}from"./chunks/framework.48c56699.js";const m=JSON.parse('{"title":"Design Decisions in Flask","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/additional_note/design_decision.md","filePath":"python/flask/additional_note/design_decision.md","lastUpdated":1692437254000}'),s={name:"python/flask/additional_note/design_decision.md"},n=o(`<h1 id="design-decisions-in-flask" tabindex="-1">Design Decisions in Flask <a class="header-anchor" href="#design-decisions-in-flask" aria-label="Permalink to &quot;Design Decisions in Flask&quot;">​</a></h1><p>If you are curious why Flask does certain things the way it does and not differently, this section is for you. This should give you an idea about some of the design decisions that may appear arbitrary and surprising at first, especially in direct comparison with other frameworks.</p><h2 id="the-explicit-application-object" tabindex="-1">The Explicit Application Object <a class="header-anchor" href="#the-explicit-application-object" aria-label="Permalink to &quot;The Explicit Application Object&quot;">​</a></h2><p>A Python web application based on <code>WSGI</code> has to have one central callable object that implements the actual application. In Flask this is an instance of the <code>Flask</code> class. Each <code>Flask</code> application has to create an instance of this class itself and pass it the name of the module, but why can’t <code>Flask</code> do that itself?</p><p>Without such an explicit application object the following code:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> flask </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Flask</span></span>
<span class="line"><span style="color:#A6ACCD;">app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Flask</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">__name__</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">index</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>Would look like this instead:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> hypothetical_flask </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> route</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">index</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>There are three major reasons for this. The most important one is that implicit application objects require that there may only be one instance at the time. There are ways to fake multiple applications with a single application object, like maintaining a stack of applications, but this causes some problems I won’t outline here in detail. Now the question is: when does a microframework need more than one application at the same time? A good example for this is unit testing. When you want to test something it can be very helpful to create a minimal application to test specific behavior. When the application object is deleted everything it allocated will be freed again.</p><p>Another thing that becomes possible when you have an explicit object lying around in your code is that you can subclass the base class (<code>Flask</code>) to alter specific behavior. This would not be possible without hacks if the object were created ahead of time for you based on a class that is not exposed to you.</p><p>But there is another very important reason why Flask depends on an explicit instantiation of that class: the package name. Whenever you create a Flask instance you usually pass it <code>__name__</code> as package name. Flask depends on that information to properly load resources relative to your module. With Python’s outstanding support for reflection it can then access the package to figure out where the templates and static files are stored (see <code>open_resource()</code>). Now obviously there are frameworks around that do not need any configuration and will still be able to load templates relative to your application module. But they have to use the current working directory for that, which is a very unreliable way to determine where the application is. The current working directory is process-wide and if you are running multiple applications in one process (which could happen in a webserver without you knowing) the paths will be off. Worse: many webservers do not set the working directory to the directory of your application but to the document root which does not have to be the same folder.</p><p>The third reason is “explicit is better than implicit”. That object is your WSGI application, you don’t have to remember anything else. If you want to apply a WSGI middleware, just wrap it and you’re done (though there are better ways to do that so that you do not lose the reference to the application object <code>wsgi_app()</code>).</p><p>Furthermore this design makes it possible to use a factory function to create the application which is very helpful for unit testing and similar things (<a href="https://flask.palletsprojects.com/en/2.3.x/patterns/appfactories/" target="_blank" rel="noreferrer">Application Factories</a>).</p><h2 id="the-routing-system" tabindex="-1">The Routing System <a class="header-anchor" href="#the-routing-system" aria-label="Permalink to &quot;The Routing System&quot;">​</a></h2><p>Flask uses the Werkzeug routing system which was designed to automatically order routes by complexity. This means that you can declare routes in arbitrary order and they will still work as expected. This is a requirement if you want to properly implement decorator based routing since decorators could be fired in undefined order when the application is split into multiple modules.</p><p>Another design decision with the Werkzeug routing system is that routes in <code>Werkzeug</code> try to ensure that URLs are unique. <code>Werkzeug</code> will go quite far with that in that it will automatically redirect to a canonical URL if a route is ambiguous.</p><h2 id="one-template-engine" tabindex="-1">One Template Engine <a class="header-anchor" href="#one-template-engine" aria-label="Permalink to &quot;One Template Engine&quot;">​</a></h2><p>Flask decides on one template engine: <code>Jinja2</code>. Why doesn’t Flask have a pluggable template engine interface? You can obviously use a different template engine, but Flask will still configure <code>Jinja2</code> for you. While that limitation that <code>Jinja2</code> is always configured will probably go away, the decision to bundle one template engine and use that will not.</p><p>Template engines are like programming languages and each of those engines has a certain understanding about how things work. On the surface they all work the same: you tell the engine to evaluate a template with a set of variables and take the return value as string.</p><p>But that’s about where similarities end. Jinja2 for example has an extensive filter system, a certain way to do template inheritance, support for reusable blocks (macros) that can be used from inside templates and also from Python code, supports iterative template rendering, configurable syntax and more. On the other hand an engine like Genshi is based on XML stream evaluation, template inheritance by taking the availability of XPath into account and more. Mako on the other hand treats templates similar to Python modules.</p><p>When it comes to connecting a template engine with an application or framework there is more than just rendering templates. For instance, Flask uses Jinja2’s extensive autoescaping support. Also it provides ways to access macros from Jinja2 templates.</p><p>A template abstraction layer that would not take the unique features of the template engines away is a science on its own and a too large undertaking for a microframework like Flask.</p><p>Furthermore extensions can then easily depend on one template language being present. You can easily use your own templating language, but an extension could still depend on Jinja itself.</p><h2 id="what-does-micro-mean" tabindex="-1">What does “micro” mean? <a class="header-anchor" href="#what-does-micro-mean" aria-label="Permalink to &quot;What does “micro” mean?&quot;">​</a></h2><p>“Micro” does not mean that your whole web application has to fit into a single Python file (although it certainly can), nor does it mean that Flask is lacking in functionality. The “micro” in microframework means Flask aims to keep the core simple but extensible. Flask won’t make many decisions for you, such as what database to use. Those decisions that it does make, such as what templating engine to use, are easy to change. Everything else is up to you, so that Flask can be everything you need and nothing you don’t.</p><p>By default, Flask does not include a database abstraction layer, form validation or anything else where different libraries already exist that can handle that. Instead, Flask supports extensions to add such functionality to your application as if it was implemented in Flask itself. Numerous extensions provide database integration, form validation, upload handling, various open authentication technologies, and more. Flask may be “micro”, but it’s ready for production use on a variety of needs.</p><p>Why does Flask call itself a microframework and yet it depends on two libraries (namely Werkzeug and Jinja2). Why shouldn’t it? If we look over to the Ruby side of web development there we have a protocol very similar to WSGI. Just that it’s called Rack there, but besides that it looks very much like a WSGI rendition for Ruby. But nearly all applications in Ruby land do not work with Rack directly, but on top of a library with the same name. This Rack library has two equivalents in Python: WebOb (formerly Paste) and Werkzeug. Paste is still around but from my understanding it’s sort of deprecated in favour of WebOb. The development of WebOb and Werkzeug started side by side with similar ideas in mind: be a good implementation of WSGI for other applications to take advantage.</p><p>Flask is a framework that takes advantage of the work already done by Werkzeug to properly interface WSGI (which can be a complex task at times). Thanks to recent developments in the Python package infrastructure, packages with dependencies are no longer an issue and there are very few reasons against having libraries that depend on others.</p><h2 id="thread-locals" tabindex="-1">Thread Locals <a class="header-anchor" href="#thread-locals" aria-label="Permalink to &quot;Thread Locals&quot;">​</a></h2><p>Flask uses thread local objects (context local objects in fact, they support greenlet contexts as well) for request, session and an extra object you can put your own things on (g). Why is that and isn’t that a bad idea?</p><p>Yes it is usually not such a bright idea to use thread locals. They cause troubles for servers that are not based on the concept of threads and make large applications harder to maintain. However Flask is just not designed for large applications or asynchronous servers. Flask wants to make it quick and easy to write a traditional web application.</p><h2 id="async-await-and-asgi-support" tabindex="-1">Async/await and ASGI support <a class="header-anchor" href="#async-await-and-asgi-support" aria-label="Permalink to &quot;Async/await and ASGI support&quot;">​</a></h2><p>Flask supports <code>async</code> coroutines for view functions by executing the coroutine on a separate thread instead of using an event loop on the main thread as an async-first (ASGI) framework would. This is necessary for Flask to remain backwards compatible with extensions and code built before <code>async</code> was introduced into Python. This compromise introduces a performance cost compared with the ASGI frameworks, due to the overhead of the threads.</p><p>Due to how tied to WSGI Flask’s code is, it’s not clear if it’s possible to make the Flask class support ASGI and WSGI at the same time. Work is currently being done in Werkzeug to work with ASGI, which may eventually enable support in Flask as well.</p><p>See <a href="https://flask.palletsprojects.com/en/2.3.x/async-await/" target="_blank" rel="noreferrer">Using async and await</a> for more discussion.</p><h2 id="what-flask-is-what-flask-is-not" tabindex="-1">What Flask is, What Flask is Not <a class="header-anchor" href="#what-flask-is-what-flask-is-not" aria-label="Permalink to &quot;What Flask is, What Flask is Not&quot;">​</a></h2><p>Flask will never have a database layer. It will not have a form library or anything else in that direction. Flask itself just bridges to Werkzeug to implement a proper WSGI application and to Jinja2 to handle templating. It also binds to a few common standard library packages such as logging. Everything else is up for extensions.</p><p>Why is this the case? Because people have different preferences and requirements and Flask could not meet those if it would force any of this into the core. The majority of web applications will need a template engine in some sort. However not every application needs a SQL database.</p><p>As your codebase grows, you are free to make the design decisions appropriate for your project. Flask will continue to provide a very simple glue layer to the best that Python has to offer. You can implement advanced patterns in SQLAlchemy or another database tool, introduce non-relational data persistence as appropriate, and take advantage of framework-agnostic tools built for WSGI, the Python web interface.</p><p>The idea of Flask is to build a good foundation for all applications. Everything else is up to you or extensions.</p>`,40),i=[n];function l(r,p,c,h,d,u){return a(),t("div",null,i)}const f=e(s,[["render",l]]);export{m as __pageData,f as default};
