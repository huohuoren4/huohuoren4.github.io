import{_ as e,o as s,c as a,V as o}from"./chunks/framework.d3b95951.js";const u=JSON.parse('{"title":"Development Server","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/develop_server.md","filePath":"python/flask/user_guide/develop_server.md"}'),n={name:"python/flask/user_guide/develop_server.md"},l=o(`<h1 id="development-server" tabindex="-1">Development Server <a class="header-anchor" href="#development-server" aria-label="Permalink to &quot;Development Server&quot;">​</a></h1><p>Flask provides a <code>run</code> command to run the application with a development server. In debug mode, this server provides an interactive debugger and will reload when code is changed.</p><div class="warning custom-block"><p class="custom-block-title">Warning:</p><p>Do not use the development server when deploying to production. It is intended for use only during local development. It is not designed to be particularly efficient, stable, or secure.</p><p>See <a href="https://flask.palletsprojects.com/en/2.3.x/deploying/" target="_blank" rel="noreferrer">Deploying to Production</a> for deployment options.</p></div><h2 id="command-line" tabindex="-1">Command Line <a class="header-anchor" href="#command-line" aria-label="Permalink to &quot;Command Line&quot;">​</a></h2><p>The <code>flask run</code> CLI command is the recommended way to run the development server. Use the <code>--app</code> option to point to your application, and the <code>--debug</code> option to enable debug mode.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">flask</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--debug</span></span></code></pre></div><p>This enables debug mode, including the interactive debugger and reloader, and then starts the server on <code>http://localhost:5000/</code>. Use <code>flask run --help</code> to see the available options, and <a href="https://flask.palletsprojects.com/en/2.3.x/cli/" target="_blank" rel="noreferrer">Command Line Interface</a> for detailed instructions about configuring and using the CLI.</p><h3 id="address-already-in-use" tabindex="-1">Address already in use <a class="header-anchor" href="#address-already-in-use" aria-label="Permalink to &quot;Address already in use&quot;">​</a></h3><p>If another program is already using port 5000, you’ll see an <code>OSError</code> when the server tries to start. It may have one of the following messages:</p><ul><li><p><code>OSError: [Errno 98] Address already in use</code></p></li><li><p><code>OSError: [WinError 10013] An attempt was made to access a socket in a way forbidden by its access permissions </code></p></li></ul><p>Either identify and stop the other program, or use <code>flask run --port 5001</code> to pick a different port.</p><p>You can use <code>netstat</code> or <code>lsof</code> to identify what process id is using a port, then use other operating system tools stop that process. The following example shows that process id 6847 is using port 5000.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-JsVaU" id="tab-QohHCoP" checked="checked"><label for="tab-QohHCoP">netstat(Linux)</label><input type="radio" name="group-JsVaU" id="tab-_2Fk9Fs"><label for="tab-_2Fk9Fs">lsof(macOS/Linux)</label><input type="radio" name="group-JsVaU" id="tab-iGRy_2Y"><label for="tab-iGRy_2Y">netstat(Windows)</label></div><div class="blocks"><div class="language-shell active"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">netstat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-nlp</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">grep</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000</span></span>
<span class="line"><span style="color:#FFCB6B;">tcp</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">127.0</span><span style="color:#C3E88D;">.0.1:5000</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#C3E88D;">.0.0:</span><span style="color:#A6ACCD;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">LISTEN</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6847</span><span style="color:#C3E88D;">/python</span></span></code></pre></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lsof</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-P</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">:5000</span></span>
<span class="line"><span style="color:#FFCB6B;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6847</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">IPv4</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">TCP</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">localhost:5000</span><span style="color:#A6ACCD;"> (LISTEN)</span></span></code></pre></div><div class="language-bat"><button title="Copy Code" class="copy"></button><span class="lang">bat</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">netstat</span><span style="color:#A6ACCD;"> -ano </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">findstr</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000</span></span>
<span class="line"><span style="color:#A6ACCD;">TCP 127.0.0.1:5000 0.0.0.0:0 LISTENING </span><span style="color:#F78C6C;">6847</span></span></code></pre></div></div></div><p>macOS Monterey and later automatically starts a service that uses port 5000. To disable the service, go to System Preferences, Sharing, and disable “AirPlay Receiver”.</p><h3 id="deferred-errors-on-reload" tabindex="-1">Deferred Errors on Reload <a class="header-anchor" href="#deferred-errors-on-reload" aria-label="Permalink to &quot;Deferred Errors on Reload&quot;">​</a></h3><p>When using the <code>flask run</code> command with the reloader, the server will continue to run even if you introduce syntax errors or other initialization errors into the code. Accessing the site will show the interactive debugger for the error, rather than crashing the server.</p><p>If a syntax error is already present when calling <code>flask run</code>, it will fail immediately and show the traceback rather than waiting until the site is accessed. This is intended to make errors more visible initially while still allowing the server to handle errors on reload.</p><h2 id="in-code" tabindex="-1">In Code <a class="header-anchor" href="#in-code" aria-label="Permalink to &quot;In Code&quot;">​</a></h2><p>The development server can also be started from Python with the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.run" target="_blank" rel="noreferrer">Flask.run()</a> method. This method takes arguments similar to the CLI options to control the server. The main difference from the CLI command is that the server will crash if there are errors when reloading. <code>debug=True</code> can be passed to enable debug mode.</p><p>Place the call in a main block, otherwise it will interfere when trying to import and run the application with a production server later.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> __name__ </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">__main__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">debug</span><span style="color:#89DDFF;">=True)</span></span></code></pre></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello.py</span></span></code></pre></div>`,22),t=[l];function r(p,c,i,d,h,y){return s(),a("div",null,t)}const m=e(n,[["render",r]]);export{u as __pageData,m as default};
