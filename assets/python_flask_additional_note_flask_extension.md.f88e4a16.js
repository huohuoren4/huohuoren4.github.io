import{_ as e,o as s,c as a,X as n}from"./chunks/framework.b5656a4e.js";const F=JSON.parse('{"title":"Flask Extension Development","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/additional_note/flask_extension.md","filePath":"python/flask/additional_note/flask_extension.md","lastUpdated":1693404008000}'),o={name:"python/flask/additional_note/flask_extension.md"},t=n(`<h1 id="flask-extension-development" tabindex="-1">Flask Extension Development <a class="header-anchor" href="#flask-extension-development" aria-label="Permalink to &quot;Flask Extension Development {#flask-extension-development}&quot;">​</a></h1><p>Extensions are extra packages that add functionality to a Flask application. While <a href="https://pypi.org/search/?c=Framework+%3A%3A+Flask" target="_blank" rel="noreferrer">PyPI</a> contains many Flask extensions, you may not find one that fits your need. If this is the case, you can create your own, and publish it for others to use as well.</p><p>This guide will show how to create a Flask extension, and some of the common patterns and requirements involved. Since extensions can do anything, this guide won’t be able to cover every possibility.</p><p>The best ways to learn about extensions are to look at how other extensions you use are written, and discuss with others. Discuss your design ideas with others on our <a href="https://discord.gg/pallets" target="_blank" rel="noreferrer">Discord Chat</a> or <a href="https://github.com/pallets/flask/discussions" target="_blank" rel="noreferrer">GitHub Discussions</a>.</p><p>The best extensions share common patterns, so that anyone familiar with using one extension won’t feel completely lost with another. This can only work if collaboration happens early.</p><h2 id="naming" tabindex="-1">Naming <a class="header-anchor" href="#naming" aria-label="Permalink to &quot;Naming {#naming}&quot;">​</a></h2><p>A Flask extension typically has <code>flask</code> in its name as a prefix or suffix. If it wraps another library, it should include the library name as well. This makes it easy to search for extensions, and makes their purpose clearer.</p><p>A general Python packaging recommendation is that the install name from the package index and the name used in <code>import</code> statements should be related. The import name is lowercase, with words separated by underscores (<code>_</code>). The install name is either lower case or title case, with words separated by dashes (<code>-</code>). If it wraps another library, prefer using the same case as that library’s name.</p><p>Here are some example install and import names:</p><ul><li><p><code>Flask-Name</code> imported as <code>flask_name</code></p></li><li><p><code>flask-name-lower</code> imported as <code>flask_name_lower</code></p></li><li><p><code>Flask-ComboName</code> imported as <code>flask_comboname</code></p></li><li><p><code>Name-Flask</code> imported as <code>name_flask</code></p></li></ul><h2 id="the-extension-class-and-initialization" tabindex="-1">The Extension Class and Initialization <a class="header-anchor" href="#the-extension-class-and-initialization" aria-label="Permalink to &quot;The Extension Class and Initialization {#the-extension-class-and-initialization}&quot;">​</a></h2><p>All extensions will need some entry point that initializes the extension with the application. The most common pattern is to create a class that represents the extension’s configuration and behavior, with an <code>init_app</code> method to apply the extension instance to the given application instance.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloExtension</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">=None):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init_app</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init_app</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">before_request</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>It is important that the app is not stored on the extension, don’t do <code>self.app = app</code>. The only time the extension should have direct access to an app is during <code>init_app</code>, otherwise it should use <code>current_app</code>.</p><p>This allows the extension to support the application factory pattern, avoids circular import issues when importing the extension instance elsewhere in a user’s code, and makes testing with different configurations easier.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">hello </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HelloExtension</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create_app</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Flask</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">__name__</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    hello</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init_app</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> app</span></span></code></pre></div><p>Above, the <code>hello</code> extension instance exists independently of the application. This means that other modules in a user’s project can do <code>from project import hello</code> and use the extension in blueprints before the app exists.</p><p>The <code>Flask.extensions</code> dict can be used to store a reference to the extension on the application, or some other state specific to the application. Be aware that this is a single namespace, so use a name unique to your extension, such as the extension’s name without the “flask” prefix.</p><h2 id="adding-behavior" tabindex="-1">Adding Behavior <a class="header-anchor" href="#adding-behavior" aria-label="Permalink to &quot;Adding Behavior {#adding-behavior}&quot;">​</a></h2><p>There are many ways that an extension can add behavior. Any setup methods that are available on the <code>Flask</code> object can be used during an extension’s <code>init_app</code> method.</p><p>A common pattern is to use <code>before_request()</code> to initialize some data or a connection at the beginning of each request, then <code>teardown_request()</code> to clean it up at the end. This can be stored on g, discussed more below.</p><p>A more lazy approach is to provide a method that initializes and caches the data or connection. For example, a <code>ext.get_db</code> method could create a database connection the first time it’s called, so that a view that doesn’t use the database doesn’t create a connection.</p><p>Besides doing something before and after every view, your extension might want to add some specific views as well. In this case, you could define a <code>Blueprint</code>, then call <code>register_blueprint()</code> during <code>init_app</code> to add the blueprint to the app.</p><h2 id="configuration-techniques" tabindex="-1">Configuration Techniques <a class="header-anchor" href="#configuration-techniques" aria-label="Permalink to &quot;Configuration Techniques {#configuration-techniques}&quot;">​</a></h2><p>There can be multiple levels and sources of configuration for an extension. You should consider what parts of your extension fall into each one.</p><ul><li><p>Configuration per application instance, through <code>app.config</code> values. This is configuration that could reasonably change for each deployment of an application. A common example is a URL to an external resource, such as a database. Configuration keys should start with the extension’s name so that they don’t interfere with other extensions.</p></li><li><p>Configuration per extension instance, through <code>__init__</code> arguments. This configuration usually affects how the extension is used, such that it wouldn’t make sense to change it per deployment.</p></li><li><p>Configuration per extension instance, through instance attributes and decorator methods. It might be more ergonomic to assign to <code>ext.value</code>, or use a <code>@ext.register</code> decorator to register a function, after the extension instance has been created.</p></li><li><p>Global configuration through class attributes. Changing a class attribute like <code>Ext.connection_class</code> can customize default behavior without making a subclass. This could be combined per-extension configuration to override defaults.</p></li><li><p>Subclassing and overriding methods and attributes. Making the API of the extension itself something that can be overridden provides a very powerful tool for advanced customization.</p></li></ul><p>The <code>Flask</code> object itself uses all of these techniques.</p><p>It’s up to you to decide what configuration is appropriate for your extension, based on what you need and what you want to support.</p><p>Configuration should not be changed after the application setup phase is complete and the server begins handling requests. Configuration is global, any changes to it are not guaranteed to be visible to other workers.</p><h2 id="data-during-a-request" tabindex="-1">Data During a Request <a class="header-anchor" href="#data-during-a-request" aria-label="Permalink to &quot;Data During a Request {#data-during-a-request}&quot;">​</a></h2><p>When writing a <code>Flask</code> application, the <code>g</code> object is used to store information during a request. For example the <a href="/python/flask/user_guide/tutorial/database#define-and-access-the-database">tutorial</a> stores a connection to a SQLite database as <code>g.db</code>. Extensions can also use this, with some care. Since <code>g</code> is a single global namespace, extensions must use unique names that won’t collide with user data. For example, use the extension name as a prefix, or as a namespace.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># an internal prefix with the extension name</span></span>
<span class="line"><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">_hello_user_id</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># or an internal prefix as a namespace</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> types </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> SimpleNamespace</span></span>
<span class="line"><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">_hello</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SimpleNamespace</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">_hello</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">user_id</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span></code></pre></div><p>The data in g lasts for an application context. An application context is active when a request context is, or when a CLI command is run. If you’re storing something that should be closed, use <code>teardown_appcontext()</code> to ensure that it gets closed when the application context ends. If it should only be valid during a request, or would not be used in the CLI outside a request, use <code>teardown_request()</code>.</p><h2 id="views-and-models" tabindex="-1">Views and Models <a class="header-anchor" href="#views-and-models" aria-label="Permalink to &quot;Views and Models {#views-and-models}&quot;">​</a></h2><p>Your extension views might want to interact with specific models in your database, or some other extension or data connected to your application. For example, let’s consider a <code>Flask-SimpleBlog</code> extension that works with <code>Flask-SQLAlchemy</code> to provide a Post model and views to write and read posts.</p><p>The <code>Post</code> model needs to subclass the Flask-SQLAlchemy <code>db.Model</code> object, but that’s only available once you’ve created an instance of that extension, not when your extension is defining its views. So how can the view code, defined before the model exists, access the model?</p><p>One method could be to use <a href="/python/flask/user_guide/view#class-based-views">Class-based Views</a>. During <code>__init__</code>, create the model, then create the views by passing the model to the view class’s <code>as_view()</code> method.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PostAPI</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">MethodView</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">model</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">model</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> model</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        post </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">model</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">id</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">jsonify</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">post</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">to_json</span><span style="color:#89DDFF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BlogExtension</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">db</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Post</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">db</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Model</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">id</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Column</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">primary_key</span><span style="color:#89DDFF;">=True)</span></span>
<span class="line"><span style="color:#A6ACCD;">            title </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Column</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">db</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">String</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">nullable</span><span style="color:#89DDFF;">=False)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">post_model</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Post</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init_app</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        api_view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> PostAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">as_view</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">model</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">post_model</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">db </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SQLAlchemy</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">blog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BlogExtension</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">db</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init_app</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">blog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init_app</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Another technique could be to use an attribute on the extension, such as <code>self.post_model</code> from above. Add the extension to app.extensions in <code>init_app</code>, then access <code>current_app.extensions[&quot;simple_blog&quot;].post_model</code> from views.</p><p>You may also want to provide base classes so that users can provide their own <code>Post</code> model that conforms to the API your extension expects. So they could implement class <code>Post(blog.BasePost)</code>, then set it as <code>blog.post_model</code>.</p><p>As you can see, this can get a bit complex. Unfortunately, there’s no perfect solution here, only different strategies and tradeoffs depending on your needs and how much customization you want to offer. Luckily, this sort of resource dependency is not a common need for most extensions. Remember, if you need help with design, ask on our <a href="https://discord.gg/pallets" target="_blank" rel="noreferrer">Discord Chat</a> or <a href="https://github.com/pallets/flask/discussions" target="_blank" rel="noreferrer">GitHub Discussions</a>.</p><h2 id="recommended-extension-guidelines" tabindex="-1">Recommended Extension Guidelines <a class="header-anchor" href="#recommended-extension-guidelines" aria-label="Permalink to &quot;Recommended Extension Guidelines {#recommended-extension-guidelines}&quot;">​</a></h2><p>Flask previously had the concept of “approved extensions”, where the Flask maintainers evaluated the quality, support, and compatibility of the extensions before listing them. While the list became too difficult to maintain over time, the guidelines are still relevant to all extensions maintained and developed today, as they help the Flask ecosystem remain consistent and compatible.</p><ol><li><p>An extension requires a maintainer. In the event an extension author would like to move beyond the project, the project should find a new maintainer and transfer access to the repository, documentation, PyPI, and any other services. The <a href="https://github.com/pallets-eco" target="_blank" rel="noreferrer">Pallets-Eco</a> organization on GitHub allows for community maintenance with oversight from the Pallets maintainers.</p></li><li><p>The naming scheme is <code>Flask-ExtensionName</code> or <code>ExtensionName-Flask</code>. It must provide exactly one package or module named <code>flask_extension_name</code>.</p></li><li><p>The extension must use an open source license. The Python web ecosystem tends to prefer BSD or MIT. It must be open source and publicly available.</p></li><li><p>The extension’s API must have the following characteristics:</p><ul><li><p>It must support multiple applications running in the same Python process. Use <code>current_app</code> instead of <code>self.app</code>, store configuration and state per application instance.</p></li><li><p>It must be possible to use the factory pattern for creating applications. Use the <code>ext.init_app()</code> pattern.</p></li></ul></li><li><p>From a clone of the repository, an extension with its dependencies must be installable in editable mode with <code>pip install -e .</code>.</p></li><li><p>It must ship tests that can be invoked with a common tool like <code>tox -e py</code>, <code>nox -s test</code> or <code>pytest</code>. If not using <code>tox</code>, the test dependencies should be specified in a requirements file. The tests must be part of the sdist distribution.</p></li><li><p>A link to the documentation or project website must be in the PyPI metadata or the readme. The documentation should use the Flask theme from the <a href="https://pypi.org/project/Pallets-Sphinx-Themes/" target="_blank" rel="noreferrer">Official Pallets Themes</a>.</p></li><li><p>The extension’s dependencies should not use upper bounds or assume any particular version scheme, but should use lower bounds to indicate minimum compatibility support. For example, <code>sqlalchemy&gt;=1.4</code>.</p></li><li><p>Indicate the versions of Python supported using <code>python_requires=&quot;&gt;=version&quot;</code>. Flask itself supports <code>Python &gt;=3.8</code> as of <code>April 2023</code>, but this will update over time.</p></li></ol>`,44),l=[t];function p(i,c,r,d,h,y){return s(),a("div",null,l)}const D=e(o,[["render",p]]);export{F as __pageData,D as default};
