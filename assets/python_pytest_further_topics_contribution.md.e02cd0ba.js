import{_ as e,o as s,c as a,V as t}from"./chunks/framework.48c56699.js";const g=JSON.parse('{"title":"Contribution getting started","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/further_topics/contribution.md","filePath":"python/pytest/further_topics/contribution.md","lastUpdated":1690390483000}'),n={name:"python/pytest/further_topics/contribution.md"},o=t(`<h1 id="contribution-getting-started" tabindex="-1">Contribution getting started <a class="header-anchor" href="#contribution-getting-started" aria-label="Permalink to &quot;Contribution getting started&quot;">​</a></h1><p>Contributions are highly welcomed and appreciated. Every little bit of help counts, so do not hesitate!</p><h2 id="feature-requests-and-feedback" tabindex="-1">Feature requests and feedback <a class="header-anchor" href="#feature-requests-and-feedback" aria-label="Permalink to &quot;Feature requests and feedback&quot;">​</a></h2><p>Do you like pytest? Share some love on Twitter or in your blog posts!</p><p>We’d also like to hear about your propositions and suggestions. Feel free to <a href="https://github.com/pytest-dev/pytest/issues" target="_blank" rel="noreferrer">submit them as issues</a> and:</p><ul><li><p>Explain in detail how they should work.</p></li><li><p>Keep the scope as narrow as possible. This will make it easier to implement.</p></li></ul><h2 id="report-bugs" tabindex="-1">Report bugs <a class="header-anchor" href="#report-bugs" aria-label="Permalink to &quot;Report bugs&quot;">​</a></h2><p>Report bugs for pytest in the <a href="https://github.com/pytest-dev/pytest/issues" target="_blank" rel="noreferrer">issue tracker</a>.</p><p>If you are reporting a bug, please include:</p><ul><li><p>Your operating system name and version.</p></li><li><p>Any details about your local setup that might be helpful in troubleshooting, specifically the Python interpreter version, installed libraries, and pytest version.</p></li><li><p>Detailed steps to reproduce the bug.</p></li></ul><p>If you can write a demonstration test that currently fails but should pass (xfail), that is a very useful commit to make as well, even if you cannot fix the bug itself.</p><h2 id="fix-bugs" tabindex="-1">Fix bugs <a class="header-anchor" href="#fix-bugs" aria-label="Permalink to &quot;Fix bugs&quot;">​</a></h2><p>Look through the GitHub issues for bugs. See also the <a href="https://github.com/pytest-dev/pytest/labels/status%3A%20easy" target="_blank" rel="noreferrer">“status: easy” issues</a> that are friendly to new contributors.</p><p>Talk to developers to find out how you can fix specific bugs. To indicate that you are going to work on a particular issue, add a comment to that effect on the specific issue.</p><p>Don’t forget to check the issue trackers of your favourite plugins, too!</p><h2 id="implement-features" tabindex="-1">Implement features <a class="header-anchor" href="#implement-features" aria-label="Permalink to &quot;Implement features&quot;">​</a></h2><p>Look through the <a href="https://github.com/pytest-dev/pytest/labels/type:%20enhancement" target="_blank" rel="noreferrer">GitHub issues for enhancements</a>.</p><p>Talk to developers to find out how you can implement specific features.</p><h2 id="write-documentation" tabindex="-1">Write documentation <a class="header-anchor" href="#write-documentation" aria-label="Permalink to &quot;Write documentation&quot;">​</a></h2><p>Pytest could always use more documentation. What exactly is needed?</p><ul><li><p>More complementary documentation. Have you perhaps found something unclear?</p></li><li><p>Documentation translations. We currently have only English.</p></li><li><p>Docstrings. There can never be too many of them.</p></li><li><p>Blog posts, articles and such – they’re all very appreciated.</p></li></ul><p>You can also edit documentation files directly in the GitHub web interface, without using a local copy. This can be convenient for small fixes.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Build the documentation locally with the following command:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tox</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docs</span></span></code></pre></div><p>The built documentation should be available in <code>doc/en/_build/html</code>, where ‘en’ refers to the documentation language.</p></div><p>Pytest has an API reference which in large part is <a href="https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html" target="_blank" rel="noreferrer">generated automatically</a> from the docstrings of the documented items. Pytest uses the <a href="https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html" target="_blank" rel="noreferrer">Sphinx docstring format</a>. For example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">my_function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ArgType</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> Foo</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">Do important stuff.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    More detailed info here, in separate paragraphs from the subject line.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Use proper sentences -- start sentences with capital letters and end</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    with periods.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Can include annotated documentation:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    :param short_arg: An argument which determines stuff.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    :param long_arg:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        A long explanation which spans multiple lines, overflows</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        like this.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    :returns: The result.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    :raises ValueError:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        Detailed information when this can happen.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    .. versionadded:: 6.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Including types into the annotations above is not necessary when</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    type-hinting is being used (as in this example).</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span></code></pre></div><h2 id="submitting-plugins-to-pytest-dev" tabindex="-1">Submitting Plugins to pytest-dev <a class="header-anchor" href="#submitting-plugins-to-pytest-dev" aria-label="Permalink to &quot;Submitting Plugins to pytest-dev&quot;">​</a></h2><p>Pytest development of the core, some plugins and support code happens in repositories living under the <code>pytest-dev</code> organisations:</p><ul><li><a href="https://github.com/pytest-dev" target="_blank" rel="noreferrer">pytest-dev on GitHub</a></li></ul><p>All pytest-dev Contributors team members have write access to all contained repositories. Pytest core and plugins are generally developed using pull requests to respective repositories.</p><p>The objectives of the <code>pytest-dev</code> organisation are:</p><ul><li><p>Having a central location for popular pytest plugins</p></li><li><p>Sharing some of the maintenance responsibility (in case a maintainer no longer wishes to maintain a plugin)</p></li></ul><p>You can submit your plugin by subscribing to the <a href="https://mail.python.org/mailman/listinfo/pytest-dev" target="_blank" rel="noreferrer">pytest-dev mail list</a> and writing a mail pointing to your existing pytest plugin repository which must have the following:</p><ul><li><p>PyPI presence with packaging metadata that contains a <code>pytest-</code> prefixed name, version number, authors, short and long description.</p></li><li><p>a <a href="https://tox.readthedocs.io/en/latest/config.html#configuration-discovery" target="_blank" rel="noreferrer">tox configuration</a> for running tests using tox.</p></li><li><p>a <code>README</code> describing how to use the plugin and on which platforms it runs.</p></li><li><p>a <code>LICENSE</code> file containing the licensing information, with matching info in its packaging metadata.</p></li><li><p>an issue tracker for bug reports and enhancement requests.</p></li><li><p>a <a href="https://keepachangelog.com/" target="_blank" rel="noreferrer">changelog</a>.</p></li></ul><p>If no contributor strongly objects and two agree, the repository can then be transferred to the <code>pytest-dev</code> organisation.</p><p>Here’s a rundown of how a repository transfer usually proceeds (using a repository named <code>joedoe/pytest-xyz</code> as example):</p><ul><li><p><code>joedoe</code> transfers repository ownership to <code>pytest-dev</code> administrator <code>calvin</code>.</p></li><li><p><code>calvin</code> creates <code>pytest-xyz-admin</code> and <code>pytest-xyz-developers</code> teams, inviting <code>joedoe</code> to both as maintainer.</p></li><li><p><code>calvin</code> transfers repository to <code>pytest-dev</code> and configures team access:</p><ul><li><p><code>pytest-xyz-admin</code> admin access;</p></li><li><p><code>pytest-xyz-developers</code> write access;</p></li></ul></li></ul><p>The <code>pytest-dev/Contributors</code> team has write access to all projects, and every project administrator is in it. We recommend that each plugin has at least three people who have the right to release to PyPI.</p><p>Repository owners can rest assured that no <code>pytest-dev</code> administrator will ever make releases of your repository or take ownership in any way, except in rare cases where someone becomes unresponsive after months of contact attempts. As stated, the objective is to share maintenance and avoid “plugin-abandon”.</p><h2 id="preparing-pull-requests" tabindex="-1">Preparing Pull Requests <a class="header-anchor" href="#preparing-pull-requests" aria-label="Permalink to &quot;Preparing Pull Requests&quot;">​</a></h2><h3 id="short-version" tabindex="-1">Short version <a class="header-anchor" href="#short-version" aria-label="Permalink to &quot;Short version&quot;">​</a></h3><ol><li><p>Fork the repository.</p></li><li><p>Enable and install <a href="https://pre-commit.com/" target="_blank" rel="noreferrer">pre-commit</a> to ensure style-guides and code checks are followed.</p></li><li><p>Follow <code>PEP-8</code> for naming and <a href="https://github.com/psf/black" target="_blank" rel="noreferrer">black</a> for formatting.</p></li><li><p>Tests are run using <code>tox</code>:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tox</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linting,py39</span></span></code></pre></div><p>The test environments above are usually enough to cover most cases locally.</p></li><li><p>Write a <code>changelog</code> entry: <code>changelog/2574.bugfix.rst</code>, use issue id number and one of <code>feature</code>, <code>improvement</code>, <code>bugfix</code>, <code>doc</code>, <code>deprecation</code>, <code>breaking</code>, <code>vendor</code> or <code>trivial</code> for the issue type.</p></li><li><p>Unless your change is a trivial or a documentation fix (e.g., a typo or reword of a small section) please add yourself to the <code>AUTHORS</code> file, in alphabetical order.</p></li></ol><h3 id="long-version" tabindex="-1">Long version <a class="header-anchor" href="#long-version" aria-label="Permalink to &quot;Long version&quot;">​</a></h3><p>What is a “pull request”? It informs the project’s core developers about the changes you want to review and merge. Pull requests are stored on <a href="https://github.com/pytest-dev/pytest/pulls" target="_blank" rel="noreferrer">GitHub servers</a>. Once you send a pull request, we can discuss its potential modifications and even add more commits to it later on. There’s an excellent tutorial on how Pull Requests work in the <a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests" target="_blank" rel="noreferrer">GitHub Help Center</a>.</p><p>Here is a simple overview, with pytest-specific bits:</p><ol><li><p>Fork the <a href="https://github.com/pytest-dev/pytest" target="_blank" rel="noreferrer">pytest GitHub repository</a>. It’s fine to use <code>pytest</code> as your fork repository name because it will live under your user.</p></li><li><p>Clone your fork locally using git and create a branch:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@github.com:YOUR_GITHUB_USERNAME/pytest.git</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># now, create your own branch off &quot;main&quot;:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">your-bugfix-branch-name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main</span></span></code></pre></div><p>Given we have “major.minor.micro” version numbers, bug fixes will usually be released in micro releases whereas features will be released in minor releases and incompatible changes in major releases.</p><p>You will need the tags to test locally, so be sure you have the tags from the main repository. If you suspect you don’t, set the main repository as upstream and fetch the tags:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">upstream</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/pytest-dev/pytest</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">upstream</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--tags</span></span></code></pre></div><p>If you need some help with Git, follow this quick start guide: <a href="https://git.wiki.kernel.org/index.php/QuickStart" target="_blank" rel="noreferrer">https://git.wiki.kernel.org/index.php/QuickStart</a></p></li><li><p>Install pre-commit and its hook on the pytest repo:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--user</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pre-commit</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pre-commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><p>Afterwards <code>pre-commit</code> will run whenever you commit.</p><p><a href="https://pre-commit.com/" target="_blank" rel="noreferrer">https://pre-commit.com/</a> is a framework for managing and maintaining multi-language pre-commit hooks to ensure code-style and code formatting is consistent.</p></li><li><p>Install tox</p><p>Tox is used to run all the tests and will automatically setup virtualenvs to run the tests in. (will implicitly use <a href="https://virtualenv.pypa.io/en/latest/" target="_blank" rel="noreferrer">https://virtualenv.pypa.io/en/latest/</a>):</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tox</span></span></code></pre></div></li><li><p>Run all the tests</p><p>You need to have Python 3.8 or later available in your system. Now running tests is as simple as issuing this command:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tox</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linting,py39</span></span></code></pre></div><p>This command will run tests via the “tox” tool against Python 3.9 and also perform “lint” coding-style checks.</p></li><li><p>You can now edit your local working copy and run the tests again as necessary. Please follow PEP-8 for naming.</p><p>You can pass different options to <code>tox</code>. For example, to run tests on Python 3.9 and pass options to pytest (e.g. enter pdb on failure) to pytest you can do:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tox</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">py39</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--pdb</span></span></code></pre></div><p>Or to only run tests in a particular test module on Python 3.9:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tox</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">py39</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">testing/test_config.py</span></span></code></pre></div><p>When committing, <code>pre-commit</code> will re-format the files if necessary.</p></li><li><p>If instead of using <code>tox</code> you prefer to run the tests directly, then we suggest to create a virtual environment and use an editable install with the <code>testing</code> extra:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">python3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">venv</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.venv</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">source</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.venv/bin/activate</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Linux</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.venv/Scripts/activate.bat</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># Windows</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.[testing]</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>Afterwards, you can edit the files and run pytest normally:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">testing/test_config.py</span></span></code></pre></div></li><li><p>Create a new changelog entry in <code>changelog</code>. The file should be named <code>&lt;issueid&gt;.&lt;type&gt;.rst</code>, where issueid is the number of the issue related to the change and type is one of <code>feature</code>, <code>improvement</code>, <code>bugfix</code>, <code>doc</code>, <code>deprecation</code>, <code>breaking</code>, <code>vendor</code> or <code>trivial</code>. You may skip creating the changelog entry if the change doesn’t affect the documented behaviour of pytest.</p></li><li><p>Add yourself to <code>AUTHORS</code> file if not there yet, in alphabetical order.</p></li><li><p>Commit and push once your tests pass and you are happy with your change(s):</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;commit message&gt;</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span></span></code></pre></div></li><li><p>Finally, submit a pull request through the GitHub website using this data:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">head-fork:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">YOUR_GITHUB_USERNAME/pytest</span></span>
<span class="line"><span style="color:#FFCB6B;">compare:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">your-branch-name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">base-fork:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-dev/pytest</span></span>
<span class="line"><span style="color:#FFCB6B;">base:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main</span></span></code></pre></div></li></ol><h3 id="writing-tests" tabindex="-1">Writing Tests <a class="header-anchor" href="#writing-tests" aria-label="Permalink to &quot;Writing Tests&quot;">​</a></h3><p>Writing tests for plugins or for pytest itself is often done using the <a href="https://docs.pytest.org/en/stable/reference/reference.html#pytester" target="_blank" rel="noreferrer">pytester fixture</a>, as a “black-box” test.</p><p>For example, to ensure a simple test passes you can write:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_true_assertion</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">pytester</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytester</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">makepyfile</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#C3E88D;">        def test_foo():</span></span>
<span class="line"><span style="color:#C3E88D;">            assert True</span></span>
<span class="line"><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytester</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runpytest</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assert_outcomes</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">failed</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">passed</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Alternatively, it is possible to make checks based on the actual output of the termal using glob-like expressions:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_true_assertion</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">pytester</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytester</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">makepyfile</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#C3E88D;">        def test_foo():</span></span>
<span class="line"><span style="color:#C3E88D;">            assert False</span></span>
<span class="line"><span style="color:#C3E88D;">    </span><span style="color:#89DDFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytester</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">runpytest</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    result</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">stdout</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fnmatch_lines</span><span style="color:#89DDFF;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*assert False*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*1 failed*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">])</span></span></code></pre></div><p>When choosing a file where to write a new test, take a look at the existing files and see if there’s one file which looks like a good fit. For example, a regression test about a bug in the <code>--lf</code> option should go into <code>test_cacheprovider.py</code>, given that this option is implemented in <code>cacheprovider.py</code>. If in doubt, go ahead and open a PR with your best guess and we can discuss this over the code.</p><h2 id="joining-the-development-team" tabindex="-1">Joining the Development Team <a class="header-anchor" href="#joining-the-development-team" aria-label="Permalink to &quot;Joining the Development Team&quot;">​</a></h2><p>Anyone who has successfully seen through a pull request which did not require any extra work from the development team to merge will themselves gain commit access if they so wish (if we forget to ask please send a friendly reminder). This does not mean there is any change in your contribution workflow: everyone goes through the same pull-request-and-review process and no-one merges their own pull requests unless already approved. It does however mean you can participate in the development process more fully since you can merge pull requests from other contributors yourself after having reviewed them.</p><h2 id="backporting-bug-fixes-for-the-next-patch-release" tabindex="-1">Backporting bug fixes for the next patch release <a class="header-anchor" href="#backporting-bug-fixes-for-the-next-patch-release" aria-label="Permalink to &quot;Backporting bug fixes for the next patch release&quot;">​</a></h2><p>Pytest makes a feature release every few weeks or months. In between, patch releases are made to the previous feature release, containing bug fixes only. The bug fixes usually fix regressions, but may be any change that should reach users before the next feature release.</p><p>Suppose for example that the latest release was 1.2.3, and you want to include a bug fix in 1.2.4 (check <a href="https://github.com/pytest-dev/pytest/releases" target="_blank" rel="noreferrer">https://github.com/pytest-dev/pytest/releases</a> for the actual latest release). The procedure for this is:</p><ol><li>First, make sure the bug is fixed in the main branch, with a regular pull request, as described above. An exception to this is if the bug fix is not applicable to <code>main</code> anymore.</li></ol><p>Automatic method:</p><p>Add a <code>backport 1.2.x</code> label to the PR you want to backport. This will create a backport PR against the <code>1.2.x</code> branch.</p><p>Manual method:</p><ol><li><p><code>git checkout origin/1.2.x -b backport-XXXX</code> # use the main PR number here</p></li><li><p>Locate the merge commit on the PR, in the merged message, for example:</p></li></ol><p><code>nicoddemus merged commit 0f8b462 into pytest-dev:main</code></p><ol start="3"><li><p><code>git cherry-pick -x -m1 REVISION</code> # use the revision you found above (<code>0f8b462</code>).</p></li><li><p>Open a PR targeting <code>1.2.x</code>:</p><ul><li><p>Prefix the message with <code>[1.2.x]</code>.</p></li><li><p>Delete the PR body, it usually contains a duplicate commit message.</p></li></ul></li></ol><h3 id="who-does-the-backporting" tabindex="-1">Who does the backporting <a class="header-anchor" href="#who-does-the-backporting" aria-label="Permalink to &quot;Who does the backporting&quot;">​</a></h3><p>As mentioned above, bugs should first be fixed on <code>main</code> (except in rare occasions that a bug only happens in a previous release). So, who should do the backport procedure described above?</p><ol><li><p>If the bug was fixed by a core developer, it is the main responsibility of that core developer to do the backport.</p></li><li><p>However, often the merge is done by another maintainer, in which case it is nice of them to do the backport procedure if they have the time.</p></li><li><p>For bugs submitted by non-maintainers, it is expected that a core developer will to do the backport, normally the one that merged the PR on <code>main</code>.</p></li><li><p>If a non-maintainers notices a bug which is fixed on <code>main</code> but has not been backported (due to maintainers forgetting to apply the needs backport label, or just plain missing it), they are also welcome to open a PR with the backport. The procedure is simple and really helps with the maintenance of the project.</p></li></ol><p>All the above are not rules, but merely some guidelines/suggestions on what we should expect about backports.</p><h2 id="handling-stale-issues-prs" tabindex="-1">Handling stale issues/PRs <a class="header-anchor" href="#handling-stale-issues-prs" aria-label="Permalink to &quot;Handling stale issues/PRs&quot;">​</a></h2><p>Stale issues/PRs are those where pytest contributors have asked for questions/changes and the authors didn’t get around to answer/implement them yet after a somewhat long time, or the discussion simply died because people seemed to lose interest.</p><p>There are many reasons why people don’t answer questions or implement requested changes: they might get busy, lose interest, or just forget about it, but the fact is that this is very common in open source software.</p><p>The pytest team really appreciates every issue and pull request, but being a high-volume project with many issues and pull requests being submitted daily, we try to reduce the number of stale issues and PRs by regularly closing them. When an issue/pull request is closed in this manner, it is by no means a dismissal of the topic being tackled by the issue/pull request, but it is just a way for us to clear up the queue and make the maintainers’ work more manageable. Submitters can always reopen the issue/pull request in their own time later if it makes sense.</p><h3 id="when-to-close" tabindex="-1">When to close <a class="header-anchor" href="#when-to-close" aria-label="Permalink to &quot;When to close&quot;">​</a></h3><p>Here are a few general rules the maintainers use deciding when to close issues/PRs because of lack of inactivity:</p><ul><li><p>Issues labeled <code>question</code> or <code>needs information</code>: closed after 14 days inactive.</p></li><li><p>Issues labeled <code>proposal</code>: closed after six months inactive.</p></li><li><p>Pull requests: after one month, consider pinging the author, update linked issue, or consider closing. For pull requests which are nearly finished, the team should consider finishing it up and merging it.</p></li></ul><p>The above are not hard rules, but merely guidelines, and can be (and often are!) reviewed on a case-by-case basis.</p><h3 id="closing-pull-requests" tabindex="-1">Closing pull requests <a class="header-anchor" href="#closing-pull-requests" aria-label="Permalink to &quot;Closing pull requests&quot;">​</a></h3><p>When closing a Pull Request, it needs to be acknowledging the time, effort, and interest demonstrated by the person which submitted it. As mentioned previously, it is not the intent of the team to dismiss a stalled pull request entirely but to merely to clear up our queue, so a message like the one below is warranted when closing a pull request that went stale:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Hi &lt;contributor&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">First of all, we would like to thank you for your time and effort on working on this, the pytest team deeply appreciates it.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">We noticed it has been awhile since you have updated this PR, however. pytest is a high activity project, with many issues/PRs being opened daily, so it is hard for us maintainers to track which PRs are ready for merging, for review, or need more attention.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">So for those reasons we, think it is best to close the PR for now, but with the only intention to clean up our queue, it is by no means a rejection of your changes. We still encourage you to re-open this PR (it is just a click of a button away) when you are ready to get back to it.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Again we appreciate your time for working on this, and hope you might get back to this at a later time!</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;bye&gt;</span></span></code></pre></div><h2 id="closing-issues" tabindex="-1">Closing Issues <a class="header-anchor" href="#closing-issues" aria-label="Permalink to &quot;Closing Issues&quot;">​</a></h2><p>When a pull request is submitted to fix an issue, add text like <code>closes #XYZW</code> to the PR description and/or commits (where <code>XYZW</code> is the issue number). See the <a href="https://help.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword" target="_blank" rel="noreferrer">GitHub docs</a> for more information.</p><p>When an issue is due to user error (e.g. misunderstanding of a functionality), please politely explain to the user why the issue raised is really a non-issue and ask them to close the issue if they have no further questions. If the original requestor is unresponsive, the issue will be handled as described in the section <a href="https://docs.pytest.org/en/latest/contributing.html#handling-stale-issues-prs" target="_blank" rel="noreferrer">Handling stale issues/PRs</a> above.</p>`,82),l=[o];function p(i,r,c,u,h,d){return s(),a("div",null,l)}const m=e(n,[["render",p]]);export{g as __pageData,m as default};
