import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"JavaScript, fetch, and JSON","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/pattern/javascript.md","filePath":"python/flask/user_guide/pattern/javascript.md","lastUpdated":1693404008000}'),l={name:"python/flask/user_guide/pattern/javascript.md"},p=o(`<h1 id="javascript-fetch-and-json" tabindex="-1">JavaScript, fetch, and JSON <a class="header-anchor" href="#javascript-fetch-and-json" aria-label="Permalink to &quot;JavaScript, fetch, and JSON {#javascript-fetch-and-json}&quot;">​</a></h1><p>You may want to make your HTML page dynamic, by changing data without reloading the entire page. Instead of submitting an HTML <code>&lt;form&gt;</code> and performing a redirect to re-render the template, you can add <a href="https://developer.mozilla.org/Web/JavaScript" target="_blank" rel="noreferrer">JavaScript</a> that calls <code>fetch()</code> and replaces content on the page.</p><p><code>fetch()</code> is the modern, built-in JavaScript solution to making requests from a page. You may have heard of other “AJAX” methods and libraries, such as <code>XMLHttpRequest()</code> or <a href="https://jquery.com/" target="_blank" rel="noreferrer">jQuery</a>. These are no longer needed in modern browsers, although you may choose to use them or another library depending on your application’s requirements. These docs will only focus on built-in JavaScript features.</p><h2 id="rendering-templates" tabindex="-1">Rendering Templates <a class="header-anchor" href="#rendering-templates" aria-label="Permalink to &quot;Rendering Templates {#rendering-templates}&quot;">​</a></h2><p>It is important to understand the difference between templates and JavaScript. Templates are rendered on the server, before the response is sent to the user’s browser. JavaScript runs in the user’s browser, after the template is rendered and sent. Therefore, it is impossible to use JavaScript to affect how the Jinja template is rendered, but it is possible to render data into the JavaScript that will run.</p><p>To provide data to JavaScript when rendering the template, use the <code>tojson()</code> filter in a <code>&lt;script&gt;</code> block. This will convert the data to a valid JavaScript object, and ensure that any unsafe HTML characters are rendered safely. If you do not use the <code>tojson</code> filter, you will get a <code>SyntaxError</code> in the browser console.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> generate_report()</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;report.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">chart_data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">data)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> generate_report()</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;report.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">chart_data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">data)</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chart_data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {{ chart_data</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">tojson }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    chartLib.</span><span style="color:#B392F0;">makeChart</span><span style="color:#E1E4E8;">(chart_data)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chart_data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {{ chart_data</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">tojson }}</span></span>
<span class="line"><span style="color:#24292E;">    chartLib.</span><span style="color:#6F42C1;">makeChart</span><span style="color:#24292E;">(chart_data)</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>A less common pattern is to add the data to a <code>data-</code> attribute on an HTML tag. In this case, you must use single quotes around the value, not double quotes, otherwise you will produce invalid or unsafe HTML.</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">data-chart</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&#39;{{ chart_data|tojson }}&#39;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">data-chart</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&#39;{{ chart_data|tojson }}&#39;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="generating-urls" tabindex="-1">Generating URLs <a class="header-anchor" href="#generating-urls" aria-label="Permalink to &quot;Generating URLs {#generating-urls}&quot;">​</a></h2><p>The other way to get data from the server to JavaScript is to make a request for it. First, you need to know the URL to request.</p><p>The simplest way to generate URLs is to continue to use <code>url_for()</code> when rendering the template. For example:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">user_url</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {{ </span><span style="color:#B392F0;">url_for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">, id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">current_user.id)</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">tojson }}</span></span>
<span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(user_url).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">user_url</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {{ </span><span style="color:#6F42C1;">url_for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">, id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">current_user.id)</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">tojson }}</span></span>
<span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(user_url).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span></code></pre></div><p>However, you might need to generate a URL based on information you only know in JavaScript. As discussed above, JavaScript runs in the user’s browser, not as part of the template rendering, so you can’t use <code>url_for</code> at that point.</p><p>In this case, you need to know the “root URL” under which your application is served. In simple setups, this is <code>/</code>, but it might also be something else, like <code>https://example.com/myapp/</code>.</p><p>A simple way to tell your JavaScript code about this root is to set it as a global variable when rendering the template. Then you can use it when generating URLs from JavaScript.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SCRIPT_ROOT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {{ request.script_root</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">tojson }}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> user_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// do something to get a user id from the page</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> user_url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#79B8FF;">SCRIPT_ROOT</span><span style="color:#9ECBFF;">}/user/\${</span><span style="color:#E1E4E8;">user_id</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(user_url).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">SCRIPT_ROOT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {{ request.script_root</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">tojson }}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> user_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// do something to get a user id from the page</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> user_url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#005CC5;">SCRIPT_ROOT</span><span style="color:#032F62;">}/user/\${</span><span style="color:#24292E;">user_id</span><span style="color:#032F62;">}\`</span></span>
<span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(user_url).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="making-a-request-with-fetch" tabindex="-1">Making a Request with fetch <a class="header-anchor" href="#making-a-request-with-fetch" aria-label="Permalink to &quot;Making a Request with fetch {#making-a-request-with-fetch}&quot;">​</a></h2><p><code>fetch()</code> takes two arguments, a URL and an object with other options, and returns a <code>Promise</code>. We won’t cover all the available options, and will only use <code>then()</code> on the promise, not other callbacks or <code>await</code> syntax. Read the linked MDN docs for more information about those features.</p><p>By default, the GET method is used. If the response contains JSON, it can be used with a <code>then()</code> callback chain.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">room_url</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {{ </span><span style="color:#B392F0;">url_for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;room_detail&quot;</span><span style="color:#E1E4E8;">, id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">room.id)</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">tojson }}</span></span>
<span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(room_url)</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// data is a parsed JSON object</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">room_url</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {{ </span><span style="color:#6F42C1;">url_for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;room_detail&quot;</span><span style="color:#24292E;">, id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">room.id)</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">tojson }}</span></span>
<span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(room_url)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// data is a parsed JSON object</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span></code></pre></div><p>To send data, use a data method such as <code>POST</code>, and pass the <code>body</code> option. The most common types for data are form data or JSON data.</p><p>To send form data, pass a populated <code>FormData</code> object. This uses the same format as an HTML form, and would be accessed with <code>request.form</code> in a Flask view.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FormData</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">data.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Flask Room&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">data.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Talk about Flask here.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(room_url, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;method&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;body&quot;</span><span style="color:#E1E4E8;">: data,</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FormData</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">data.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Flask Room&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">data.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Talk about Flask here.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(room_url, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;method&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;body&quot;</span><span style="color:#24292E;">: data,</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span></code></pre></div><p>In general, prefer sending request data as form data, as would be used when submitting an HTML form. JSON can represent more complex data, but unless you need that it’s better to stick with the simpler format. When sending JSON data, the <code>Content-Type: application/json</code> header must be sent as well, otherwise Flask will return a 400 error.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Flask Room&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Talk about Flask here.&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(room_url, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;method&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;headers&quot;</span><span style="color:#E1E4E8;">: {</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;body&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(data),</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Flask Room&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Talk about Flask here.&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(room_url, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;method&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;headers&quot;</span><span style="color:#24292E;">: {</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;body&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(data),</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="following-redirects" tabindex="-1">Following Redirects <a class="header-anchor" href="#following-redirects" aria-label="Permalink to &quot;Following Redirects {#following-redirects}&quot;">​</a></h2><p>A response might be a redirect, for example if you logged in with JavaScript instead of a traditional HTML form, and your view returned a redirect instead of JSON. JavaScript requests do follow redirects, but they don’t change the page. If you want to make the page change you can inspect the response and apply the redirect manually.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/login&quot;</span><span style="color:#E1E4E8;">, {</span><span style="color:#9ECBFF;">&quot;body&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response.redirected) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            window.location </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> response.url</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">showLoginError</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/login&quot;</span><span style="color:#24292E;">, {</span><span style="color:#032F62;">&quot;body&quot;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response.redirected) {</span></span>
<span class="line"><span style="color:#24292E;">            window.location </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> response.url</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">showLoginError</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="replacing-content" tabindex="-1">Replacing Content <a class="header-anchor" href="#replacing-content" aria-label="Permalink to &quot;Replacing Content {#replacing-content}&quot;">​</a></h2><p>A response might be new HTML, either a new section of the page to add or replace, or an entirely new page. In general, if you’re returning the entire page, it would be better to handle that with a redirect as shown in the previous section. The following example shows how to replace a <code>&lt;div&gt;</code> with the HTML returned by a request.</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;geology-fact&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ include &quot;geology_fact.html&quot; }}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">geology_url</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {{ </span><span style="color:#B392F0;">url_for</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;geology_fact&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">tojson }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">geology_div</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;geology-fact&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(geology_url)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> response.text)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> geology_div.innerHtml </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;geology-fact&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ include &quot;geology_fact.html&quot; }}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">geology_url</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {{ </span><span style="color:#6F42C1;">url_for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;geology_fact&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">tojson }}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">geology_div</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;geology-fact&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(geology_url)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> response.text)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> geology_div.innerHtml </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> text)</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="return-json-from-views" tabindex="-1">Return JSON from Views <a class="header-anchor" href="#return-json-from-views" aria-label="Permalink to &quot;Return JSON from Views {#return-json-from-views}&quot;">​</a></h2><p>To return a JSON object from your API view, you can directly return a dict from the view. It will be serialized to JSON automatically.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/&lt;int:id&gt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_detail</span><span style="color:#E1E4E8;">(id):</span></span>
<span class="line"><span style="color:#E1E4E8;">    user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.query.get_or_404(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">: User.username,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">: User.email,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;picture&quot;</span><span style="color:#E1E4E8;">: url_for(</span><span style="color:#9ECBFF;">&quot;static&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">filename</span><span style="color:#F97583;">=</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;users/</span><span style="color:#79B8FF;">{id}</span><span style="color:#9ECBFF;">/profile.png&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/&lt;int:id&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_detail</span><span style="color:#24292E;">(id):</span></span>
<span class="line"><span style="color:#24292E;">    user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.query.get_or_404(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">: User.username,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;email&quot;</span><span style="color:#24292E;">: User.email,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;picture&quot;</span><span style="color:#24292E;">: url_for(</span><span style="color:#032F62;">&quot;static&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">filename</span><span style="color:#D73A49;">=</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;users/</span><span style="color:#005CC5;">{id}</span><span style="color:#032F62;">/profile.png&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>If you want to return another JSON type, use the <code>jsonify()</code> function, which creates a response object with the given data serialized to JSON.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jsonify</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_list</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.query.order_by(User.name).all()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify([u.to_json() </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> u </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> users])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jsonify</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_list</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.query.order_by(User.name).all()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify([u.to_json() </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> u </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> users])</span></span></code></pre></div><p>It is usually not a good idea to return file data in a JSON response. JSON cannot represent binary data directly, so it must be base64 encoded, which can be slow, takes more bandwidth to send, and is not as easy to cache. Instead, serve files using one view, and generate a URL to the desired file to include in the JSON. Then the client can make a separate request to get the linked resource after getting the JSON.</p><h2 id="receiving-json-in-views" tabindex="-1">Receiving JSON in Views <a class="header-anchor" href="#receiving-json-in-views" aria-label="Permalink to &quot;Receiving JSON in Views {#receiving-json-in-views}&quot;">​</a></h2><p>Use the <code>json</code> property of the <code>request</code> object to decode the request’s body as JSON. If the body is not valid JSON, or the <code>Content-Type</code> header is not set to <code>application/json</code>, a <code>400</code> Bad Request error will be raised.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/user/&lt;int:id&gt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_update</span><span style="color:#E1E4E8;">(id):</span></span>
<span class="line"><span style="color:#E1E4E8;">    user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.query.get_or_404(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    user.update_from_json(request.json)</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.session.commit()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> user.to_json()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/user/&lt;int:id&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_update</span><span style="color:#24292E;">(id):</span></span>
<span class="line"><span style="color:#24292E;">    user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.query.get_or_404(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    user.update_from_json(request.json)</span></span>
<span class="line"><span style="color:#24292E;">    db.session.commit()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user.to_json()</span></span></code></pre></div>`,42),e=[p];function t(r,c,E,y,i,d){return a(),n("div",null,e)}const F=s(l,[["render",t]]);export{h as __pageData,F as default};
