import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"Form Validation with WTForms","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/pattern/wtform.md","filePath":"python/flask/user_guide/pattern/wtform.md","lastUpdated":1693404008000}'),o={name:"python/flask/user_guide/pattern/wtform.md"},e=l(`<h1 id="form-validation-with-wtforms" tabindex="-1">Form Validation with WTForms <a class="header-anchor" href="#form-validation-with-wtforms" aria-label="Permalink to &quot;Form Validation with WTForms {#form-validation-with-wtforms}&quot;">​</a></h1><p>When you have to work with form data submitted by a browser view, code quickly becomes very hard to read. There are libraries out there designed to make this process easier to manage. One of them is <a href="https://wtforms.readthedocs.io/" target="_blank" rel="noreferrer">WTForms</a> which we will handle here. If you find yourself in the situation of having many forms, you might want to give it a try.</p><p>When you are working with WTForms you have to define your forms as classes first. I recommend breaking up the application into multiple modules (<a href="/python/flask/user_guide/pattern/large_app#large-applications-as-packages">Large Applications as Packages</a>) for that and adding a separate module for the forms.</p><div class="tip custom-block"><p class="custom-block-title">Getting the most out of WTForms with an Extension</p><p>The <a href="https://flask-wtf.readthedocs.io/" target="_blank" rel="noreferrer">Flask-WTF</a> extension expands on this pattern and adds a few little helpers that make working with forms and Flask more fun. You can get it from <a href="https://pypi.org/project/Flask-WTF/" target="_blank" rel="noreferrer">PyPI</a>.</p></div><h2 id="the-forms" tabindex="-1">The Forms <a class="header-anchor" href="#the-forms" aria-label="Permalink to &quot;The Forms {#the-forms}&quot;">​</a></h2><p>This is an example form for a typical registration page:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> wtforms </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Form, BooleanField, StringField, PasswordField, validators</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegistrationForm</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Form</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringField(</span><span style="color:#9ECBFF;">&#39;Username&#39;</span><span style="color:#E1E4E8;">, [validators.Length(</span><span style="color:#FFAB70;">min</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">max</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">)])</span></span>
<span class="line"><span style="color:#E1E4E8;">    email </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StringField(</span><span style="color:#9ECBFF;">&#39;Email Address&#39;</span><span style="color:#E1E4E8;">, [validators.Length(</span><span style="color:#FFAB70;">min</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">max</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">35</span><span style="color:#E1E4E8;">)])</span></span>
<span class="line"><span style="color:#E1E4E8;">    password </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PasswordField(</span><span style="color:#9ECBFF;">&#39;New Password&#39;</span><span style="color:#E1E4E8;">, [</span></span>
<span class="line"><span style="color:#E1E4E8;">        validators.DataRequired(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        validators.EqualTo(</span><span style="color:#9ECBFF;">&#39;confirm&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Passwords must match&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    ])</span></span>
<span class="line"><span style="color:#E1E4E8;">    confirm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PasswordField(</span><span style="color:#9ECBFF;">&#39;Repeat Password&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    accept_tos </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BooleanField(</span><span style="color:#9ECBFF;">&#39;I accept the TOS&#39;</span><span style="color:#E1E4E8;">, [validators.DataRequired()])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> wtforms </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Form, BooleanField, StringField, PasswordField, validators</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegistrationForm</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Form</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringField(</span><span style="color:#032F62;">&#39;Username&#39;</span><span style="color:#24292E;">, [validators.Length(</span><span style="color:#E36209;">min</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#E36209;">max</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">25</span><span style="color:#24292E;">)])</span></span>
<span class="line"><span style="color:#24292E;">    email </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringField(</span><span style="color:#032F62;">&#39;Email Address&#39;</span><span style="color:#24292E;">, [validators.Length(</span><span style="color:#E36209;">min</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#E36209;">max</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">35</span><span style="color:#24292E;">)])</span></span>
<span class="line"><span style="color:#24292E;">    password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PasswordField(</span><span style="color:#032F62;">&#39;New Password&#39;</span><span style="color:#24292E;">, [</span></span>
<span class="line"><span style="color:#24292E;">        validators.DataRequired(),</span></span>
<span class="line"><span style="color:#24292E;">        validators.EqualTo(</span><span style="color:#032F62;">&#39;confirm&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">message</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Passwords must match&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    ])</span></span>
<span class="line"><span style="color:#24292E;">    confirm </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PasswordField(</span><span style="color:#032F62;">&#39;Repeat Password&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    accept_tos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BooleanField(</span><span style="color:#032F62;">&#39;I accept the TOS&#39;</span><span style="color:#24292E;">, [validators.DataRequired()])</span></span></code></pre></div><h2 id="in-the-view" tabindex="-1">In the View <a class="header-anchor" href="#in-the-view" aria-label="Permalink to &quot;In the View {#in-the-view}&quot;">​</a></h2><p>In the view function, the usage of this form looks like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/register&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">methods</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;GET&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    form </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> RegistrationForm(request.form)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> request.method </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> form.validate():</span></span>
<span class="line"><span style="color:#E1E4E8;">        user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User(form.username.data, form.email.data,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    form.password.data)</span></span>
<span class="line"><span style="color:#E1E4E8;">        db_session.add(user)</span></span>
<span class="line"><span style="color:#E1E4E8;">        flash(</span><span style="color:#9ECBFF;">&#39;Thanks for registering&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> redirect(url_for(</span><span style="color:#9ECBFF;">&#39;login&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&#39;register.html&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">form</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">form)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/register&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">methods</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    form </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RegistrationForm(request.form)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> request.method </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> form.validate():</span></span>
<span class="line"><span style="color:#24292E;">        user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User(form.username.data, form.email.data,</span></span>
<span class="line"><span style="color:#24292E;">                    form.password.data)</span></span>
<span class="line"><span style="color:#24292E;">        db_session.add(user)</span></span>
<span class="line"><span style="color:#24292E;">        flash(</span><span style="color:#032F62;">&#39;Thanks for registering&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> redirect(url_for(</span><span style="color:#032F62;">&#39;login&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&#39;register.html&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">form</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">form)</span></span></code></pre></div><p>Notice we’re implying that the view is using SQLAlchemy here (<a href="/python/flask/user_guide/pattern/sqlalchemy#sqlalchemy-in-flask">SQLAlchemy in Flask</a>), but that’s not a requirement, of course. Adapt the code as necessary.</p><p>Things to remember:</p><ol><li><p>create the form from the request <code>form</code> value if the data is submitted via the HTTP <code>POST</code> method and <code>args</code> if the data is submitted as <code>GET</code>.</p></li><li><p>to validate the data, call the <code>validate()</code> method, which will return <code>True</code> if the data validates, <code>False</code> otherwise.</p></li><li><p>to access individual values from the form, access <code>form.&lt;NAME&gt;.data</code>.</p></li></ol><h2 id="forms-in-templates" tabindex="-1">Forms in Templates <a class="header-anchor" href="#forms-in-templates" aria-label="Permalink to &quot;Forms in Templates {#forms-in-templates}&quot;">​</a></h2><p>Now to the template side. When you pass the form to the templates, you can easily render them there. Look at the following example template to see how easy this is. WTForms does half the form generation for us already. To make it even nicer, we can write a macro that renders a field with label and a list of errors if there are any.</p><p>Here’s an example <code>_formhelpers.html</code> template with such a macro:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{% macro render_field(field) %}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">dt</span><span style="color:#E1E4E8;">&gt;{{ field.label }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">dd</span><span style="color:#E1E4E8;">&gt;{{ field(**kwargs)|safe }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  {% if field.errors %}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">errors</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {% for error in field.errors %}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;{{ error }}&lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {% endfor %}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {% endif %}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">dd</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{% endmacro %}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{% macro render_field(field) %}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">dt</span><span style="color:#24292E;">&gt;{{ field.label }}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">dd</span><span style="color:#24292E;">&gt;{{ field(**kwargs)|safe }}</span></span>
<span class="line"><span style="color:#24292E;">  {% if field.errors %}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">errors</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {% for error in field.errors %}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;{{ error }}&lt;/</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {% endfor %}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  {% endif %}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">dd</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{% endmacro %}</span></span></code></pre></div><p>This macro accepts a couple of keyword arguments that are forwarded to WTForm’s field function, which renders the field for us. The keyword arguments will be inserted as HTML attributes. So, for example, you can call <code>render_field(form.username, class=&#39;username&#39;)</code> to add a class to the input element. Note that WTForms returns standard Python strings, so we have to tell Jinja2 that this data is already HTML-escaped with the <code>|safe</code> filter.</p><p>Here is the <code>register.html</code> template for the function we used above, which takes advantage of the <code>_formhelpers.html</code> template:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{% from &quot;_formhelpers.html&quot; import render_field %}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">post</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">dl</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ render_field(form.username) }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ render_field(form.email) }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ render_field(form.password) }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ render_field(form.confirm) }}</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ render_field(form.accept_tos) }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">dl</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">submit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">Register</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{% from &quot;_formhelpers.html&quot; import render_field %}</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">form</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">=</span><span style="color:#032F62;">post</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">dl</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{ render_field(form.username) }}</span></span>
<span class="line"><span style="color:#24292E;">    {{ render_field(form.email) }}</span></span>
<span class="line"><span style="color:#24292E;">    {{ render_field(form.password) }}</span></span>
<span class="line"><span style="color:#24292E;">    {{ render_field(form.confirm) }}</span></span>
<span class="line"><span style="color:#24292E;">    {{ render_field(form.accept_tos) }}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">dl</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">submit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">Register</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">form</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>For more information about WTForms, head over to the <a href="https://wtforms.readthedocs.io/" target="_blank" rel="noreferrer">WTForms website</a>.</p>`,21),p=[e];function t(r,c,i,E,y,d){return a(),n("div",null,p)}const f=s(o,[["render",t]]);export{h as __pageData,f as default};
