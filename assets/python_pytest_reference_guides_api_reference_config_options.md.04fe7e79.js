import{_ as e,o as s,c as a,V as t}from"./chunks/framework.48c56699.js";const y=JSON.parse('{"title":"Configuration Options","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/reference_guides/api_reference/config_options.md","filePath":"python/pytest/reference_guides/api_reference/config_options.md"}'),o={name:"python/pytest/reference_guides/api_reference/config_options.md"},n=t(`<h1 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h1><p>Here is a list of builtin configuration options that may be written in a <code>pytest.ini</code> (or <code>.pytest.ini</code>), <code>pyproject.toml</code>, <code>tox.ini</code>, or <code>setup.cfg</code> file, usually located at the root of your repository.</p><p>To see each file format in details, see <a href="https://docs.pytest.org/en/latest/reference/customize.html#config-file-formats" target="_blank" rel="noreferrer">Configuration file formats</a>.</p><div class="tip custom-block"><p class="custom-block-title">Warning</p><p>Usage of <code>setup.cfg</code> is not recommended except for very simple use cases. <code>.cfg</code> files use a different parser than <code>pytest.ini</code> and <code>tox.ini</code> which might cause hard to track down problems. When possible, it is recommended to use the latter files, or <code>pyproject.toml</code>, to hold your pytest configuration.</p></div><p>Configuration options may be overwritten in the command-line by using <code>-o/--override-ini</code>, which can also be passed multiple times. The expected format is <code>name=value</code>. For example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pytest </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">o console_output_style</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">classic </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">o cache_dir</span><span style="color:#89DDFF;">=/</span><span style="color:#A6ACCD;">tmp</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">mycache</span></span></code></pre></div><h2 id="addopts" tabindex="-1">addopts <a class="header-anchor" href="#addopts" aria-label="Permalink to &quot;addopts&quot;">​</a></h2><p>Add the specified <code>OPTS</code> to the set of command line arguments as if they had been specified by the user. Example: if you have this ini file content:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">addopts</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> --</span><span style="color:#F07178;">maxfail</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">2 -rf  </span><span style="color:#676E95;font-style:italic;"># exit after 2 failures, report fail info</span></span></code></pre></div><p>issuing <code>pytest test_hello.py</code> actually means:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--maxfail=2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_hello.py</span></span></code></pre></div><p>Default is to add no options.</p><h2 id="cache-dir" tabindex="-1">cache_dir <a class="header-anchor" href="#cache-dir" aria-label="Permalink to &quot;cache_dir&quot;">​</a></h2><p>Sets a directory where stores content of cache plugin. Default directory is <code>.pytest_cache</code> which is created in <a href="https://docs.pytest.org/en/latest/reference/customize.html#rootdir" target="_blank" rel="noreferrer">rootdir</a>. Directory may be relative or absolute path. If setting relative path, then directory is created relative to rootdir. Additionally path may contain environment variables, that will be expanded. For more information about cache plugin please refer to How to <a href="https://docs.pytest.org/en/latest/how-to/cache.html#cache-provider" target="_blank" rel="noreferrer">re-run failed tests and maintain state between test runs</a>.</p><h2 id="console-output-style" tabindex="-1">console_output_style <a class="header-anchor" href="#console-output-style" aria-label="Permalink to &quot;console_output_style&quot;">​</a></h2><p>Sets the console output style while running tests:</p><ul><li><p><code>classic</code>: classic pytest output.</p></li><li><p><code>progress</code>: like classic pytest output, but with a progress indicator.</p></li><li><p><code>progress-even-when-capture-no</code>: allows the use of the progress indicator even when <code>capture=no</code>.</p></li><li><p><code>count</code>: like progress, but shows progress as the number of tests completed instead of a percent.</p></li></ul><p>The default is <code>progress</code>, but you can fallback to <code>classic</code> if you prefer or the new mode is causing unexpected problems:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">console_output_style</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> classic</span></span></code></pre></div><h2 id="doctest-encoding" tabindex="-1">doctest_encoding <a class="header-anchor" href="#doctest-encoding" aria-label="Permalink to &quot;doctest_encoding&quot;">​</a></h2><p>Default encoding to use to decode text files with docstrings. <a href="https://docs.pytest.org/en/latest/how-to/doctest.html#doctest" target="_blank" rel="noreferrer">See how pytest handles doctests</a>.</p><h2 id="doctest-optionflags" tabindex="-1">doctest_optionflags <a class="header-anchor" href="#doctest-optionflags" aria-label="Permalink to &quot;doctest_optionflags&quot;">​</a></h2><p>One or more doctest flag names from the standard <code>doctest</code> module. <a href="https://docs.pytest.org/en/latest/how-to/doctest.html#doctest" target="_blank" rel="noreferrer">See how pytest handles doctests</a>.</p><h2 id="empty-parameter-set-mark" tabindex="-1">empty_parameter_set_mark <a class="header-anchor" href="#empty-parameter-set-mark" aria-label="Permalink to &quot;empty_parameter_set_mark&quot;">​</a></h2><p>Allows to pick the action for empty parametersets in parameterization</p><ul><li><p><code>skip</code> skips tests with an empty parameterset (default)</p></li><li><p><code>xfail</code> marks tests with an empty parameterset as xfail(run=False)</p></li><li><p><code>fail_at_collect</code> raises an exception if parametrize collects an empty parameter set</p></li></ul><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">empty_parameter_set_mark</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> xfail</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The default value of this option is planned to change to <code>xfail</code> in future releases as this is considered less error prone, see <a href="https://github.com/pytest-dev/pytest/issues/3155" target="_blank" rel="noreferrer">issue #3155</a> for more details.</p></div><h2 id="faulthandler-timeout" tabindex="-1">faulthandler_timeout <a class="header-anchor" href="#faulthandler-timeout" aria-label="Permalink to &quot;faulthandler_timeout&quot;">​</a></h2><p>Dumps the tracebacks of all threads if a test takes longer than X seconds to run (including fixture setup and teardown). Implemented using the <a href="https://docs.python.org/3/library/faulthandler.html#faulthandler.dump_traceback_later" target="_blank" rel="noreferrer">faulthandler.dump_traceback_later() </a>function, so all caveats there apply.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">faulthandler_timeout</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">5</span></span></code></pre></div><p>For more information please refer to <a href="https://docs.pytest.org/en/latest/how-to/failures.html#faulthandler" target="_blank" rel="noreferrer">Fault Handler</a>.</p><h2 id="filterwarnings" tabindex="-1">filterwarnings <a class="header-anchor" href="#filterwarnings" aria-label="Permalink to &quot;filterwarnings&quot;">​</a></h2><p>Sets a list of filters and actions that should be taken for matched warnings. By default all warnings emitted during the test session will be displayed in a summary at the end of the test session.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">filterwarnings</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">    error</span></span>
<span class="line"><span style="color:#A6ACCD;">    ignore::DeprecationWarning</span></span></code></pre></div><p>This tells pytest to ignore deprecation warnings and turn all other warnings into errors. For more information please refer to <a href="https://docs.pytest.org/en/latest/how-to/capture-warnings.html#warnings" target="_blank" rel="noreferrer">How to capture warnings</a>.</p><h2 id="junit-duration-report" tabindex="-1">junit_duration_report <a class="header-anchor" href="#junit-duration-report" aria-label="Permalink to &quot;junit_duration_report&quot;">​</a></h2><p><em>New in version 4.1.</em></p><p>Configures how durations are recorded into the JUnit XML report:</p><ul><li><p><code>total</code> (the default): duration times reported include setup, call, and teardown times.</p></li><li><p><code>call</code>: duration times reported include only call times, excluding setup and teardown.</p></li></ul><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">junit_duration_report</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> call</span></span></code></pre></div><h2 id="junit-family" tabindex="-1">junit_family <a class="header-anchor" href="#junit-family" aria-label="Permalink to &quot;junit_family&quot;">​</a></h2><p><em>New in version 4.2.</em></p><p><em>Changed in version 6.1</em>: Default changed to <code>xunit2</code>.</p><p>Configures the format of the generated JUnit XML file. The possible options are:</p><ul><li><p><code>xunit1</code> (or <code>legacy</code>): produces old style output, compatible with the xunit 1.0 format.</p></li><li><p><code>xunit2</code>: produces <a href="https://github.com/jenkinsci/xunit-plugin/blob/xunit-2.3.2/src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd" target="_blank" rel="noreferrer">xunit 2.0 style output</a>, which should be more compatible with latest Jenkins versions. This is the default.</p></li></ul><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">junit_family</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> xunit2</span></span></code></pre></div><h2 id="junit-logging" tabindex="-1">junit_logging <a class="header-anchor" href="#junit-logging" aria-label="Permalink to &quot;junit_logging&quot;">​</a></h2><p><em>New in version 3.5.</em></p><p><em>Changed in version 5.4</em>: <code>log</code>, <code>all</code>, <code>out-err</code> options added.</p><p>Configures if captured output should be written to the JUnit XML file. Valid values are:</p><ul><li><p><code>log</code>: write only <code>logging</code> captured output.</p></li><li><p><code>system-out</code>: write captured <code>stdout</code> contents.</p></li><li><p><code>system-err</code>: write captured <code>stderr</code> contents.</p></li><li><p><code>out-err</code>: write both captured <code>stdout</code> and <code>stderr</code> contents.</p></li><li><p><code>all</code>: write captured logging, <code>stdout</code> and <code>stderr</code> contents.</p></li><li><p><code>no</code> (the default): no captured output is written.</p></li></ul><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">junit_logging</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> system-out</span></span></code></pre></div><h2 id="junit-log-passing-tests" tabindex="-1">junit_log_passing_tests <a class="header-anchor" href="#junit-log-passing-tests" aria-label="Permalink to &quot;junit_log_passing_tests&quot;">​</a></h2><p><em>New in version 4.6.</em></p><p>If <code>junit_logging != &quot;no&quot;</code>, configures if the captured output should be written to the JUnit XML file for passing tests. Default is <code>True</code>.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span><span style="color:#A6ACCD;">\`</span></span>
<span class="line"><span style="color:#F07178;">junit_log_passing_tests</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> False</span></span></code></pre></div><h2 id="junit-suite-name" tabindex="-1">junit_suite_name <a class="header-anchor" href="#junit-suite-name" aria-label="Permalink to &quot;junit_suite_name&quot;">​</a></h2><p>To set the name of the root test suite xml item, you can configure the <code>junit_suite_name</code> option in your config file:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">junit_suite_name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> my_suite</span></span></code></pre></div><h2 id="log-auto-indent" tabindex="-1">log_auto_indent <a class="header-anchor" href="#log-auto-indent" aria-label="Permalink to &quot;log_auto_indent&quot;">​</a></h2><p>Allow selective auto-indentation of multiline log messages.</p><p>Supports command line option <code>--log-auto-indent [value]</code> and config option <code>log_auto_indent = [value]</code> to set the auto-indentation behavior for all logging.</p><p><code>[value]</code> can be:</p><ul><li><p><code>True</code> or <code>“On”</code> - Dynamically auto-indent multiline log messages</p></li><li><p><code>False</code> or <code>“Off”</code> or 0 - Do not auto-indent multiline log messages (the default behavior)</p></li><li><p><code>[positive integer]</code> - auto-indent multiline log messages by <code>[value]</code> spaces</p></li></ul><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_auto_indent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> False</span></span></code></pre></div><p>Supports passing kwarg <code>extra={&quot;auto_indent&quot;: [value]}</code> to calls to <code>logging.log()</code> to specify auto-indentation behavior for a specific entry in the log. <code>extra</code> kwarg overrides the value specified on the command line or in the config.</p><h2 id="log-cli" tabindex="-1">log_cli <a class="header-anchor" href="#log-cli" aria-label="Permalink to &quot;log_cli&quot;">​</a></h2><p>Enable log display during test run (also known as <a href="https://docs.pytest.org/en/latest/how-to/logging.html#live-logs" target="_blank" rel="noreferrer">“live logging”</a>). The default is <code>False</code>.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_cli</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> True</span></span></code></pre></div><h2 id="log-cli-date-format" tabindex="-1">log_cli_date_format <a class="header-anchor" href="#log-cli-date-format" aria-label="Permalink to &quot;log_cli_date_format&quot;">​</a></h2><p>Sets a <code>time.strftime()</code>-compatible string that will be used when formatting dates for live logging.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_cli_date_format</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> %Y-%m-%d %H:%M:%S</span></span></code></pre></div><p>For more information, see <a href="https://docs.pytest.org/en/latest/how-to/logging.html#live-logs" target="_blank" rel="noreferrer">Live Logs</a>.</p><h2 id="log-cli-format" tabindex="-1">log_cli_format <a class="header-anchor" href="#log-cli-format" aria-label="Permalink to &quot;log_cli_format&quot;">​</a></h2><p>Sets a <code>logging</code>-compatible string used to format live logging messages.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_cli_format</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> %(asctime)s %(levelname)s %(message)s</span></span></code></pre></div><p>For more information, see <a href="https://docs.pytest.org/en/latest/how-to/logging.html#live-logs" target="_blank" rel="noreferrer">Live Logs</a>.</p><h2 id="log-cli-level" tabindex="-1">log_cli_level <a class="header-anchor" href="#log-cli-level" aria-label="Permalink to &quot;log_cli_level&quot;">​</a></h2><p>Sets the minimum log message level that should be captured for live logging. The integer value or the names of the levels can be used.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_cli_level</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> INFO</span></span></code></pre></div><p>For more information, see <a href="https://docs.pytest.org/en/latest/how-to/logging.html#live-logs" target="_blank" rel="noreferrer">Live Logs</a>.</p><h2 id="log-date-format" tabindex="-1">log_date_format <a class="header-anchor" href="#log-date-format" aria-label="Permalink to &quot;log_date_format&quot;">​</a></h2><p>Sets a <code>time.strftime()</code>-compatible string that will be used when formatting dates for logging capture.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_date_format</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> %Y-%m-%d %H:%M:%S</span></span></code></pre></div><p>For more information, see <a href="https://docs.pytest.org/en/latest/how-to/logging.html#logging" target="_blank" rel="noreferrer">How to manage logging</a>.</p><h2 id="log-file" tabindex="-1">log_file <a class="header-anchor" href="#log-file" aria-label="Permalink to &quot;log_file&quot;">​</a></h2><p>Sets a file name relative to the current working directory where log messages should be written to, in addition to the other logging facilities that are active.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_file</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> logs/pytest-logs.txt</span></span></code></pre></div><p>For more information, see <a href="https://docs.pytest.org/en/latest/how-to/logging.html#logging" target="_blank" rel="noreferrer">How to manage logging</a>.</p><h2 id="log-file-date-format" tabindex="-1">log_file_date_format <a class="header-anchor" href="#log-file-date-format" aria-label="Permalink to &quot;log_file_date_format&quot;">​</a></h2><p>Sets a <code>time.strftime()</code>-compatible string that will be used when formatting dates for the logging file.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_file_date_format</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> %Y-%m-%d %H:%M:%S</span></span></code></pre></div><p>For more information, see <a href="https://docs.pytest.org/en/latest/how-to/logging.html#logging" target="_blank" rel="noreferrer">How to manage logging</a>.</p><h2 id="log-file-format" tabindex="-1">log_file_format <a class="header-anchor" href="#log-file-format" aria-label="Permalink to &quot;log_file_format&quot;">​</a></h2><p>Sets a <code>logging</code>-compatible string used to format logging messages redirected to the logging file.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_file_format</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> %(asctime)s %(levelname)s %(message)s</span></span></code></pre></div><p>For more information, see <a href="https://docs.pytest.org/en/latest/how-to/logging.html#logging" target="_blank" rel="noreferrer">How to manage logging</a>.</p><h2 id="log-file-level" tabindex="-1">log_file_level <a class="header-anchor" href="#log-file-level" aria-label="Permalink to &quot;log_file_level&quot;">​</a></h2><p>Sets the minimum log message level that should be captured for the logging file. The integer value or the names of the levels can be used.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_file_level</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> INFO</span></span></code></pre></div><p>For more information, see <a href="https://docs.pytest.org/en/latest/how-to/logging.html#logging" target="_blank" rel="noreferrer">How to manage logging</a>.</p><h2 id="log-format" tabindex="-1">log_format <a class="header-anchor" href="#log-format" aria-label="Permalink to &quot;log_format&quot;">​</a></h2><p>Sets a <code>logging</code>-compatible string used to format captured logging messages.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_format</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> %(asctime)s %(levelname)s %(message)s</span></span></code></pre></div><p>For more information, see <a href="https://docs.pytest.org/en/latest/how-to/logging.html#logging" target="_blank" rel="noreferrer">How to manage logging</a>.</p><h2 id="log-level" tabindex="-1">log_level <a class="header-anchor" href="#log-level" aria-label="Permalink to &quot;log_level&quot;">​</a></h2><p>Sets the minimum log message level that should be captured for logging capture. The integer value or the names of the levels can be used.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_level</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> INFO</span></span></code></pre></div><p>For more information, see <a href="https://docs.pytest.org/en/latest/how-to/logging.html#logging" target="_blank" rel="noreferrer">How to manage logging</a>.</p><h2 id="markers" tabindex="-1">markers <a class="header-anchor" href="#markers" aria-label="Permalink to &quot;markers&quot;">​</a></h2><p>When the <code>--strict-markers</code> or <code>--strict</code> command-line arguments are used, only known markers - defined in code by core pytest or some plugin - are allowed.</p><p>You can list additional markers in this setting to add them to the whitelist, in which case you probably want to add <code>--strict-markers</code> to <code>addopts</code> to avoid future regressions:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">addopts</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> --strict-markers</span></span>
<span class="line"><span style="color:#F07178;">markers</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">    slow</span></span>
<span class="line"><span style="color:#A6ACCD;">    serial</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The use of <code>--strict-markers</code> is highly preferred. <code>--strict</code> was kept for backward compatibility only and may be confusing for others as it only applies to markers and not to other options.</p></div><h2 id="minversion" tabindex="-1">minversion <a class="header-anchor" href="#minversion" aria-label="Permalink to &quot;minversion&quot;">​</a></h2><p>Specifies a minimal pytest version required for running tests.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">minversion</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 3.0  </span><span style="color:#676E95;font-style:italic;"># will fail if we run with pytest-2.8</span></span></code></pre></div><h2 id="norecursedirs" tabindex="-1">norecursedirs <a class="header-anchor" href="#norecursedirs" aria-label="Permalink to &quot;norecursedirs&quot;">​</a></h2><p>Set the directory basename patterns to avoid when recursing for test discovery. The individual (fnmatch-style) patterns are applied to the basename of a directory to decide if to recurse into it. Pattern matching characters:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">       matches everything</span></span>
<span class="line"><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">       matches any single character</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">seq</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">   matches any character </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> seq</span></span>
<span class="line"><span style="color:#89DDFF;">[!</span><span style="color:#A6ACCD;">seq</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  matches any char not </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> seq</span></span></code></pre></div><p>Default patterns are <code>&#39;*.egg&#39;</code>, <code>&#39;.*&#39;</code>, <code>&#39;_darcs&#39;</code>, <code>&#39;build&#39;</code>, <code>&#39;CVS&#39;</code>, <code>&#39;dist&#39;</code>, <code>&#39;node_modules&#39;</code>, <code>&#39;venv&#39;</code>, <code>&#39;{arch}&#39;</code>. Setting a <code>norecursedirs</code> replaces the default. Here is an example of how to avoid certain directories:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">norecursedirs</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> .svn _build tmp*</span></span></code></pre></div><p>This would tell <code>pytest</code> to not look into typical subversion or sphinx-build directories or into any <code>tmp</code> prefixed directory.</p><p>Additionally, <code>pytest</code> will attempt to intelligently identify and ignore a virtualenv by the presence of an activation script. Any directory deemed to be the root of a virtual environment will not be considered during test collection unless <code>‑‑collect‑in‑virtualenv</code> is given. Note also that <code>norecursedirs</code> takes precedence over <code>‑‑collect‑in‑virtualenv</code>; e.g. if you intend to run tests in a virtualenv with a base directory that matches <code>&#39;.*&#39;</code> you must override <code>norecursedirs</code> in addition to using the <code>‑‑collect‑in‑virtualenv</code> flag.</p><h2 id="python-classes" tabindex="-1">python_classes <a class="header-anchor" href="#python-classes" aria-label="Permalink to &quot;python_classes&quot;">​</a></h2><p>One or more name prefixes or glob-style patterns determining which classes are considered for test collection. Search for multiple glob patterns by adding a space between patterns. By default, pytest will consider any class prefixed with <code>Test</code> as a test collection. Here is an example of how to collect tests from classes that end in <code>Suite</code>:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">python_classes</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> *Suite</span></span></code></pre></div><p>Note that <code>unittest.TestCase</code> derived classes are always collected regardless of this option, as <code>unittest’s</code> own collection framework is used to collect those tests.</p><h2 id="python-files" tabindex="-1">python_files <a class="header-anchor" href="#python-files" aria-label="Permalink to &quot;python_files&quot;">​</a></h2><p>One or more Glob-style file patterns determining which python files are considered as test modules. Search for multiple glob patterns by adding a space between patterns:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">python_files</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> test_*.py check_*.py example_*.py</span></span></code></pre></div><p>Or one per line:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">python_files</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">    test_*.py</span></span>
<span class="line"><span style="color:#A6ACCD;">    check_*.py</span></span>
<span class="line"><span style="color:#A6ACCD;">    example_*.py</span></span></code></pre></div><p>By default, files matching <code>test_*.py</code> and <code>*_test.py</code> will be considered test modules.</p><h2 id="python-functions" tabindex="-1">python_functions <a class="header-anchor" href="#python-functions" aria-label="Permalink to &quot;python_functions&quot;">​</a></h2><p>One or more name prefixes or glob-patterns determining which test functions and methods are considered tests. Search for multiple glob patterns by adding a space between patterns. By default, pytest will consider any function prefixed with <code>test</code> as a test. Here is an example of how to collect test functions and methods that end in <code>_test</code>:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">python_functions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> *_test</span></span></code></pre></div><p>Note that this has no effect on methods that live on a <code>unittest.TestCase</code> derived class, as <code>unittest’s</code> own collection framework is used to collect those tests.</p><p>See <a href="https://docs.pytest.org/en/latest/example/pythoncollection.html#change-naming-conventions" target="_blank" rel="noreferrer">Changing naming conventions</a> for more detailed examples.</p><h2 id="pythonpath" tabindex="-1">pythonpath <a class="header-anchor" href="#pythonpath" aria-label="Permalink to &quot;pythonpath&quot;">​</a></h2><p>Sets list of directories that should be added to the python search path. Directories will be added to the head of <a href="https://docs.python.org/3/library/sys.html#sys.path" target="_blank" rel="noreferrer">sys.path</a>. Similar to the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" target="_blank" rel="noreferrer">PYTHONPATH</a> environment variable, the directories will be included in where Python will look for imported modules. Paths are relative to the <a href="https://docs.pytest.org/en/latest/reference/customize.html#rootdir" target="_blank" rel="noreferrer">rootdir</a> directory. Directories remain in path for the duration of the test session.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">pythonpath</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> src1 src2</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>pythonpath does not affect some imports that happen very early, most notably plugins loaded using the -p command line option.</p></div><h2 id="required-plugins" tabindex="-1">required_plugins <a class="header-anchor" href="#required-plugins" aria-label="Permalink to &quot;required_plugins&quot;">​</a></h2><p>A space separated list of plugins that must be present for pytest to run. Plugins can be listed with or without version specifiers directly following their name. Whitespace between different version specifiers is not allowed. If any one of the plugins is not found, emit an error.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">required_plugins</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest-django&gt;=3.0.0,&lt;4.0.0 pytest-html pytest-xdist&gt;=1.0.0</span></span></code></pre></div><h2 id="testpaths" tabindex="-1">testpaths <a class="header-anchor" href="#testpaths" aria-label="Permalink to &quot;testpaths&quot;">​</a></h2><p>Sets list of directories that should be searched for tests when no specific directories, files or test ids are given in the command line when executing pytest from the rootdir directory. File system paths may use shell-style wildcards, including the recursive \`\` pattern.</p><p>Useful when all project tests are in a known location to speed up test collection and to avoid picking up undesired tests by accident.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">testpaths</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> testing doc</span></span></code></pre></div><p>This configuration means that executing:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span></span></code></pre></div><p>has the same practical effects as executing:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">testing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">doc</span></span></code></pre></div><h2 id="tmp-path-retention-count" tabindex="-1">tmp_path_retention_count <a class="header-anchor" href="#tmp-path-retention-count" aria-label="Permalink to &quot;tmp_path_retention_count&quot;">​</a></h2><p>How many sessions should we keep the <code>tmp_path</code> directories, according to <code>tmp_path_retention_policy</code>.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">tmp_path_retention_count</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 3</span></span></code></pre></div><p><em>Default</em>: <code>3</code></p><h2 id="tmp-path-retention-policy" tabindex="-1">tmp_path_retention_policy <a class="header-anchor" href="#tmp-path-retention-policy" aria-label="Permalink to &quot;tmp_path_retention_policy&quot;">​</a></h2><p>Controls which directories created by the <code>tmp_path</code> fixture are kept around, based on test outcome.</p><ul><li><p><code>all</code>: retains directories for all tests, regardless of the outcome.</p></li><li><p><code>failed</code>: retains directories only for tests with outcome <code>error</code> or <code>failed</code>.</p></li><li><p><code>none</code>: directories are always removed after each test ends, regardless of the outcome.</p></li></ul><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">tmp_path_retention_policy</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p><em>Default</em>: <code>all</code></p><h2 id="usefixtures" tabindex="-1">usefixtures <a class="header-anchor" href="#usefixtures" aria-label="Permalink to &quot;usefixtures&quot;">​</a></h2><p>List of fixtures that will be applied to all test functions; this is semantically the same to apply the <code>@pytest.mark.usefixtures</code> marker to all test functions.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">usefixtures</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">    clean_db</span></span></code></pre></div><h2 id="xfail-strict" tabindex="-1">xfail_strict <a class="header-anchor" href="#xfail-strict" aria-label="Permalink to &quot;xfail_strict&quot;">​</a></h2><p>If set to <code>True</code>, tests marked with <code>@pytest.mark.xfail</code> that actually succeed will by default fail the test suite. For more information, see <a href="https://docs.pytest.org/en/latest/how-to/skipping.html#xfail-strict-tutorial" target="_blank" rel="noreferrer">strict parameter</a>.</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">xfail_strict</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> True</span></span></code></pre></div>`,170),l=[n];function i(p,r,c,d,h,u){return s(),a("div",null,l)}const m=e(o,[["render",i]]);export{y as __pageData,m as default};
