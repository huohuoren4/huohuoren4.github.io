import{_ as a,o as e,c as s,X as t}from"./chunks/framework.b5656a4e.js";const u=JSON.parse('{"title":"The Application Context","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/app_context.md","filePath":"python/flask/user_guide/app_context.md","lastUpdated":1691455424000}'),n={name:"python/flask/user_guide/app_context.md"},o=t(`<h1 id="the-application-context" tabindex="-1">The Application Context <a class="header-anchor" href="#the-application-context" aria-label="Permalink to &quot;The Application Context&quot;">​</a></h1><p>The application context keeps track of the application-level data during a request, CLI command, or other activity. Rather than passing the application around to each function, the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.current_app" target="_blank" rel="noreferrer">current_app</a> and g proxies are accessed instead.</p><p>This is similar to <a href="https://flask.palletsprojects.com/en/2.3.x/reqcontext/" target="_blank" rel="noreferrer">The Request Context</a>, which keeps track of request-level data during a request. A corresponding application context is pushed when a request context is pushed.</p><h2 id="purpose-of-the-context" tabindex="-1">Purpose of the Context <a class="header-anchor" href="#purpose-of-the-context" aria-label="Permalink to &quot;Purpose of the Context&quot;">​</a></h2><p>The <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask" target="_blank" rel="noreferrer">Flask</a> application object has attributes, such as <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.config" target="_blank" rel="noreferrer">config</a>, that are useful to access within views and <a href="https://flask.palletsprojects.com/en/2.3.x/cli/" target="_blank" rel="noreferrer">CLI commands</a>. However, importing the <code>app</code> instance within the modules in your project is prone to circular import issues. When using the <a href="https://flask.palletsprojects.com/en/2.3.x/patterns/appfactories/" target="_blank" rel="noreferrer">app factory pattern</a>or writing reusable <a href="https://flask.palletsprojects.com/en/2.3.x/blueprints/" target="_blank" rel="noreferrer">blueprints</a> or <a href="https://flask.palletsprojects.com/en/2.3.x/extensions/" target="_blank" rel="noreferrer">extensions</a> there won’t be an <code>app</code> instance to import at all.</p><p>Flask solves this issue with the application context. Rather than referring to an <code>app</code> directly, you use the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.current_app" target="_blank" rel="noreferrer">current_app</a> proxy, which points to the application handling the current activity.</p><p>Flask automatically pushes an application context when handling a request. View functions, error handlers, and other functions that run during a request will have access to <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.current_app" target="_blank" rel="noreferrer">current_app</a>.</p><p>Flask will also automatically push an app context when running CLI commands registered with <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.cli" target="_blank" rel="noreferrer">Flask.cli</a> using <code>@app.cli.command()</code>.</p><h2 id="lifetime-of-the-context" tabindex="-1">Lifetime of the Context <a class="header-anchor" href="#lifetime-of-the-context" aria-label="Permalink to &quot;Lifetime of the Context&quot;">​</a></h2><p>The application context is created and destroyed as necessary. When a Flask application begins handling a request, it pushes an application context and a <a href="https://flask.palletsprojects.com/en/2.3.x/reqcontext/" target="_blank" rel="noreferrer">request context</a>. When the request ends it pops the request context then the application context. Typically, an application context will have the same lifetime as a request.</p><p>See <a href="https://flask.palletsprojects.com/en/2.3.x/reqcontext/" target="_blank" rel="noreferrer">The Request Context</a> for more information about how the contexts work and the full life cycle of a request.</p><h2 id="manually-push-a-context" tabindex="-1">Manually Push a Context <a class="header-anchor" href="#manually-push-a-context" aria-label="Permalink to &quot;Manually Push a Context&quot;">​</a></h2><p>If you try to access <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.current_app" target="_blank" rel="noreferrer">current_app</a>, or anything that uses it, outside an application context, you’ll get this error message:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">RuntimeError: Working outside of application context.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">This typically means that you attempted to use functionality that</span></span>
<span class="line"><span style="color:#A6ACCD;">needed to interface with the current application object in some way.</span></span>
<span class="line"><span style="color:#A6ACCD;">To solve this, set up an application context with app.app_context().</span></span></code></pre></div><p>If you see that error while configuring your application, such as when initializing an extension, you can push a context manually since you have direct access to the <code>app</code>. Use <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.app_context" target="_blank" rel="noreferrer">app_context()</a> in a <code>with</code> block, and everything that runs in the block will have access to <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.current_app" target="_blank" rel="noreferrer">current_app</a>.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create_app</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Flask</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">__name__</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">app_context</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">init_db</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> app</span></span></code></pre></div><p>If you see that error somewhere else in your code not related to configuring the application, it most likely indicates that you should move that code into a view function or CLI command.</p><h2 id="storing-data" tabindex="-1">Storing Data <a class="header-anchor" href="#storing-data" aria-label="Permalink to &quot;Storing Data&quot;">​</a></h2><p>The application context is a good place to store common data during a request or CLI command. Flask provides the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.g" target="_blank" rel="noreferrer">g object</a> for this purpose. It is a simple namespace object that has the same lifetime as an application context.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The g name stands for “global”, but that is referring to the data being global within a context. The data on g is lost after the context ends, and it is not an appropriate place to store data between requests. Use the session or a database to store data across requests.</p></div><p>A common use for g is to manage resources during a request.</p><ol><li><p><code>get_X()</code> creates resource X if it does not exist, caching it as <code>g.X</code>.</p></li><li><p><code>teardown_X()</code> closes or otherwise deallocates the resource if it exists. It is registered as a <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.teardown_appcontext" target="_blank" rel="noreferrer">teardown_appcontext()</a> handler.</p></li></ol><p>For example, you can manage a database connection using this pattern:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> flask </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> g</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_db</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">db</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">db</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">connect_to_database</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">db</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">teardown_appcontext</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">teardown_db</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">exception</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    db </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">db</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">None)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> db </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">        db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>During a request, every call to <code>get_db()</code> will return the same connection, and it will be closed automatically at the end of the request.</p><p>You can use <a href="https://werkzeug.palletsprojects.com/en/2.3.x/local/#werkzeug.local.LocalProxy" target="_blank" rel="noreferrer">LocalProxy</a> to make a new context local from <code>get_db()</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> werkzeug</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">local </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> LocalProxy</span></span>
<span class="line"><span style="color:#A6ACCD;">db </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">LocalProxy</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">get_db</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Accessing <code>db</code> will call <code>get_db</code> internally, in the same way that <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.current_app" target="_blank" rel="noreferrer">current_app</a> works.</p><h2 id="events-and-signals" tabindex="-1">Events and Signals <a class="header-anchor" href="#events-and-signals" aria-label="Permalink to &quot;Events and Signals&quot;">​</a></h2><p>The application will call functions registered with <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.teardown_appcontext" target="_blank" rel="noreferrer">teardown_appcontext()</a> when the application context is popped.</p><p>The following signals are sent: <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.appcontext_pushed" target="_blank" rel="noreferrer">appcontext_pushed</a>, <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.appcontext_tearing_down" target="_blank" rel="noreferrer">appcontext_tearing_down</a>, and <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.appcontext_popped" target="_blank" rel="noreferrer">appcontext_popped</a>.</p>`,31),l=[o];function p(r,c,i,h,d,y){return e(),s("div",null,l)}const D=a(n,[["render",p]]);export{u as __pageData,D as default};
