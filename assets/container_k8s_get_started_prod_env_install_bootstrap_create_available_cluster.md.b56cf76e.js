import{_ as s,o as e,c as a,Q as o}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"Creating Highly Available Clusters with kubeadm","description":"","frontmatter":{},"headers":[],"relativePath":"container/k8s/get_started/prod_env/install/bootstrap/create_available_cluster.md","filePath":"container/k8s/get_started/prod_env/install/bootstrap/create_available_cluster.md","lastUpdated":1694607182000}'),n={name:"container/k8s/get_started/prod_env/install/bootstrap/create_available_cluster.md"},l=o(`<h1 id="creating-highly-available-clusters-with-kubeadm" tabindex="-1">Creating Highly Available Clusters with kubeadm <a class="header-anchor" href="#creating-highly-available-clusters-with-kubeadm" aria-label="Permalink to &quot;Creating Highly Available Clusters with kubeadm&quot;">​</a></h1><p>This page explains two different approaches to setting up a highly available Kubernetes cluster using kubeadm:</p><ul><li>With stacked control plane nodes. This approach requires less infrastructure. The etcd members and control plane nodes are co-located.</li><li>With an external etcd cluster. This approach requires more infrastructure. The control plane nodes and etcd members are separated.</li></ul><p>Before proceeding, you should carefully consider which approach best meets the needs of your applications and environment. <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/" target="_blank" rel="noreferrer">Options for Highly Available topology</a> outlines the advantages and disadvantages of each.</p><p>If you encounter issues with setting up the HA cluster, please report these in the kubeadm <a href="https://github.com/kubernetes/kubeadm/issues/new" target="_blank" rel="noreferrer">issue tracker</a>.</p><p>See also the <a href="https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/" target="_blank" rel="noreferrer">upgrade documentation</a>.</p><div class="warning custom-block"><p class="custom-block-title">Caution:</p><p>This page does not address running your cluster on a cloud provider. In a cloud environment, neither approach documented here works with Service objects of type LoadBalancer, or with dynamic PersistentVolumes.</p></div><h2 id="before-you-begin" tabindex="-1">Before you begin <a class="header-anchor" href="#before-you-begin" aria-label="Permalink to &quot;Before you begin&quot;">​</a></h2><p>The prerequisites depend on which topology you have selected for your cluster&#39;s control plane:</p><ul><li><p><strong>Stacked etcd</strong></p><p>You need:</p><ul><li><p>Three or more machines that meet <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin" target="_blank" rel="noreferrer">kubeadm&#39;s minimum requirements</a> for the control-plane nodes. Having an odd number of control plane nodes can help with leader selection in the case of machine or zone failure.</p><ul><li>including a container runtime, already set up and working</li></ul></li><li><p>Three or more machines that meet <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin" target="_blank" rel="noreferrer">kubeadm&#39;s minimum requirements</a> for the workers</p><ul><li>including a container runtime, already set up and working</li></ul></li><li><p>Full network connectivity between all machines in the cluster (public or private network)</p></li><li><p>Superuser privileges on all machines using <code>sudo</code></p><ul><li>You can use a different tool; this guide uses <code>sudo</code> in the examples.</li></ul></li><li><p>SSH access from one device to all nodes in the system</p></li><li><p><code>kubeadm</code> and <code>kubelet</code> already installed on all machines.</p></li></ul><p>See <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/#stacked-etcd-topology" target="_blank" rel="noreferrer">Stacked etcd topology</a> for context.</p></li><li><p><strong>External etcd</strong></p><p>You need:</p><ul><li><p>Three or more machines that meet <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin" target="_blank" rel="noreferrer">kubeadm&#39;s minimum requirements</a> for the control-plane nodes. Having an odd number of control plane nodes can help with leader selection in the case of machine or zone failure.</p><ul><li>including a <a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes" target="_blank" rel="noreferrer">container runtime</a>, already set up and working</li></ul></li><li><p>Three or more machines that meet <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin" target="_blank" rel="noreferrer">kubeadm&#39;s minimum requirements</a> for the workers</p><ul><li>including a container runtime, already set up and working</li></ul></li><li><p>Full network connectivity between all machines in the cluster (public or private network)</p></li><li><p>Superuser privileges on all machines using <code>sudo</code></p><ul><li>You can use a different tool; this guide uses <code>sudo</code> in the examples.</li></ul></li><li><p>SSH access from one device to all nodes in the system</p></li><li><p><code>kubeadm</code> and <code>kubelet</code> already installed on all machines.</p></li></ul><p>And you also need:</p><ul><li><p>Three or more additional machines, that will become etcd cluster members. Having an odd number of members in the etcd cluster is a requirement for achieving optimal voting quorum.</p><ul><li>These machines again need to have <code>kubeadm</code> and <code>kubelet</code> installed.</li><li>These machines also require a container runtime, that is already set up and working.</li></ul></li></ul><p>See <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/ha-topology/#external-etcd-topology" target="_blank" rel="noreferrer">External etcd topology</a> for context.</p></li></ul><h3 id="container-images" tabindex="-1">Container images <a class="header-anchor" href="#container-images" aria-label="Permalink to &quot;Container images&quot;">​</a></h3><p>Each host should have access read and fetch images from the Kubernetes container image registry, <code>registry.k8s.io</code>. If you want to deploy a highly-available cluster where the hosts do not have access to pull images, this is possible. You must ensure by some other means that the correct container images are already available on the relevant hosts.</p><h3 id="command-line-interface" tabindex="-1">Command line interface <a class="header-anchor" href="#command-line-interface" aria-label="Permalink to &quot;Command line interface&quot;">​</a></h3><p>To manage Kubernetes once your cluster is set up, you should <a href="https://kubernetes.io/docs/tasks/tools/#kubectl" target="_blank" rel="noreferrer">install kubectl</a> on your PC. It is also useful to install the <code>kubectl</code> tool on each control plane node, as this can be helpful for troubleshooting.</p><h2 id="first-steps-for-both-methods" tabindex="-1">First steps for both methods <a class="header-anchor" href="#first-steps-for-both-methods" aria-label="Permalink to &quot;First steps for both methods&quot;">​</a></h2><h3 id="create-load-balancer-for-kube-apiserver" tabindex="-1">Create load balancer for kube-apiserver <a class="header-anchor" href="#create-load-balancer-for-kube-apiserver" aria-label="Permalink to &quot;Create load balancer for kube-apiserver&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>There are many configurations for load balancers. The following example is only one option. Your cluster requirements may need a different configuration. Create a kube-apiserver load balancer with a name that resolves to DNS.</p></div><ol><li><p>In a cloud environment you should place your control plane nodes behind a TCP forwarding load balancer. This load balancer distributes traffic to all healthy control plane nodes in its target list. The health check for an apiserver is a TCP check on the port the kube-apiserver listens on (default value <code>:6443</code>).</p><ul><li><p>It is not recommended to use an IP address directly in a cloud environment.</p></li><li><p>The load balancer must be able to communicate with all control plane nodes on the apiserver port. It must also allow incoming traffic on its listening port.</p></li><li><p>Make sure the address of the load balancer always matches the address of kubeadm&#39;s <code>ControlPlaneEndpoint</code>.</p></li><li><p>Read the <a href="https://git.k8s.io/kubeadm/docs/ha-considerations.md#options-for-software-load-balancing" target="_blank" rel="noreferrer">Options for Software Load Balancing</a> guide for more details.</p></li></ul></li><li><p>Add the first control plane node to the load balancer, and test the connection:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">nc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">LOAD_BALANCER_I</span><span style="color:#E1E4E8;">P</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">POR</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">nc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">LOAD_BALANCER_I</span><span style="color:#24292E;">P</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">POR</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>A connection refused error is expected because the API server is not yet running. A timeout, however, means the load balancer cannot communicate with the control plane node. If a timeout occurs, reconfigure the load balancer to communicate with the control plane node.</p></li><li><p>Add the remaining control plane nodes to the load balancer target group.</p></li></ol><h2 id="stacked-control-plane-and-etcd-nodes" tabindex="-1">Stacked control plane and etcd nodes <a class="header-anchor" href="#stacked-control-plane-and-etcd-nodes" aria-label="Permalink to &quot;Stacked control plane and etcd nodes&quot;">​</a></h2><h3 id="steps-for-the-first-control-plane-node" tabindex="-1">Steps for the first control plane node <a class="header-anchor" href="#steps-for-the-first-control-plane-node" aria-label="Permalink to &quot;Steps for the first control plane node&quot;">​</a></h3><ol><li><p>Initialize the control plane:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubeadm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--control-plane-endpoint</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;LOAD_BALANCER_DNS:LOAD_BALANCER_PORT&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--upload-certs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubeadm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--control-plane-endpoint</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;LOAD_BALANCER_DNS:LOAD_BALANCER_PORT&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--upload-certs</span></span></code></pre></div><ul><li><p>You can use the <code>--kubernetes-version</code> flag to set the Kubernetes version to use. It is recommended that the versions of kubeadm, kubelet, kubectl and Kubernetes match.</p></li><li><p>The <code>--control-plane-endpoint</code> flag should be set to the address or DNS and port of the load balancer.</p></li><li><p>The <code>--upload-certs</code> flag is used to upload the certificates that should be shared across all the control-plane instances to the cluster. If instead, you prefer to copy certs across control-plane nodes manually or using automation tools, please remove this flag and refer to <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/#manual-certs" target="_blank" rel="noreferrer">Manual certificate distribution</a> section below.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>The <code>kubeadm init</code> flags <code>--config</code> and <code>--certificate-key</code> cannot be mixed, therefore if you want to use the <a href="https://kubernetes.io/docs/reference/config-api/kubeadm-config.v1beta3/" target="_blank" rel="noreferrer">kubeadm configuration</a> you must add the <code>certificateKey</code> field in the appropriate config locations (under <code>InitConfiguration</code> and <code>JoinConfiguration: controlPlane</code>).</p></div><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Some CNI network plugins require additional configuration, for example specifying the pod IP CIDR, while others do not. See the <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network" target="_blank" rel="noreferrer">CNI network documentation</a>. To add a pod CIDR pass the flag <code>--pod-network-cidr</code>, or if you are using a kubeadm configuration file set the <code>podSubnet</code> field under the <code>networking</code> object of <code>ClusterConfiguration</code>.</p></div><p>The output looks similar to:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">...</span></span>
<span class="line"><span style="color:#e1e4e8;">You can now join any number of control-plane node by running the following command on each as a root:</span></span>
<span class="line"><span style="color:#e1e4e8;">    kubeadm join 192.168.0.200:6443 --token 9vr73a.a8uxyaju799qwdjv --discovery-token-ca-cert-hash sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866 --control-plane --certificate-key f8902e114ef118304e561c3ecd4d0b543adc226b7a07f675f56564185ffe0c07</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">Please note that the certificate-key gives access to cluster sensitive data, keep it secret!</span></span>
<span class="line"><span style="color:#e1e4e8;">As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use kubeadm init phase upload-certs to reload certs afterward.</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">Then you can join any number of worker nodes by running the following on each as root:</span></span>
<span class="line"><span style="color:#e1e4e8;">    kubeadm join 192.168.0.200:6443 --token 9vr73a.a8uxyaju799qwdjv --discovery-token-ca-cert-hash sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">...</span></span>
<span class="line"><span style="color:#24292e;">You can now join any number of control-plane node by running the following command on each as a root:</span></span>
<span class="line"><span style="color:#24292e;">    kubeadm join 192.168.0.200:6443 --token 9vr73a.a8uxyaju799qwdjv --discovery-token-ca-cert-hash sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866 --control-plane --certificate-key f8902e114ef118304e561c3ecd4d0b543adc226b7a07f675f56564185ffe0c07</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Please note that the certificate-key gives access to cluster sensitive data, keep it secret!</span></span>
<span class="line"><span style="color:#24292e;">As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use kubeadm init phase upload-certs to reload certs afterward.</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Then you can join any number of worker nodes by running the following on each as root:</span></span>
<span class="line"><span style="color:#24292e;">    kubeadm join 192.168.0.200:6443 --token 9vr73a.a8uxyaju799qwdjv --discovery-token-ca-cert-hash sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866</span></span></code></pre></div><ul><li><p>Copy this output to a text file. You will need it later to join control plane and worker nodes to the cluster.</p></li><li><p>When <code>--upload-certs</code> is used with <code>kubeadm init</code>, the certificates of the primary control plane are encrypted and uploaded in the <code>kubeadm-certs</code> Secret.</p></li><li><p>To re-upload the certificates and generate a new decryption key, use the following command on a control plane node that is already joined to the cluster:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubeadm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">phase</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">upload-certs</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--upload-certs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubeadm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">phase</span><span style="color:#24292E;"> </span><span style="color:#032F62;">upload-certs</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--upload-certs</span></span></code></pre></div></li><li><p>You can also specify a custom <code>--certificate-key</code> during <code>init</code> that can later be used by <code>join</code>. To generate such a key you can use the following command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubeadm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">certs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">certificate-key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubeadm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">certs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">certificate-key</span></span></code></pre></div></li></ul><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>The <code>kubeadm-certs</code> Secret and decryption key expire after two hours.</p></div><div class="warning custom-block"><p class="custom-block-title">Caution:</p><p>As stated in the command output, the certificate key gives access to cluster sensitive data, keep it secret!</p></div></li><li><p>Apply the CNI plugin of your choice: <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network" target="_blank" rel="noreferrer">Follow these instructions</a> to install the CNI provider. Make sure the configuration corresponds to the Pod CIDR specified in the kubeadm configuration file (if applicable).</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>You must pick a network plugin that suits your use case and deploy it before you move on to next step. If you don&#39;t do this, you will not be able to launch your cluster properly.</p></div></li><li><p>Type the following and watch the pods of the control plane components get started:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pod</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kube-system</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-w</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pod</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kube-system</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-w</span></span></code></pre></div></li></ol><h3 id="steps-for-the-rest-of-the-control-plane-nodes" tabindex="-1">Steps for the rest of the control plane nodes <a class="header-anchor" href="#steps-for-the-rest-of-the-control-plane-nodes" aria-label="Permalink to &quot;Steps for the rest of the control plane nodes&quot;">​</a></h3><p>For each additional control plane node you should:</p><ol><li><p>Execute the join command that was previously given to you by the <code>kubeadm init</code> output on the first node. It should look something like this:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubeadm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">join</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">192.168</span><span style="color:#9ECBFF;">.0.200:6443</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--token</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#9ECBFF;">vr73a.a8uxyaju799qwdjv</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--discovery-token-ca-cert-hash</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--control-plane</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--certificate-key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">f8902e114ef118304e561c3ecd4d0b543adc226b7a07f675f56564185ffe0c07</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubeadm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">join</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">192.168</span><span style="color:#032F62;">.0.200:6443</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--token</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#032F62;">vr73a.a8uxyaju799qwdjv</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--discovery-token-ca-cert-hash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--control-plane</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--certificate-key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">f8902e114ef118304e561c3ecd4d0b543adc226b7a07f675f56564185ffe0c07</span></span></code></pre></div><ul><li>The <code>--control-plane</code> flag tells <code>kubeadm join</code> to create a new control plane.</li><li>The <code>--certificate-key ...</code> will cause the control plane certificates to be downloaded from the <code>kubeadm-certs</code> Secret in the cluster and be decrypted using the given key.</li></ul></li></ol><p>You can join multiple control-plane nodes in parallel.</p><h2 id="external-etcd-nodes" tabindex="-1">External etcd nodes <a class="header-anchor" href="#external-etcd-nodes" aria-label="Permalink to &quot;External etcd nodes&quot;">​</a></h2><p>Setting up a cluster with external etcd nodes is similar to the procedure used for stacked etcd with the exception that you should setup etcd first, and you should pass the etcd information in the kubeadm config file.</p><h3 id="set-up-the-etcd-cluster" tabindex="-1">Set up the etcd cluster <a class="header-anchor" href="#set-up-the-etcd-cluster" aria-label="Permalink to &quot;Set up the etcd cluster&quot;">​</a></h3><ol><li><p>Follow these <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/setup-ha-etcd-with-kubeadm/" target="_blank" rel="noreferrer">instructions</a> to set up the etcd cluster.</p></li><li><p>Set up SSH as described <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/#manual-certs" target="_blank" rel="noreferrer">here</a>.</p></li><li><p>Copy the following files from any etcd node in the cluster to the first control plane node:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> CONTROL_PLANE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;ubuntu@10.0.0.7&quot;</span></span>
<span class="line"><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/etcd/ca.crt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">CONTROL_PLANE</span><span style="color:#9ECBFF;">}&quot;:</span></span>
<span class="line"><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/apiserver-etcd-client.crt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">CONTROL_PLANE</span><span style="color:#9ECBFF;">}&quot;:</span></span>
<span class="line"><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/apiserver-etcd-client.key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">CONTROL_PLANE</span><span style="color:#9ECBFF;">}&quot;:</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> CONTROL_PLANE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ubuntu@10.0.0.7&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/etcd/ca.crt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">CONTROL_PLANE</span><span style="color:#032F62;">}&quot;:</span></span>
<span class="line"><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/apiserver-etcd-client.crt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">CONTROL_PLANE</span><span style="color:#032F62;">}&quot;:</span></span>
<span class="line"><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/apiserver-etcd-client.key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">CONTROL_PLANE</span><span style="color:#032F62;">}&quot;:</span></span></code></pre></div><ul><li>Replace the value of <code>CONTROL_PLANE</code> with the <code>user@host</code> of the first control-plane node.</li></ul></li></ol><h3 id="set-up-the-first-control-plane-node" tabindex="-1">Set up the first control plane node <a class="header-anchor" href="#set-up-the-first-control-plane-node" aria-label="Permalink to &quot;Set up the first control plane node&quot;">​</a></h3><ol><li><p>Create a file called <code>kubeadm-config.yaml</code> with the following contents:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">---</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">kubeadm.k8s.io/v1beta3</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">ClusterConfiguration</span></span>
<span class="line"><span style="color:#85E89D;">kubernetesVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">stable</span></span>
<span class="line"><span style="color:#85E89D;">controlPlaneEndpoint</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;LOAD_BALANCER_DNS:LOAD_BALANCER_PORT&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># change this (see below)</span></span>
<span class="line"><span style="color:#85E89D;">etcd</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">external</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">endpoints</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">https://ETCD_0_IP:2379</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># change ETCD_0_IP appropriately</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">https://ETCD_1_IP:2379</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># change ETCD_1_IP appropriately</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#9ECBFF;">https://ETCD_2_IP:2379</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># change ETCD_2_IP appropriately</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">caFile</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/etcd/ca.crt</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">certFile</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/apiserver-etcd-client.crt</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">keyFile</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/apiserver-etcd-client.key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">---</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">kubeadm.k8s.io/v1beta3</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">ClusterConfiguration</span></span>
<span class="line"><span style="color:#22863A;">kubernetesVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">stable</span></span>
<span class="line"><span style="color:#22863A;">controlPlaneEndpoint</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;LOAD_BALANCER_DNS:LOAD_BALANCER_PORT&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># change this (see below)</span></span>
<span class="line"><span style="color:#22863A;">etcd</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#22863A;">external</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">endpoints</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">https://ETCD_0_IP:2379</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># change ETCD_0_IP appropriately</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">https://ETCD_1_IP:2379</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># change ETCD_1_IP appropriately</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#032F62;">https://ETCD_2_IP:2379</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># change ETCD_2_IP appropriately</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">caFile</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/etc/kubernetes/pki/etcd/ca.crt</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">certFile</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/etc/kubernetes/pki/apiserver-etcd-client.crt</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">keyFile</span><span style="color:#24292E;">: </span><span style="color:#032F62;">/etc/kubernetes/pki/apiserver-etcd-client.key</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>The difference between stacked etcd and external etcd here is that the external etcd setup requires a configuration file with the etcd endpoints under the <code>external</code> object for <code>etcd</code>. In the case of the stacked etcd topology, this is managed automatically.</p></div><ul><li><p>Replace the following variables in the config template with the appropriate values for your cluster:</p><ul><li><code>LOAD_BALANCER_DNS</code></li><li><code>LOAD_BALANCER_PORT</code></li><li><code>ETCD_0_IP</code></li><li><code>ETCD_1_IP</code></li><li><code>ETCD_2_IP</code></li></ul></li></ul></li></ol><p>The following steps are similar to the stacked etcd setup:</p><ol><li><p>Run <code>sudo kubeadm init --config kubeadm-config.yaml --upload-certs</code> on this node.</p></li><li><p>Write the output join commands that are returned to a text file for later use.</p></li><li><p>Apply the CNI plugin of your choice.</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>You must pick a network plugin that suits your use case and deploy it before you move on to next step. If you don&#39;t do this, you will not be able to launch your cluster properly.</p></div></li></ol><h3 id="steps-for-the-rest-of-the-control-plane-nodes-1" tabindex="-1">Steps for the rest of the control plane nodes <a class="header-anchor" href="#steps-for-the-rest-of-the-control-plane-nodes-1" aria-label="Permalink to &quot;Steps for the rest of the control plane nodes&quot;">​</a></h3><p>The steps are the same as for the stacked etcd setup:</p><ul><li>Make sure the first control plane node is fully initialized.</li><li>Join each control plane node with the join command you saved to a text file. It&#39;s recommended to join the control plane nodes one at a time.</li><li>Don&#39;t forget that the decryption key from <code>--certificate-key</code> expires after two hours, by default.</li></ul><h2 id="common-tasks-after-bootstrapping-control-plane" tabindex="-1">Common tasks after bootstrapping control plane <a class="header-anchor" href="#common-tasks-after-bootstrapping-control-plane" aria-label="Permalink to &quot;Common tasks after bootstrapping control plane&quot;">​</a></h2><h3 id="install-workers" tabindex="-1">Install workers <a class="header-anchor" href="#install-workers" aria-label="Permalink to &quot;Install workers&quot;">​</a></h3><p>Worker nodes can be joined to the cluster with the command you stored previously as the output from the <code>kubeadm init</code> command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">kubeadm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">join</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">192.168</span><span style="color:#9ECBFF;">.0.200:6443</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--token</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#9ECBFF;">vr73a.a8uxyaju799qwdjv</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--discovery-token-ca-cert-hash</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kubeadm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">join</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">192.168</span><span style="color:#032F62;">.0.200:6443</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--token</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#032F62;">vr73a.a8uxyaju799qwdjv</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--discovery-token-ca-cert-hash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866</span></span></code></pre></div><h2 id="manual-certificate-distribution" tabindex="-1">Manual certificate distribution <a class="header-anchor" href="#manual-certificate-distribution" aria-label="Permalink to &quot;Manual certificate distribution&quot;">​</a></h2><p>If you choose to not use <code>kubeadm init</code> with the <code>--upload-certs</code> flag this means that you are going to have to manually copy the certificates from the primary control plane node to the joining control plane nodes.</p><p>There are many ways to do this. The following example uses <code>ssh</code> and <code>scp</code>:</p><p>SSH is required if you want to control all nodes from a single machine.</p><ol><li><p>Enable ssh-agent on your main device that has access to all other nodes in the system:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">eval</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">ssh-agent</span><span style="color:#9ECBFF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">eval</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">ssh-agent</span><span style="color:#032F62;">)</span></span></code></pre></div></li><li><p>Add your SSH identity to the session:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ssh-add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.ssh/path_to_private_key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ssh-add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.ssh/path_to_private_key</span></span></code></pre></div></li><li><p>SSH between nodes to check that the connection is working correctly.</p><ul><li><p>When you SSH to any node, add the <code>-A</code> flag. This flag allows the node that you have logged into via SSH to access the SSH agent on your PC. Consider alternative methods if you do not fully trust the security of your user session on the node.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ssh</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-A</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10.0</span><span style="color:#9ECBFF;">.0.7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ssh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.0</span><span style="color:#032F62;">.0.7</span></span></code></pre></div></li><li><p>When using sudo on any node, make sure to preserve the environment so SSH forwarding works:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-E</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-E</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span></span></code></pre></div></li></ul></li><li><p>After configuring SSH on all the nodes you should run the following script on the first control plane node after running <code>kubeadm init</code>. This script will copy the certificates from the first control plane node to the other control plane nodes:</p><p>In the following example, replace <code>CONTROL_PLANE_IPS</code> with the IP addresses of the other control plane nodes.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">USER</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">ubuntu</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># customizable</span></span>
<span class="line"><span style="color:#E1E4E8;">CONTROL_PLANE_IPS</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;10.0.0.7 10.0.0.8&quot;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> host </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> \${CONTROL_PLANE_IPS}; </span><span style="color:#F97583;">do</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/ca.crt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">USER</span><span style="color:#9ECBFF;">}&quot;@</span><span style="color:#E1E4E8;">$host</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/ca.key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">USER</span><span style="color:#9ECBFF;">}&quot;@</span><span style="color:#E1E4E8;">$host</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/sa.key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">USER</span><span style="color:#9ECBFF;">}&quot;@</span><span style="color:#E1E4E8;">$host</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/sa.pub</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">USER</span><span style="color:#9ECBFF;">}&quot;@</span><span style="color:#E1E4E8;">$host</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/front-proxy-ca.crt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">USER</span><span style="color:#9ECBFF;">}&quot;@</span><span style="color:#E1E4E8;">$host</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/front-proxy-ca.key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">USER</span><span style="color:#9ECBFF;">}&quot;@</span><span style="color:#E1E4E8;">$host</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/etcd/ca.crt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">USER</span><span style="color:#9ECBFF;">}&quot;@</span><span style="color:#E1E4E8;">$host</span><span style="color:#9ECBFF;">:etcd-ca.crt</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># Skip the next line if you are using external etcd</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">scp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/etcd/ca.key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;\${</span><span style="color:#E1E4E8;">USER</span><span style="color:#9ECBFF;">}&quot;@</span><span style="color:#E1E4E8;">$host</span><span style="color:#9ECBFF;">:etcd-ca.key</span></span>
<span class="line"><span style="color:#F97583;">done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">USER</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">ubuntu</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># customizable</span></span>
<span class="line"><span style="color:#24292E;">CONTROL_PLANE_IPS</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;10.0.0.7 10.0.0.8&quot;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> host </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> \${CONTROL_PLANE_IPS}; </span><span style="color:#D73A49;">do</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/ca.crt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">USER</span><span style="color:#032F62;">}&quot;@</span><span style="color:#24292E;">$host</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/ca.key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">USER</span><span style="color:#032F62;">}&quot;@</span><span style="color:#24292E;">$host</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/sa.key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">USER</span><span style="color:#032F62;">}&quot;@</span><span style="color:#24292E;">$host</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/sa.pub</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">USER</span><span style="color:#032F62;">}&quot;@</span><span style="color:#24292E;">$host</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/front-proxy-ca.crt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">USER</span><span style="color:#032F62;">}&quot;@</span><span style="color:#24292E;">$host</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/front-proxy-ca.key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">USER</span><span style="color:#032F62;">}&quot;@</span><span style="color:#24292E;">$host</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/etcd/ca.crt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">USER</span><span style="color:#032F62;">}&quot;@</span><span style="color:#24292E;">$host</span><span style="color:#032F62;">:etcd-ca.crt</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Skip the next line if you are using external etcd</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">scp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/etcd/ca.key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;\${</span><span style="color:#24292E;">USER</span><span style="color:#032F62;">}&quot;@</span><span style="color:#24292E;">$host</span><span style="color:#032F62;">:etcd-ca.key</span></span>
<span class="line"><span style="color:#D73A49;">done</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Caution:</p><p>Copy only the certificates in the above list. kubeadm will take care of generating the rest of the certificates with the required SANs for the joining control-plane instances. If you copy all the certificates by mistake, the creation of additional nodes could fail due to a lack of required SANs.</p></div></li><li><p>Then on each joining control plane node you have to run the following script before running <code>kubeadm join</code>. This script will move the previously copied certificates from the home directory to <code>/etc/kubernetes/pki</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">USER</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">ubuntu</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># customizable</span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/etcd</span></span>
<span class="line"><span style="color:#B392F0;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/</span><span style="color:#E1E4E8;">\${USER}</span><span style="color:#9ECBFF;">/ca.crt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#B392F0;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/</span><span style="color:#E1E4E8;">\${USER}</span><span style="color:#9ECBFF;">/ca.key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#B392F0;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/</span><span style="color:#E1E4E8;">\${USER}</span><span style="color:#9ECBFF;">/sa.pub</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#B392F0;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/</span><span style="color:#E1E4E8;">\${USER}</span><span style="color:#9ECBFF;">/sa.key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#B392F0;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/</span><span style="color:#E1E4E8;">\${USER}</span><span style="color:#9ECBFF;">/front-proxy-ca.crt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#B392F0;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/</span><span style="color:#E1E4E8;">\${USER}</span><span style="color:#9ECBFF;">/front-proxy-ca.key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#B392F0;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/</span><span style="color:#E1E4E8;">\${USER}</span><span style="color:#9ECBFF;">/etcd-ca.crt</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/etcd/ca.crt</span></span>
<span class="line"><span style="color:#6A737D;"># Skip the next line if you are using external etcd</span></span>
<span class="line"><span style="color:#B392F0;">mv</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/</span><span style="color:#E1E4E8;">\${USER}</span><span style="color:#9ECBFF;">/etcd-ca.key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/etc/kubernetes/pki/etcd/ca.key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">USER</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">ubuntu</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># customizable</span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/etcd</span></span>
<span class="line"><span style="color:#6F42C1;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/</span><span style="color:#24292E;">\${USER}</span><span style="color:#032F62;">/ca.crt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#6F42C1;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/</span><span style="color:#24292E;">\${USER}</span><span style="color:#032F62;">/ca.key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#6F42C1;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/</span><span style="color:#24292E;">\${USER}</span><span style="color:#032F62;">/sa.pub</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#6F42C1;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/</span><span style="color:#24292E;">\${USER}</span><span style="color:#032F62;">/sa.key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#6F42C1;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/</span><span style="color:#24292E;">\${USER}</span><span style="color:#032F62;">/front-proxy-ca.crt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#6F42C1;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/</span><span style="color:#24292E;">\${USER}</span><span style="color:#032F62;">/front-proxy-ca.key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/</span></span>
<span class="line"><span style="color:#6F42C1;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/</span><span style="color:#24292E;">\${USER}</span><span style="color:#032F62;">/etcd-ca.crt</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/etcd/ca.crt</span></span>
<span class="line"><span style="color:#6A737D;"># Skip the next line if you are using external etcd</span></span>
<span class="line"><span style="color:#6F42C1;">mv</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/</span><span style="color:#24292E;">\${USER}</span><span style="color:#032F62;">/etcd-ca.key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/etc/kubernetes/pki/etcd/ca.key</span></span></code></pre></div></li></ol>`,45),t=[l];function p(c,r,i,d,y,u){return e(),a("div",null,t)}const k=s(n,[["render",p]]);export{h as __pageData,k as default};
