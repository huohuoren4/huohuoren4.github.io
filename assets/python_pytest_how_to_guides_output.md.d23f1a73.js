import{_ as s,o as a,c as n,X as t}from"./chunks/framework.b5656a4e.js";const C=JSON.parse('{"title":"How to capture stdout/stderr output","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/output.md","filePath":"python/pytest/how_to_guides/output.md","lastUpdated":1689785296000}'),o={name:"python/pytest/how_to_guides/output.md"},e=t(`<h1 id="how-to-capture-stdout-stderr-output" tabindex="-1">How to capture stdout/stderr output <a class="header-anchor" href="#how-to-capture-stdout-stderr-output" aria-label="Permalink to &quot;How to capture stdout/stderr output&quot;">​</a></h1><h2 id="default-stdout-stderr-stdin-capturing-behaviour" tabindex="-1">Default stdout/stderr/stdin capturing behaviour <a class="header-anchor" href="#default-stdout-stderr-stdin-capturing-behaviour" aria-label="Permalink to &quot;Default stdout/stderr/stdin capturing behaviour&quot;">​</a></h2><p>During test execution any output sent to <code>stdout</code> and <code>stderr</code> is captured. If a test or a setup method fails its according captured output will usually be shown along with the failure traceback. (this behavior can be configured by the <code>--show-capture</code> command-line option).</p><p>In addition, <code>stdin</code> is set to a “null” object which will fail on attempts to read from it because it is rarely desired to wait for interactive input when running automated tests.</p><p>By default capturing is done by intercepting writes to low level file descriptors. This allows to capture output from simple print statements as well as output from a subprocess started by a test.</p><h2 id="setting-capturing-methods-or-disabling-capturing" tabindex="-1">Setting capturing methods or disabling capturing <a class="header-anchor" href="#setting-capturing-methods-or-disabling-capturing" aria-label="Permalink to &quot;Setting capturing methods or disabling capturing&quot;">​</a></h2><p>There are three ways in which <code>pytest</code> can perform capturing:</p><ul><li><p><code>fd</code> (file descriptor) level capturing (default): All writes going to the operating system file descriptors 1 and 2 will be captured.</p></li><li><p>sys level capturing: Only writes to Python files <code>sys.stdout</code> and <code>sys.stderr</code> will be captured. No capturing of writes to filedescriptors is performed.</p></li><li><p><code>tee-sys</code> capturing: Python writes to <code>sys.stdout</code> and <code>sys.stderr</code> will be captured, however the writes will also be passed-through to the actual <code>sys.stdout</code> and <code>sys.stderr</code>. This allows output to be ‘live printed’ and captured for plugin use, such as junitxml (new in pytest 5.4).</p></li></ul><p>You can influence output capturing mechanisms from the command line:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;"># disable all capturing</span></span>
<span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--capture=sys</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;"># replace sys.stdout/stderr with in-mem files</span></span>
<span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--capture=fd</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;"># also point filedescriptors 1 and 2 to temp file</span></span>
<span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--capture=tee-sys</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># combines &#39;sys&#39; and &#39;-s&#39;, capturing sys.stdout/stderr</span></span>
<span class="line"><span style="color:#A6ACCD;">                           </span><span style="color:#676E95;font-style:italic;"># and passing it along to the actual sys.stdout/stderr</span></span></code></pre></div><h2 id="using-print-statements-for-debugging" tabindex="-1">Using print statements for debugging <a class="header-anchor" href="#using-print-statements-for-debugging" aria-label="Permalink to &quot;Using print statements for debugging&quot;">​</a></h2><p>One primary benefit of the default capturing of stdout/stderr output is that you can use print statements for debugging:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_module.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setup_function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">function</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setting up</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> function</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_func1</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_func2</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span></code></pre></div><p>and running this module will show you precisely the output of the failing function and hide the other one:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span></span>
<span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-7.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/sweet/project</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_module.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.F</span><span style="color:#A6ACCD;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">================================= </span><span style="color:#C3E88D;">FAILURES</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=================================</span></span>
<span class="line"><span style="color:#FFCB6B;">________________________________</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_func2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">________________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_func2</span><span style="color:#89DDFF;">()</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">       assert False</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_module.py:12:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError</span></span>
<span class="line"><span style="color:#FFCB6B;">--------------------------</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stdout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">setup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">---------------------------</span></span>
<span class="line"><span style="color:#FFCB6B;">setting</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">up</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_func2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xdeadbeef000</span><span style="color:#89DDFF;">1&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">========================= </span><span style="color:#C3E88D;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==========================</span></span>
<span class="line"><span style="color:#FFCB6B;">FAILED</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_module.py::test_func2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">False</span></span>
<span class="line"><span style="color:#A6ACCD;">======================= </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">passed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">========================</span></span></code></pre></div><h2 id="accessing-captured-output-from-a-test-function" tabindex="-1">Accessing captured output from a test function <a class="header-anchor" href="#accessing-captured-output-from-a-test-function" aria-label="Permalink to &quot;Accessing captured output from a test function&quot;">​</a></h2><p>The <code>capsys</code>, <code>capsysbinary</code>, <code>capfd</code>, and <code>capfdbinary</code> fixtures allow access to stdout/stderr output created during test execution. Here is an example test function that performs some output related checks:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_myoutput</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">capsys</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># or use &quot;capfd&quot; for fd-level</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    sys</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">stderr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    captured </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> capsys</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readouterr</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> captured</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> captured</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">err</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">world</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">next</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    captured </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> capsys</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readouterr</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> captured</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">next</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>The <code>readouterr()</code> call snapshots the output so far - and capturing will be continued. After the test function finishes the original streams will be restored. Using <code>capsys</code> this way frees your test from having to care about setting/resetting output streams and also interacts well with pytest&#39;s own per-test capturing.</p><p>If you want to capture on filedescriptor level you can use the <code>capfd</code> fixture which offers the exact same interface but allows to also capture output from libraries or subprocesses that directly write to operating system level output streams (FD1 and FD2).</p><p>The return value from <code>readouterr</code> changed to a <code>namedtuple</code> with two attributes, <code>out</code> and <code>err</code>.</p><p>If the code under test writes non-textual data, you can capture this using the <code>capsysbinary</code> fixture which instead returns <code>bytes</code> from the <code>readouterr</code> method.</p><p>If the code under test writes non-textual data, you can capture this using the <code>capfdbinary</code> fixture which instead returns <code>bytes</code> from the <code>readouterr</code> method. The <code>capfdbinary</code> fixture operates on the filedescriptor level.</p><p>To temporarily disable capture within a test, both <code>capsys</code> and <code>capfd</code> have a <code>disabled()</code> method that can be used as a context manager, disabling capture inside the <code>with</code> block:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_disabling_capturing</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">capsys</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">this output is captured</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> capsys</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">disabled</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">output not captured, going directly to sys.stdout</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">this output is also captured</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div>`,25),p=[e];function l(c,r,i,y,d,u){return a(),n("div",null,p)}const A=s(o,[["render",l]]);export{C as __pageData,A as default};
