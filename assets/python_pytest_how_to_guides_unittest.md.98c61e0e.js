import{_ as s,o as a,c as n,V as t}from"./chunks/framework.48c56699.js";const F=JSON.parse('{"title":"How to use unittest-based tests with pytest","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/unittest.md","filePath":"python/pytest/how_to_guides/unittest.md","lastUpdated":1689870304000}'),e={name:"python/pytest/how_to_guides/unittest.md"},l=t(`<h1 id="how-to-use-unittest-based-tests-with-pytest" tabindex="-1">How to use unittest-based tests with pytest <a class="header-anchor" href="#how-to-use-unittest-based-tests-with-pytest" aria-label="Permalink to &quot;How to use unittest-based tests with pytest&quot;">​</a></h1><p><code>pytest</code> supports running Python <code>unittest</code>-based tests out of the box. It’s meant for leveraging existing <code>unittest</code>-based test suites to use pytest as a test runner and also allow to incrementally adapt the test suite to take full advantage of pytest’s features.</p><p>To run an existing <code>unittest</code>-style test suite using <code>pytest</code>, type:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tests</span></span></code></pre></div><p>pytest will automatically collect <code>unittest.TestCase</code> subclasses and their <code>test</code> methods in <code>test_*.py</code> or <code>*_test.py</code> files.</p><p>Almost all <code>unittest</code> features are supported:</p><ul><li><p><code>@unittest.skip</code> style decorators;</p></li><li><p><code>setUp/tearDown</code>;</p></li><li><p><code>setUpClass/tearDownClass</code>;</p></li><li><p><code>setUpModule/tearDownModule</code>;</p></li></ul><p>Additionally, subtests are supported by the pytest-subtests plugin.</p><p>Up to this point pytest does not have support for the following features:</p><ul><li>load_tests protocol;</li></ul><h2 id="benefits-out-of-the-box" tabindex="-1">Benefits out of the box <a class="header-anchor" href="#benefits-out-of-the-box" aria-label="Permalink to &quot;Benefits out of the box&quot;">​</a></h2><p>By running your test suite with pytest you can make use of several features, in most cases without having to modify existing code:</p><ul><li><p>Obtain more informative tracebacks;</p></li><li><p>stdout and stderr capturing;</p></li><li><p>Test selection options using <code>-k</code> and <code>-m</code> flags;</p></li><li><p>Stopping after the first (or N) failures;</p></li><li><p><code>–pdb</code> command-line option for debugging on test failures (see note below);</p></li><li><p>Distribute tests to multiple CPUs using the pytest-xdist plugin;</p></li><li><p>Use plain assert-statements instead of <code>self.assert*</code> functions (unittest2pytest is immensely helpful in this);</p></li></ul><h2 id="pytest-features-in-unittest-testcase-subclasses" tabindex="-1">pytest features in unittest.TestCase subclasses <a class="header-anchor" href="#pytest-features-in-unittest-testcase-subclasses" aria-label="Permalink to &quot;pytest features in unittest.TestCase subclasses&quot;">​</a></h2><p>The following pytest features work in <code>unittest.TestCase</code> subclasses:</p><ul><li><p>Marks: skip, skipif, xfail;</p></li><li><p>Auto-use fixtures;</p></li></ul><p>The following pytest features do not work, and probably never will due to different design philosophies:</p><ul><li><p>Fixtures (except for <code>autouse</code> fixtures, see below);</p></li><li><p>Parametrization;</p></li><li><p>Custom hooks;</p></li></ul><p>Third party plugins may or may not work well, depending on the plugin and the test suite.</p><h2 id="mixing-pytest-fixtures-into-unittest-testcase-subclasses-using-marks" tabindex="-1">Mixing pytest fixtures into unittest.TestCase subclasses using marks <a class="header-anchor" href="#mixing-pytest-fixtures-into-unittest-testcase-subclasses-using-marks" aria-label="Permalink to &quot;Mixing pytest fixtures into unittest.TestCase subclasses using marks&quot;">​</a></h2><p>Running your unittest with <code>pytest</code> allows you to use its fixture mechanism with <code>unittest.TestCase</code> style tests. Assuming you have at least skimmed the pytest fixture features, let’s jump-start into an example that integrates a pytest <code>db_class</code> fixture, setting up a class-cached database object, and then reference it from a unittest-style test:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># we define a fixture function below and it will be &quot;used&quot; by</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># referencing its name from tests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">scope</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">class</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">db_class</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DummyDB</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># set a class attribute on the invoking test context</span></span>
<span class="line"><span style="color:#A6ACCD;">    request</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cls</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">db</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DummyDB</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>This defines a fixture function <code>db_class</code> which - if used - is called once for each test class and which sets the class-level db attribute to a <code>DummyDB</code> instance. The fixture function achieves this by receiving a special <code>request</code> object which gives access to the requesting test context such as the <code>cls</code> attribute, denoting the class from which the fixture is used. This architecture de-couples fixture writing from actual test code and allows re-use of the fixture by a minimal reference, the fixture name. So let’s write an actual <code>unittest.TestCase</code> class using our fixture definition:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_unittest_db.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">usefixtures</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">db_class</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyTest</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unittest</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">TestCase</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_method1</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hasattr</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">db</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">db</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># fail for demo purposes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_method2</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">db</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># fail for demo purposes</span></span></code></pre></div><p>The <code>@pytest.mark.usefixtures(&quot;db_class&quot;)</code> class-decorator makes sure that the pytest fixture function <code>db_class</code> is called once per class. Due to the deliberately failing assert statements, we can take a look at the <code>self.db</code> values in the traceback:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_unittest_db.py</span></span>
<span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-7.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/sweet/project</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_unittest_db.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">FF</span><span style="color:#A6ACCD;">                                               [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">================================= </span><span style="color:#C3E88D;">FAILURES</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=================================</span></span>
<span class="line"><span style="color:#FFCB6B;">___________________________</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MyTest.test_method1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">____________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">self</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">test_unittest_db.MyTest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">testMethod=test_method</span><span style="color:#89DDFF;">1&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_method1</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">self</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hasattr</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">self,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">db</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">       assert 0, self.db  </span><span style="color:#676E95;font-style:italic;"># fail for demo purposes</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">AssertionError:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">conftest.db_class.</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">local</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">.DummyDB</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xdeadbeef000</span><span style="color:#89DDFF;">1&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_unittest_db.py:11:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError</span></span>
<span class="line"><span style="color:#FFCB6B;">___________________________</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MyTest.test_method2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">____________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">self</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">test_unittest_db.MyTest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">testMethod=test_method</span><span style="color:#89DDFF;">2&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_method2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">self</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">       assert 0, self.db  </span><span style="color:#676E95;font-style:italic;"># fail for demo purposes</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">AssertionError:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">conftest.db_class.</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">local</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">.DummyDB</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">object</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xdeadbeef000</span><span style="color:#89DDFF;">1&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_unittest_db.py:14:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError</span></span>
<span class="line"><span style="color:#A6ACCD;">========================= </span><span style="color:#C3E88D;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==========================</span></span>
<span class="line"><span style="color:#FFCB6B;">FAILED</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_unittest_db.py::MyTest::test_method1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">conft...</span></span>
<span class="line"><span style="color:#FFCB6B;">FAILED</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_unittest_db.py::MyTest::test_method2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">conft...</span></span>
<span class="line"><span style="color:#A6ACCD;">============================ </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=============================</span></span></code></pre></div><p>This default pytest traceback shows that the two test methods share the same <code>self.db</code> instance which was our intention when writing the class-scoped fixture function above.</p><h2 id="using-autouse-fixtures-and-accessing-other-fixtures" tabindex="-1">Using autouse fixtures and accessing other fixtures <a class="header-anchor" href="#using-autouse-fixtures-and-accessing-other-fixtures" aria-label="Permalink to &quot;Using autouse fixtures and accessing other fixtures&quot;">​</a></h2><p>Although it’s usually better to explicitly declare use of fixtures you need for a given test, you may sometimes want to have fixtures that are automatically used in a given context. After all, the traditional style of unittest-setup mandates the use of this implicit fixture writing and chances are, you are used to it or like it.</p><p>You can flag fixture functions with <code>@pytest.fixture(autouse=True)</code> and define the fixture function in the context where you want it used. Let’s look at an <code>initdir</code> fixture which makes all test methods of a <code>TestCase</code> class execute in a temporary directory with a pre-initialized <code>samplefile.ini</code>. Our <code>initdir</code> fixture itself uses the pytest builtin tmp_path fixture to delegate the creation of a per-test temporary directory:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_unittest_cleandir.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> unittest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyTest</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">unittest</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">TestCase</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">autouse</span><span style="color:#89DDFF;">=True)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">initdir</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">tmp_path</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">monkeypatch</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        monkeypatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">chdir</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tmp_path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># change to pytest-provided temporary directory</span></span>
<span class="line"><span style="color:#A6ACCD;">        tmp_path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">joinpath</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">samplefile.ini</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">write_text</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"># testdata</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_method</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">samplefile.ini</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            s </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">testdata</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> s</span></span></code></pre></div><p>Due to the <code>autouse</code> flag the <code>initdir</code> fixture function will be used for all methods of the class where it is defined. This is a shortcut for using a <code>@pytest.mark.usefixtures(&quot;initdir&quot;)</code> marker on the class like in the previous example.</p><p>Running this test module …:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-q</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_unittest_cleandir.py</span></span>
<span class="line"><span style="color:#82AAFF;">.</span><span style="color:#A6ACCD;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">passed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span></span></code></pre></div><p>… gives us one passed test because the <code>initdir</code> fixture function was executed ahead of the <code>test_method</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p><code>unittest.TestCase</code> methods cannot directly receive fixture arguments as implementing that is likely to inflict on the ability to run general unittest.TestCase test suites.</p><p>The above <code>usefixtures</code> and <code>autouse</code> examples should help to mix in pytest fixtures into unittest suites.</p><p>You can also gradually move away from subclassing from <code>unittest.TestCase</code> to plain asserts and then start to benefit from the full pytest feature set step by step.</p></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Due to architectural differences between the two frameworks, setup and teardown for <code>unittest</code>-based tests is performed during the <code>call</code> phase of testing instead of in <code>pytest’s</code> standard <code>setup</code> and <code>teardown</code> stages. This can be important to understand in some situations, particularly when reasoning about errors. For example, if a <code>unittest</code>-based suite exhibits errors during setup, <code>pytest</code> will report no errors during its <code>setup</code> phase and will instead raise the error during <code>call</code>.</p></div>`,37),o=[l];function p(c,r,i,y,D,C){return a(),n("div",null,o)}const d=s(e,[["render",p]]);export{F as __pageData,d as default};
