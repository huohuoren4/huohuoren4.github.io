import{_ as e,o as t,c as a,Q as s}from"./chunks/framework.01af844e.js";const f=JSON.parse('{"title":"PKI certificates and requirements","description":"","frontmatter":{},"headers":[],"relativePath":"container/k8s/get_started/best_practice/pki_certificate.md","filePath":"container/k8s/get_started/best_practice/pki_certificate.md","lastUpdated":1694607182000}'),r={name:"container/k8s/get_started/best_practice/pki_certificate.md"},n=s(`<h1 id="pki-certificates-and-requirements" tabindex="-1">PKI certificates and requirements <a class="header-anchor" href="#pki-certificates-and-requirements" aria-label="Permalink to &quot;PKI certificates and requirements&quot;">​</a></h1><p>Kubernetes requires PKI certificates for authentication over TLS. If you install Kubernetes with <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/" target="_blank" rel="noreferrer">kubeadm</a>, the certificates that your cluster requires are automatically generated. You can also generate your own certificates -- for example, to keep your private keys more secure by not storing them on the API server. This page explains the certificates that your cluster requires.</p><h2 id="how-certificates-are-used-by-your-cluster" tabindex="-1">How certificates are used by your cluster <a class="header-anchor" href="#how-certificates-are-used-by-your-cluster" aria-label="Permalink to &quot;How certificates are used by your cluster&quot;">​</a></h2><p>Kubernetes requires PKI for the following operations:</p><ul><li>Client certificates for the kubelet to authenticate to the API server</li><li>Kubelet <a href="https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#client-and-serving-certificates" target="_blank" rel="noreferrer">server certificates</a> for the API server to talk to the kubelets</li><li>Server certificate for the API server endpoint</li><li>Client certificates for administrators of the cluster to authenticate to the API server</li><li>Client certificates for the API server to talk to the kubelets</li><li>Client certificate for the API server to talk to etcd</li><li>Client certificate/kubeconfig for the controller manager to talk to the API server</li><li>Client certificate/kubeconfig for the scheduler to talk to the API server.</li><li>Client and server certificates for the <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/" target="_blank" rel="noreferrer">front-proxy</a></li></ul><div class="tip custom-block"><p class="custom-block-title">Note:</p><p><code>front-proxy</code> certificates are required only if you run kube-proxy to support <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/setup-extension-api-server/" target="_blank" rel="noreferrer">an extension API server</a>.</p></div><p>etcd also implements mutual TLS to authenticate clients and peers.</p><h2 id="where-certificates-are-stored" tabindex="-1">Where certificates are stored <a class="header-anchor" href="#where-certificates-are-stored" aria-label="Permalink to &quot;Where certificates are stored&quot;">​</a></h2><p>If you install Kubernetes with kubeadm, most certificates are stored in <code>/etc/kubernetes/pki</code>. All paths in this documentation are relative to that directory, with the exception of user account certificates which kubeadm places in <code>/etc/kubernetes</code>.</p><h2 id="configure-certificates-manually" tabindex="-1">Configure certificates manually <a class="header-anchor" href="#configure-certificates-manually" aria-label="Permalink to &quot;Configure certificates manually&quot;">​</a></h2><p>If you don&#39;t want kubeadm to generate the required certificates, you can create them using a single root CA or by providing all certificates. See <a href="https://kubernetes.io/docs/tasks/administer-cluster/certificates/" target="_blank" rel="noreferrer">Certificates</a> for details on creating your own certificate authority. See <a href="https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/" target="_blank" rel="noreferrer">Certificate Management with kubeadm</a> for more on managing certificates.</p><h3 id="single-root-ca" tabindex="-1">Single root CA <a class="header-anchor" href="#single-root-ca" aria-label="Permalink to &quot;Single root CA&quot;">​</a></h3><p>You can create a single root CA, controlled by an administrator. This root CA can then create multiple intermediate CAs, and delegate all further creation to Kubernetes itself.</p><p>Required CAs:</p><table><thead><tr><th>path</th><th>Default CN</th><th>description</th></tr></thead><tbody><tr><td>ca.crt,key</td><td>kubernetes-ca</td><td>Kubernetes general CA</td></tr><tr><td>etcd/ca.crt,key</td><td>etcd-ca</td><td>For all etcd-related functions</td></tr><tr><td>front-proxy-ca.crt,key</td><td>kubernetes-front-proxy-ca</td><td>For the <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/" target="_blank" rel="noreferrer">front-end proxy </a></td></tr></tbody></table><p>On top of the above CAs, it is also necessary to get a public/private key pair for service account management, <code>sa.key</code> and <code>sa.pub</code>. The following example illustrates the CA key and certificate files shown in the previous table:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/ca.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/ca.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/etcd/ca.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/etcd/ca.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/front-proxy-ca.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/front-proxy-ca.key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/ca.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/ca.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/etcd/ca.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/etcd/ca.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/front-proxy-ca.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/front-proxy-ca.key</span></span></code></pre></div><h3 id="all-certificates" tabindex="-1">All certificates <a class="header-anchor" href="#all-certificates" aria-label="Permalink to &quot;All certificates&quot;">​</a></h3><p>If you don&#39;t wish to copy the CA private keys to your cluster, you can generate all certificates yourself.</p><p>Required certificates:</p><table><thead><tr><th>Default CN</th><th>Parent CA</th><th>O (in Subject)</th><th>kind</th><th>hosts (SAN)</th></tr></thead><tbody><tr><td>kube-etcd</td><td>etcd-ca</td><td></td><td>server, client</td><td><code>&lt;hostname&gt;</code>, <code>&lt;Host_IP&gt;</code>, <code>localhost</code>, <code>127.0.0.1</code></td></tr><tr><td>kube-etcd-peer</td><td>etcd-ca</td><td></td><td>server, client</td><td><code>&lt;hostname&gt;</code>, <code>&lt;Host_IP&gt;</code>, <code>localhost</code>, <code>127.0.0.1</code></td></tr><tr><td>kube-etcd-healthcheck-client</td><td>etcd-ca</td><td></td><td>client</td><td></td></tr><tr><td>kube-apiserver-etcd-client</td><td>etcd-ca</td><td>system:masters</td><td>client</td><td></td></tr><tr><td>kube-apiserver</td><td>kubernetes-ca</td><td></td><td>server</td><td><code>&lt;hostname&gt;</code>, <code>&lt;Host_IP&gt;</code>, <code>&lt;advertise_IP&gt;</code>, [1]</td></tr><tr><td>kube-apiserver-kubelet-client</td><td>kubernetes-ca</td><td>system:masters</td><td>client</td><td></td></tr><tr><td>front-proxy-client</td><td>kubernetes-front-proxy-ca</td><td></td><td>client</td><td></td></tr></tbody></table><p><em>[1]</em>: any other IP or DNS name you contact your cluster on (as used by <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/" target="_blank" rel="noreferrer">kubeadm</a> the load balancer stable IP and/or DNS name, <code>kubernetes</code>, <code>kubernetes.default</code>, <code>kubernetes.default.svc</code>, <code>kubernetes.default.svc.cluster</code>, <code>kubernetes.default.svc.cluster.local</code>)</p><p>where <code>kind</code> maps to one or more of the x509 key usage, which is also documented in the <code>.spec.usages</code> of a <a href="https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1#CertificateSigningRequest" target="_blank" rel="noreferrer">CertificateSigningRequest</a> type:</p><table><thead><tr><th>kind</th><th>Key usage</th></tr></thead><tbody><tr><td>server</td><td>digital signature, key encipherment, server auth</td></tr><tr><td>client</td><td>digital signature, key encipherment, client auth</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Hosts/SAN listed above are the recommended ones for getting a working cluster; if required by a specific setup, it is possible to add additional SANs on all the server certificates.</p></div><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>For kubeadm users only:</p><ul><li>The scenario where you are copying to your cluster CA certificates without private keys is referred as external CA in the kubeadm documentation.</li><li>If you are comparing the above list with a kubeadm generated PKI, please be aware that <code>kube-etcd</code>, <code>kube-etcd-peer</code> and <code>kube-etcd-healthcheck-client</code> certificates are not generated in case of external etcd.</li></ul></div><h3 id="certificate-paths" tabindex="-1">Certificate paths <a class="header-anchor" href="#certificate-paths" aria-label="Permalink to &quot;Certificate paths&quot;">​</a></h3><p>Certificates should be placed in a recommended path (as used by kubeadm). Paths should be specified using the given argument regardless of location.</p><table><thead><tr><th>Default CN</th><th>recommended key path</th><th>recommended cert path</th><th>command</th><th>key argument</th><th>cert argument</th></tr></thead><tbody><tr><td>etcd-ca</td><td>etcd/ca.key</td><td>etcd/ca.crt</td><td>kube-apiserver</td><td></td><td>--etcd-cafile</td></tr><tr><td>kube-apiserver-etcd-client</td><td>apiserver-etcd-client.key</td><td>apiserver-etcd-client.crt</td><td>kube-apiserver</td><td>--etcd-keyfile</td><td>--etcd-certfile</td></tr><tr><td>kubernetes-ca</td><td>ca.key</td><td>ca.crt</td><td>kube-apiserver</td><td></td><td>--client-ca-file</td></tr><tr><td>kubernetes-ca</td><td>ca.key</td><td>ca.crt</td><td>kube-controller-manager</td><td>--cluster-signing-key-file</td><td>--client-ca-file, --root-ca-file, --cluster-signing-cert-file</td></tr><tr><td>kube-apiserver</td><td>apiserver.key</td><td>apiserver.crt</td><td>kube-apiserver</td><td>--tls-private-key-file</td><td>--tls-cert-file</td></tr><tr><td>kube-apiserver-kubelet-client</td><td>apiserver-kubelet-client.key</td><td>apiserver-kubelet-client.crt</td><td>kube-apiserver</td><td>--kubelet-client-key</td><td>--kubelet-client-certificate</td></tr><tr><td>front-proxy-ca</td><td>front-proxy-ca.key</td><td>front-proxy-ca.crt</td><td>kube-apiserver</td><td></td><td>--requestheader-client-ca-file</td></tr><tr><td>front-proxy-ca</td><td>front-proxy-ca.key</td><td>front-proxy-ca.crt</td><td>kube-controller-manager</td><td></td><td>--requestheader-client-ca-file</td></tr><tr><td>front-proxy-client</td><td>front-proxy-client.key</td><td>front-proxy-client.crt</td><td>kube-apiserver</td><td>--proxy-client-key-file</td><td>--proxy-client-cert-file</td></tr><tr><td>etcd-ca</td><td>etcd/ca.key</td><td>etcd/ca.crt</td><td>etcd</td><td></td><td>--trusted-ca-file, --peer-trusted-ca-file</td></tr><tr><td>kube-etcd</td><td>etcd/server.key</td><td>etcd/server.crt</td><td>etcd</td><td>--key-file</td><td>--cert-file</td></tr><tr><td>kube-etcd-peer</td><td>etcd/peer.key</td><td>etcd/peer.crt</td><td>etcd</td><td>--peer-key-file</td><td>--peer-cert-file</td></tr><tr><td>etcd-ca</td><td></td><td>etcd/ca.crt</td><td>etcdctl</td><td></td><td>--cacert</td></tr><tr><td>kube-etcd-healthcheck-client</td><td>etcd/healthcheck-client.key</td><td>etcd/healthcheck-client.crt</td><td>etcdctl</td><td>--key</td><td>--cert</td></tr></tbody></table><p>Same considerations apply for the service account key pair:</p><table><thead><tr><th>private key path</th><th>public key path</th><th>command</th><th>argument</th></tr></thead><tbody><tr><td>sa.key</td><td></td><td>kube-controller-manager</td><td>--service-account-private-key-file</td></tr><tr><td>sa.pub</td><td>kube-apiserver</td><td>--service-account-key-file</td><td></td></tr></tbody></table><p>The following example illustrates the file paths <a href="https://kubernetes.io/docs/setup/best-practices/certificates/#certificate-paths" target="_blank" rel="noreferrer">from the previous tables</a> you need to provide if you are generating all of your own keys and certificates:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/etcd/ca.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/etcd/ca.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/apiserver-etcd-client.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/apiserver-etcd-client.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/ca.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/ca.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/apiserver.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/apiserver.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/apiserver-kubelet-client.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/apiserver-kubelet-client.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/front-proxy-ca.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/front-proxy-ca.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/front-proxy-client.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/front-proxy-client.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/etcd/server.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/etcd/server.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/etcd/peer.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/etcd/peer.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/etcd/healthcheck-client.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/etcd/healthcheck-client.crt</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/sa.key</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/pki/sa.pub</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/etcd/ca.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/etcd/ca.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/apiserver-etcd-client.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/apiserver-etcd-client.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/ca.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/ca.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/apiserver.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/apiserver.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/apiserver-kubelet-client.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/apiserver-kubelet-client.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/front-proxy-ca.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/front-proxy-ca.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/front-proxy-client.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/front-proxy-client.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/etcd/server.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/etcd/server.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/etcd/peer.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/etcd/peer.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/etcd/healthcheck-client.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/etcd/healthcheck-client.crt</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/sa.key</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/pki/sa.pub</span></span></code></pre></div><h2 id="configure-certificates-for-user-accounts" tabindex="-1">Configure certificates for user accounts <a class="header-anchor" href="#configure-certificates-for-user-accounts" aria-label="Permalink to &quot;Configure certificates for user accounts&quot;">​</a></h2><p>You must manually configure these administrator account and service accounts:</p><table><thead><tr><th>filename</th><th>credential name</th><th>Default CN</th><th>O (in Subject)</th></tr></thead><tbody><tr><td>admin.conf</td><td>default-admin</td><td>kubernetes-admin</td><td>system:masters</td></tr><tr><td>kubelet.conf</td><td>default-auth</td><td><code>system:node:&lt;nodeName&gt;</code> (see note)</td><td>system:nodes</td></tr><tr><td>controller-manager.conf</td><td>default-controller-manager</td><td>system:kube-controller-manager</td><td></td></tr><tr><td>scheduler.conf</td><td>default-scheduler</td><td>system:kube-scheduler</td><td></td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>The value of <code>&lt;nodeName&gt;</code> for <code>kubelet.conf</code> must match precisely the value of the node name provided by the kubelet as it registers with the apiserver. For further details, read the <a href="https://kubernetes.io/docs/reference/access-authn-authz/node/" target="_blank" rel="noreferrer">Node Authorization</a>.</p></div><ol><li><p>For each config, generate an x509 cert/key pair with the given CN and O.</p></li><li><p>Run <code>kubectl</code> as follows for each config:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">KUBECONFIG=&lt;filename&gt; kubectl config set-cluster default-cluster --server=https://&lt;host ip&gt;:6443 --certificate-authority &lt;path-to-kubernetes-ca&gt; --embed-certs</span></span>
<span class="line"><span style="color:#e1e4e8;">KUBECONFIG=&lt;filename&gt; kubectl config set-credentials &lt;credential-name&gt; --client-key &lt;path-to-key&gt;.pem --client-certificate &lt;path-to-cert&gt;.pem --embed-certs</span></span>
<span class="line"><span style="color:#e1e4e8;">KUBECONFIG=&lt;filename&gt; kubectl config set-context default-system --cluster default-cluster --user &lt;credential-name&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">KUBECONFIG=&lt;filename&gt; kubectl config use-context default-system</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">KUBECONFIG=&lt;filename&gt; kubectl config set-cluster default-cluster --server=https://&lt;host ip&gt;:6443 --certificate-authority &lt;path-to-kubernetes-ca&gt; --embed-certs</span></span>
<span class="line"><span style="color:#24292e;">KUBECONFIG=&lt;filename&gt; kubectl config set-credentials &lt;credential-name&gt; --client-key &lt;path-to-key&gt;.pem --client-certificate &lt;path-to-cert&gt;.pem --embed-certs</span></span>
<span class="line"><span style="color:#24292e;">KUBECONFIG=&lt;filename&gt; kubectl config set-context default-system --cluster default-cluster --user &lt;credential-name&gt;</span></span>
<span class="line"><span style="color:#24292e;">KUBECONFIG=&lt;filename&gt; kubectl config use-context default-system</span></span></code></pre></div></li></ol><p>These files are used as follows:</p><table><thead><tr><th>filename</th><th>command</th><th>comment</th></tr></thead><tbody><tr><td>admin.conf</td><td>kubectl</td><td>Configures administrator user for the cluster</td></tr><tr><td>kubelet.conf</td><td>kubelet</td><td>One required for each node in the cluster.</td></tr><tr><td>controller-manager.conf</td><td>kube-controller-manager</td><td>Must be added to manifest in manifests/kube-controller-manager.yaml</td></tr><tr><td>scheduler.conf</td><td>kube-scheduler</td><td>Must be added to manifest in manifests/kube-scheduler.yaml</td></tr></tbody></table><p>The following files illustrate full paths to the files listed in the previous table:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/admin.conf</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/kubelet.conf</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/controller-manager.conf</span></span>
<span class="line"><span style="color:#e1e4e8;">/etc/kubernetes/scheduler.conf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/etc/kubernetes/admin.conf</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/kubelet.conf</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/controller-manager.conf</span></span>
<span class="line"><span style="color:#24292e;">/etc/kubernetes/scheduler.conf</span></span></code></pre></div>`,42),c=[n];function l(i,o,d,p,u,k){return t(),a("div",null,c)}const b=e(r,[["render",l]]);export{f as __pageData,b as default};
