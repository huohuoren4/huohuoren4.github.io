import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.01af844e.js";const d=JSON.parse('{"title":"Working with custom markers","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/further_topics/example_trick/custom_mark.md","filePath":"python/pytest/further_topics/example_trick/custom_mark.md","lastUpdated":1692807718000}'),l={name:"python/pytest/further_topics/example_trick/custom_mark.md"},o=p(`<h1 id="working-with-custom-markers" tabindex="-1">Working with custom markers <a class="header-anchor" href="#working-with-custom-markers" aria-label="Permalink to &quot;Working with custom markers {#working-with-custom-markers}&quot;">​</a></h1><p>Here are some examples using the <a href="/python/pytest/how_to_guides/mark#how-to-mark-test-functions-with-attributes">How to mark test functions with attributes</a> mechanism.</p><h2 id="marking-test-functions-and-selecting-them-for-a-run" tabindex="-1">Marking test functions and selecting them for a run <a class="header-anchor" href="#marking-test-functions-and-selecting-them-for-a-run" aria-label="Permalink to &quot;Marking test functions and selecting them for a run {#marking-test-functions-and-selecting-them-for-a-run}&quot;">​</a></h2><p>You can “mark” a test function with custom metadata like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_server.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.webtest</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_send_http</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># perform some webtest test for your app</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_something_quick</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_another</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_method</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_server.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.webtest</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_send_http</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># perform some webtest test for your app</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_something_quick</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_another</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_method</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>You can then restrict a test run to only run tests marked with <code>webtest</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">webtest</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collecting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_server.py::test_send_http</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                                [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">===================== </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">webtest</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collecting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::test_send_http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                                [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">===================== </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">======================</span></span></code></pre></div><p>Or the inverse, running all tests except the webtest ones:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;not webtest&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collecting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_server.py::test_something_quick</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                          [ </span><span style="color:#79B8FF;">33</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">test_server.py::test_another</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                                  [ </span><span style="color:#79B8FF;">66</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">test_server.py::TestClass::test_method</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">===================== </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;not webtest&quot;</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collecting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::test_something_quick</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                          [ </span><span style="color:#005CC5;">33</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::test_another</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                                  [ </span><span style="color:#005CC5;">66</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::TestClass::test_method</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">===================== </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">======================</span></span></code></pre></div><h2 id="selecting-tests-based-on-their-node-id" tabindex="-1">Selecting tests based on their node ID <a class="header-anchor" href="#selecting-tests-based-on-their-node-id" aria-label="Permalink to &quot;Selecting tests based on their node ID {#selecting-tests-based-on-their-node-id}&quot;">​</a></h2><p>You can provide one or more node IDs as positional arguments to select only specified tests. This makes it easy to select tests based on their module, class, method, or function name:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_server.py::TestClass::test_method</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collecting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_server.py::TestClass::test_method</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">============================ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_server.py::TestClass::test_method</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collecting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::TestClass::test_method</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">============================ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span></code></pre></div><p>You can also select on the class:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_server.py::TestClass</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collecting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_server.py::TestClass::test_method</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">============================ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_server.py::TestClass</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collecting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::TestClass::test_method</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">============================ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span></code></pre></div><p>Or select multiple nodes:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_server.py::TestClass</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_server.py::test_send_http</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collecting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_server.py::TestClass::test_method</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                        [ </span><span style="color:#79B8FF;">50</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">test_server.py::test_send_http</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                                [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">============================ </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_server.py::TestClass</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_server.py::test_send_http</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collecting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::TestClass::test_method</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                        [ </span><span style="color:#005CC5;">50</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::test_send_http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                                [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">============================ </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Node IDs are of the form <code>module.py::class::method</code> or <code>module.py::function</code>. Node IDs control which tests are collected, so <code>module.py::class</code> will select all test methods on the class. Nodes are also created for each parameter of a parametrized fixture or test, so selecting a parametrized test must include the parameter value, e.g. <code>module.py::function[param]</code>.</p><p>Node IDs for failing tests are displayed in the test summary info when running pytest with the -rf option. You can also construct Node IDs from the output of <code>pytest --collectonly</code>.</p></div><h2 id="using-k-expr-to-select-tests-based-on-their-name" tabindex="-1">Using <code>-k expr</code> to select tests based on their name <a class="header-anchor" href="#using-k-expr-to-select-tests-based-on-their-name" aria-label="Permalink to &quot;Using \`-k expr\` to select tests based on their name {#using-k-expr-to-select-tests-based-on-their-name}&quot;">​</a></h2><p><em>New in version 2.0/2.3.4.</em></p><p>You can use the <code>-k</code> command line option to specify an expression which implements a substring match on the test names instead of the exact match on markers that <code>-m</code> provides. This makes it easy to select tests based on their names:</p><p><em>Changed in version 5.4.</em></p><p>The expression matching is now case-insensitive.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-k</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># running with the above defined example module</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collecting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_server.py::test_send_http</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                                [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">===================== </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-k</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># running with the above defined example module</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collecting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::test_send_http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                                [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">===================== </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">======================</span></span></code></pre></div><p>And you can also run all tests except the ones that match the keyword:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-k</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;not send_http&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collecting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_server.py::test_something_quick</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                          [ </span><span style="color:#79B8FF;">33</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">test_server.py::test_another</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                                  [ </span><span style="color:#79B8FF;">66</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">test_server.py::TestClass::test_method</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">===================== </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-k</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;not send_http&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collecting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::test_something_quick</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                          [ </span><span style="color:#005CC5;">33</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::test_another</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                                  [ </span><span style="color:#005CC5;">66</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::TestClass::test_method</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">===================== </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">======================</span></span></code></pre></div><p>Or to select “http” and “quick” tests:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-k</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http or quick&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collecting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_server.py::test_send_http</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                                [ </span><span style="color:#79B8FF;">50</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">test_server.py::test_something_quick</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                          [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">===================== </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-k</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http or quick&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collecting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::test_send_http</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                                [ </span><span style="color:#005CC5;">50</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">test_server.py::test_something_quick</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                          [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">===================== </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">======================</span></span></code></pre></div><p>You can use <code>and</code>, <code>or</code>, <code>not</code> and parentheses.</p><p>In addition to the test’s name, <code>-k</code> also matches the names of the test’s parents (usually, the name of the file and class it’s in), attributes set on the test function, markers applied to it or its parents and any extra keywords explicitly added to it or its parents.</p><h2 id="registering-markers" tabindex="-1">Registering markers <a class="header-anchor" href="#registering-markers" aria-label="Permalink to &quot;Registering markers {#registering-markers}&quot;">​</a></h2><p>Registering markers for your test suite is simple:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">markers</span><span style="color:#E1E4E8;"> =</span></span>
<span class="line"><span style="color:#E1E4E8;">    webtest: mark a test as a webtest.</span></span>
<span class="line"><span style="color:#E1E4E8;">    slow: mark test as slow.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">markers</span><span style="color:#24292E;"> =</span></span>
<span class="line"><span style="color:#24292E;">    webtest: mark a test as a webtest.</span></span>
<span class="line"><span style="color:#24292E;">    slow: mark test as slow.</span></span></code></pre></div><p>Multiple custom markers can be registered, by defining each one in its own line, as shown in above example.</p><p>You can ask which markers exist for your test suite - the list includes our just defined <code>webtest</code> and <code>slow</code> markers:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--markers</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.webtest:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mark</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">webtest.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.slow:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mark</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">slow.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.filterwarnings(warning</span><span style="color:#E1E4E8;">): add a warning filter to the given test. see https://docs.pytest.org/en/stable/how-to/capture-warnings.html#pytest-mark-filterwarnings</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.skip(reason</span><span style="color:#E1E4E8;">=None): skip the given test </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> an optional reason. Example: skip(reason</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;no way of currently testing this&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">skips</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.skipif(condition,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reason=...</span><span style="color:#E1E4E8;">): skip the given test </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;"> any of the conditions evaluate to True. Example: skipif(</span><span style="color:#B392F0;">sys.platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;win32&#39;</span><span style="color:#E1E4E8;">) skips the test </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">we</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">are</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">win32</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">platform.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">See</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-skipif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.xfail(condition,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reason=...,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run=True,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">raises=None,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">strict=xfail_strict</span><span style="color:#E1E4E8;">): mark the test </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">as</span><span style="color:#E1E4E8;"> an expected failure if any of the conditions evaluate to True. Optionally specify a reason for better reporting and run=False if you don&#39;t even want to execute the test function. If only specific exception(</span><span style="color:#B392F0;">s</span><span style="color:#E1E4E8;">) are expected, you can list them </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> raises, and </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fails</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">other</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ways,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reported</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failure.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">See</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-xfail</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize(argnames,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">argvalues</span><span style="color:#E1E4E8;">): call a test </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">multiple</span><span style="color:#E1E4E8;"> times passing in different arguments in turn. argvalues generally needs to be a list of values if argnames specifies only one name or a list of tuples of values if argnames specifies multiple names. Example: @parametrize(</span><span style="color:#B392F0;">&#39;arg1&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> [1,2]) would lead to two calls of the decorated test </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> one with arg1=1 and another with arg1=2.see https://docs.pytest.org/en/stable/how-to/parametrize.html for more info and examples.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@pytest.mark.usefixtures(</span><span style="color:#B392F0;">fixturename1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fixturename2,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;">): mark tests as needing all of the specified fixtures. see https://docs.pytest.org/en/stable/explanation/fixtures.html#usefixtures</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.tryfirst:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mark</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">implementation</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">such</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">that</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">machinery</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">first/as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">early</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">possible.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DEPRECATED,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@pytest.hookimpl</span><span style="color:#E1E4E8;">(tryfirst</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">True</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">instead.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.trylast:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mark</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">implementation</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">such</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">that</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">machinery</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">last/as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">late</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">possible.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DEPRECATED,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@pytest.hookimpl</span><span style="color:#E1E4E8;">(trylast</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">True</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">instead.</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--markers</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.webtest:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mark</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">webtest.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.slow:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mark</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">slow.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.filterwarnings(warning</span><span style="color:#24292E;">): add a warning filter to the given test. see https://docs.pytest.org/en/stable/how-to/capture-warnings.html#pytest-mark-filterwarnings</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.skip(reason</span><span style="color:#24292E;">=None): skip the given test </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> an optional reason. Example: skip(reason</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;no way of currently testing this&quot;</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">skips</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.skipif(condition,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reason=...</span><span style="color:#24292E;">): skip the given test </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">if</span><span style="color:#24292E;"> any of the conditions evaluate to True. Example: skipif(</span><span style="color:#6F42C1;">sys.platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;win32&#39;</span><span style="color:#24292E;">) skips the test </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">we</span><span style="color:#24292E;"> </span><span style="color:#032F62;">are</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">win32</span><span style="color:#24292E;"> </span><span style="color:#032F62;">platform.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">See</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-skipif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.xfail(condition,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reason=...,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run=True,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">raises=None,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">strict=xfail_strict</span><span style="color:#24292E;">): mark the test </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">as</span><span style="color:#24292E;"> an expected failure if any of the conditions evaluate to True. Optionally specify a reason for better reporting and run=False if you don&#39;t even want to execute the test function. If only specific exception(</span><span style="color:#6F42C1;">s</span><span style="color:#24292E;">) are expected, you can list them </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> raises, and </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fails</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">other</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ways,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reported</span><span style="color:#24292E;"> </span><span style="color:#032F62;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failure.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">See</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-xfail</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize(argnames,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">argvalues</span><span style="color:#24292E;">): call a test </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multiple</span><span style="color:#24292E;"> times passing in different arguments in turn. argvalues generally needs to be a list of values if argnames specifies only one name or a list of tuples of values if argnames specifies multiple names. Example: @parametrize(</span><span style="color:#6F42C1;">&#39;arg1&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> [1,2]) would lead to two calls of the decorated test </span><span style="color:#D73A49;">function</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> one with arg1=1 and another with arg1=2.see https://docs.pytest.org/en/stable/how-to/parametrize.html for more info and examples.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@pytest.mark.usefixtures(</span><span style="color:#6F42C1;">fixturename1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fixturename2,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;">): mark tests as needing all of the specified fixtures. see https://docs.pytest.org/en/stable/explanation/fixtures.html#usefixtures</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.tryfirst:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mark</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hook</span><span style="color:#24292E;"> </span><span style="color:#032F62;">implementation</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">such</span><span style="color:#24292E;"> </span><span style="color:#032F62;">that</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">plugin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">machinery</span><span style="color:#24292E;"> </span><span style="color:#032F62;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">try</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">first/as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">early</span><span style="color:#24292E;"> </span><span style="color:#032F62;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">possible.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DEPRECATED,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@pytest.hookimpl</span><span style="color:#24292E;">(tryfirst</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">True</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">instead.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.trylast:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mark</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hook</span><span style="color:#24292E;"> </span><span style="color:#032F62;">implementation</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">such</span><span style="color:#24292E;"> </span><span style="color:#032F62;">that</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">plugin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">machinery</span><span style="color:#24292E;"> </span><span style="color:#032F62;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">try</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">last/as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">late</span><span style="color:#24292E;"> </span><span style="color:#032F62;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">possible.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DEPRECATED,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@pytest.hookimpl</span><span style="color:#24292E;">(trylast</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">True</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">instead.</span></span></code></pre></div><p>For an example on how to add and work with markers from a plugin, see <a href="/python/pytest/further_topics/example_trick/custom_mark#custom-marker-and-command-line-option-to-control-test-runs">Custom marker and command line option to control test runs</a>.</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>It is recommended to explicitly register markers so that:</p><ul><li><p>There is one place in your test suite defining your markers</p></li><li><p>Asking for existing markers via <code>pytest --markers</code> gives good output</p></li><li><p>Typos in function markers are treated as an error if you use the <code>--strict-markers</code> option.</p></li></ul></div><h2 id="marking-whole-classes-or-modules" tabindex="-1">Marking whole classes or modules <a class="header-anchor" href="#marking-whole-classes-or-modules" aria-label="Permalink to &quot;Marking whole classes or modules {#marking-whole-classes-or-modules}&quot;">​</a></h2><p>You may use <code>pytest.mark</code> decorators with classes to apply markers to all of its test methods:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_mark_classlevel.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.webtest</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_startup</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_startup_and_more</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_mark_classlevel.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.webtest</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_startup</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_startup_and_more</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>This is equivalent to directly applying the decorator to the two test functions.</p><p>To apply marks at the module level, use the <code>pytestmark</code> global variable:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#E1E4E8;">pytestmark </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pytest.mark.webtest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#24292E;">pytestmark </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pytest.mark.webtest</span></span></code></pre></div><p>or multiple markers:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytestmark </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [pytest.mark.webtest, pytest.mark.slowtest]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytestmark </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [pytest.mark.webtest, pytest.mark.slowtest]</span></span></code></pre></div><p>Due to legacy reasons, before class decorators were introduced, it is possible to set the <code>pytestmark</code> attribute on a test class like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytestmark </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pytest.mark.webtest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    pytestmark </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pytest.mark.webtest</span></span></code></pre></div><h2 id="marking-individual-tests-when-using-parametrize" tabindex="-1">Marking individual tests when using parametrize <a class="header-anchor" href="#marking-individual-tests-when-using-parametrize" aria-label="Permalink to &quot;Marking individual tests when using parametrize {#marking-individual-tests-when-using-parametrize}&quot;">​</a></h2><p>When using parametrize, applying a mark will make it apply to each individual test. However it is also possible to apply a marker to an individual test instance:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.foo</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#9ECBFF;">&quot;n&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;expected&quot;</span><span style="color:#E1E4E8;">), [(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), pytest.param(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">marks</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">pytest.mark.bar), (</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_increment</span><span style="color:#E1E4E8;">(n, expected):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> expected</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.foo</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#032F62;">&quot;n&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;expected&quot;</span><span style="color:#24292E;">), [(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), pytest.param(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#E36209;">marks</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pytest.mark.bar), (</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_increment</span><span style="color:#24292E;">(n, expected):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> expected</span></span></code></pre></div><p>In this example the mark “foo” will apply to each of the three tests, whereas the “bar” mark is only applied to the second test. Skip and xfail marks can also be applied in this way, see <a href="/python/pytest/how_to_guides/skip_xfail#skip-xfail-with-parametrize">Skip/xfail with parametrize</a>.</p><h2 id="custom-marker-and-command-line-option-to-control-test-runs" tabindex="-1">Custom marker and command line option to control test runs <a class="header-anchor" href="#custom-marker-and-command-line-option-to-control-test-runs" aria-label="Permalink to &quot;Custom marker and command line option to control test runs {#custom-marker-and-command-line-option-to-control-test-runs}&quot;">​</a></h2><p>Plugins can provide custom markers and implement specific behaviour based on it. This is a self-contained example which adds a command line option and a parametrized test function marker to run tests specified via named environments:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_addoption</span><span style="color:#E1E4E8;">(parser):</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.addoption(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;-E&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">metavar</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;NAME&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;only run tests matching the environment NAME.&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_configure</span><span style="color:#E1E4E8;">(config):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># register an additional marker</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.addinivalue_line(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;markers&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;env(name): mark test to run only on named environment&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_runtest_setup</span><span style="color:#E1E4E8;">(item):</span></span>
<span class="line"><span style="color:#E1E4E8;">    envnames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [mark.args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> mark </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> item.iter_markers(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;env&quot;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> envnames:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> item.config.getoption(</span><span style="color:#9ECBFF;">&quot;-E&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> envnames:</span></span>
<span class="line"><span style="color:#E1E4E8;">            pytest.skip(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;test requires env in </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">envnames</span><span style="color:#F97583;">!r</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_addoption</span><span style="color:#24292E;">(parser):</span></span>
<span class="line"><span style="color:#24292E;">    parser.addoption(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;-E&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">metavar</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;NAME&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;only run tests matching the environment NAME.&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_configure</span><span style="color:#24292E;">(config):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># register an additional marker</span></span>
<span class="line"><span style="color:#24292E;">    config.addinivalue_line(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;markers&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;env(name): mark test to run only on named environment&quot;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_runtest_setup</span><span style="color:#24292E;">(item):</span></span>
<span class="line"><span style="color:#24292E;">    envnames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [mark.args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> mark </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> item.iter_markers(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;env&quot;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> envnames:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> item.config.getoption(</span><span style="color:#032F62;">&quot;-E&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> envnames:</span></span>
<span class="line"><span style="color:#24292E;">            pytest.skip(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;test requires env in </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">envnames</span><span style="color:#D73A49;">!r</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>A test file using this local plugin:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_someenv.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.env</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;stage1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_basic_db_operation</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_someenv.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.env</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;stage1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_basic_db_operation</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>and an example invocations specifying a different environment than what the test needs:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;font-style:italic;">$</span><span style="color:#E1E4E8;"> pytest </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">E stage2</span></span>
<span class="line"><span style="color:#F97583;">===========================</span><span style="color:#E1E4E8;"> test session starts </span><span style="color:#F97583;">============================</span></span>
<span class="line"><span style="color:#E1E4E8;">platform linux </span><span style="color:#FDAEB7;font-style:italic;">--</span><span style="color:#E1E4E8;"> Python </span><span style="color:#79B8FF;">3.</span><span style="color:#E1E4E8;">x.y, pytest</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">7.</span><span style="color:#E1E4E8;">x.y, pluggy</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;">x.y</span></span>
<span class="line"><span style="color:#E1E4E8;">rootdir: </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">sweet</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">project</span></span>
<span class="line"><span style="color:#E1E4E8;">collected </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test_someenv.py s                                                    [</span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">============================</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> skipped </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.</span><span style="color:#FDAEB7;font-style:italic;">12s</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;font-style:italic;">$</span><span style="color:#24292E;"> pytest </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">E stage2</span></span>
<span class="line"><span style="color:#D73A49;">===========================</span><span style="color:#24292E;"> test session starts </span><span style="color:#D73A49;">============================</span></span>
<span class="line"><span style="color:#24292E;">platform linux </span><span style="color:#B31D28;font-style:italic;">--</span><span style="color:#24292E;"> Python </span><span style="color:#005CC5;">3.</span><span style="color:#24292E;">x.y, pytest</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7.</span><span style="color:#24292E;">x.y, pluggy</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1.</span><span style="color:#24292E;">x.y</span></span>
<span class="line"><span style="color:#24292E;">rootdir: </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">sweet</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">project</span></span>
<span class="line"><span style="color:#24292E;">collected </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test_someenv.py s                                                    [</span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">============================</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> skipped </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.</span><span style="color:#B31D28;font-style:italic;">12s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">============================</span></span></code></pre></div><p>and here is one that specifies exactly the environment needed:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-E</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stage1</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_someenv.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">============================ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-E</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stage1</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_someenv.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">============================ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span></code></pre></div><p>The <code>--markers</code> option always gives you a list of available markers:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--markers</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.env(name</span><span style="color:#E1E4E8;">): mark test to run only on named environment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.filterwarnings(warning</span><span style="color:#E1E4E8;">): add a warning filter to the given test. see https://docs.pytest.org/en/stable/how-to/capture-warnings.html#pytest-mark-filterwarnings</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.skip(reason</span><span style="color:#E1E4E8;">=None): skip the given test </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> an optional reason. Example: skip(reason</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;no way of currently testing this&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">skips</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.skipif(condition,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reason=...</span><span style="color:#E1E4E8;">): skip the given test </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">if</span><span style="color:#E1E4E8;"> any of the conditions evaluate to True. Example: skipif(</span><span style="color:#B392F0;">sys.platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;win32&#39;</span><span style="color:#E1E4E8;">) skips the test </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">we</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">are</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">win32</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">platform.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">See</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-skipif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.xfail(condition,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reason=...,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run=True,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">raises=None,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">strict=xfail_strict</span><span style="color:#E1E4E8;">): mark the test </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">as</span><span style="color:#E1E4E8;"> an expected failure if any of the conditions evaluate to True. Optionally specify a reason for better reporting and run=False if you don&#39;t even want to execute the test function. If only specific exception(</span><span style="color:#B392F0;">s</span><span style="color:#E1E4E8;">) are expected, you can list them </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> raises, and </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fails</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">other</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ways,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">be</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reported</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failure.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">See</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-xfail</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize(argnames,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">argvalues</span><span style="color:#E1E4E8;">): call a test </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">multiple</span><span style="color:#E1E4E8;"> times passing in different arguments in turn. argvalues generally needs to be a list of values if argnames specifies only one name or a list of tuples of values if argnames specifies multiple names. Example: @parametrize(</span><span style="color:#B392F0;">&#39;arg1&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> [1,2]) would lead to two calls of the decorated test </span><span style="color:#F97583;">function</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> one with arg1=1 and another with arg1=2.see https://docs.pytest.org/en/stable/how-to/parametrize.html for more info and examples.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@pytest.mark.usefixtures(</span><span style="color:#B392F0;">fixturename1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fixturename2,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;">): mark tests as needing all of the specified fixtures. see https://docs.pytest.org/en/stable/explanation/fixtures.html#usefixtures</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.tryfirst:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mark</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">implementation</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">such</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">that</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">machinery</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">first/as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">early</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">possible.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DEPRECATED,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@pytest.hookimpl</span><span style="color:#E1E4E8;">(tryfirst</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">True</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">instead.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.trylast:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mark</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">implementation</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">such</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">that</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">the</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">machinery</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">will</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">try</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">last/as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">late</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">possible.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DEPRECATED,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@pytest.hookimpl</span><span style="color:#E1E4E8;">(trylast</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">True</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">instead.</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--markers</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.env(name</span><span style="color:#24292E;">): mark test to run only on named environment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.filterwarnings(warning</span><span style="color:#24292E;">): add a warning filter to the given test. see https://docs.pytest.org/en/stable/how-to/capture-warnings.html#pytest-mark-filterwarnings</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.skip(reason</span><span style="color:#24292E;">=None): skip the given test </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> an optional reason. Example: skip(reason</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;no way of currently testing this&quot;</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">skips</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.skipif(condition,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reason=...</span><span style="color:#24292E;">): skip the given test </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">if</span><span style="color:#24292E;"> any of the conditions evaluate to True. Example: skipif(</span><span style="color:#6F42C1;">sys.platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;win32&#39;</span><span style="color:#24292E;">) skips the test </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">we</span><span style="color:#24292E;"> </span><span style="color:#032F62;">are</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">win32</span><span style="color:#24292E;"> </span><span style="color:#032F62;">platform.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">See</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-skipif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.xfail(condition,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reason=...,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run=True,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">raises=None,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">strict=xfail_strict</span><span style="color:#24292E;">): mark the test </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">as</span><span style="color:#24292E;"> an expected failure if any of the conditions evaluate to True. Optionally specify a reason for better reporting and run=False if you don&#39;t even want to execute the test function. If only specific exception(</span><span style="color:#6F42C1;">s</span><span style="color:#24292E;">) are expected, you can list them </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> raises, and </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fails</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">other</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ways,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">be</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reported</span><span style="color:#24292E;"> </span><span style="color:#032F62;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failure.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">See</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://docs.pytest.org/en/stable/reference/reference.html#pytest-mark-xfail</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize(argnames,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">argvalues</span><span style="color:#24292E;">): call a test </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multiple</span><span style="color:#24292E;"> times passing in different arguments in turn. argvalues generally needs to be a list of values if argnames specifies only one name or a list of tuples of values if argnames specifies multiple names. Example: @parametrize(</span><span style="color:#6F42C1;">&#39;arg1&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> [1,2]) would lead to two calls of the decorated test </span><span style="color:#D73A49;">function</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> one with arg1=1 and another with arg1=2.see https://docs.pytest.org/en/stable/how-to/parametrize.html for more info and examples.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@pytest.mark.usefixtures(</span><span style="color:#6F42C1;">fixturename1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fixturename2,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;">): mark tests as needing all of the specified fixtures. see https://docs.pytest.org/en/stable/explanation/fixtures.html#usefixtures</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.tryfirst:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mark</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hook</span><span style="color:#24292E;"> </span><span style="color:#032F62;">implementation</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">such</span><span style="color:#24292E;"> </span><span style="color:#032F62;">that</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">plugin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">machinery</span><span style="color:#24292E;"> </span><span style="color:#032F62;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">try</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">first/as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">early</span><span style="color:#24292E;"> </span><span style="color:#032F62;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">possible.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DEPRECATED,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@pytest.hookimpl</span><span style="color:#24292E;">(tryfirst</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">True</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">instead.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.trylast:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mark</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hook</span><span style="color:#24292E;"> </span><span style="color:#032F62;">implementation</span><span style="color:#24292E;"> </span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">such</span><span style="color:#24292E;"> </span><span style="color:#032F62;">that</span><span style="color:#24292E;"> </span><span style="color:#032F62;">the</span><span style="color:#24292E;"> </span><span style="color:#032F62;">plugin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">machinery</span><span style="color:#24292E;"> </span><span style="color:#032F62;">will</span><span style="color:#24292E;"> </span><span style="color:#032F62;">try</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">last/as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">late</span><span style="color:#24292E;"> </span><span style="color:#032F62;">as</span><span style="color:#24292E;"> </span><span style="color:#032F62;">possible.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DEPRECATED,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@pytest.hookimpl</span><span style="color:#24292E;">(trylast</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">True</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">instead.</span></span></code></pre></div><h2 id="passing-a-callable-to-custom-markers" tabindex="-1">Passing a callable to custom markers <a class="header-anchor" href="#passing-a-callable-to-custom-markers" aria-label="Permalink to &quot;Passing a callable to custom markers {#passing-a-callable-to-custom-markers}&quot;">​</a></h2><p>Below is the config file that will be used in the next examples:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_runtest_setup</span><span style="color:#E1E4E8;">(item):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> marker </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> item.iter_markers(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;my_marker&quot;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(marker)</span></span>
<span class="line"><span style="color:#E1E4E8;">        sys.stdout.flush()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sys</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_runtest_setup</span><span style="color:#24292E;">(item):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> marker </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> item.iter_markers(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;my_marker&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(marker)</span></span>
<span class="line"><span style="color:#24292E;">        sys.stdout.flush()</span></span></code></pre></div><p>A custom marker can have its argument set, i.e. <code>args</code> and <code>kwargs</code> properties, defined by either invoking it as a callable or using <code>pytest.mark.MARKER_NAME.with_args</code>. These two methods achieve the same effect most of the time.</p><p>However, if there is a callable as the single positional argument with no keyword arguments, using the <code>pytest.mark.MARKER_NAME(c)</code> will not pass <code>c</code> as a positional argument but decorate <code>c</code> with the custom marker (see <a href="/python/pytest/how_to_guides/mark#how-to-mark-test-functions-with-attributes">MarkDecorator</a>). Fortunately, <code>pytest.mark.MARKER_NAME.with_args</code> comes to the rescue:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_custom_marker.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello_world</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello World&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.my_marker.with_args</span><span style="color:#E1E4E8;">(hello_world)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_with_args</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_custom_marker.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello_world</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.my_marker.with_args</span><span style="color:#24292E;">(hello_world)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_with_args</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>The output is as follows:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span></span>
<span class="line"><span style="color:#B392F0;">Mark(name</span><span style="color:#E1E4E8;">=</span><span style="color:#B392F0;">&#39;my_marker&#39;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">args=</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello_world</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xdeadbeef000</span><span style="color:#F97583;">1&gt;</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;">), kwargs={})</span></span>
<span class="line"><span style="color:#79B8FF;">.</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span></span>
<span class="line"><span style="color:#6F42C1;">Mark(name</span><span style="color:#24292E;">=</span><span style="color:#6F42C1;">&#39;my_marker&#39;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">args=</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello_world</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xdeadbeef000</span><span style="color:#D73A49;">1&gt;</span><span style="color:#032F62;">,</span><span style="color:#24292E;">), kwargs={})</span></span>
<span class="line"><span style="color:#005CC5;">.</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><p>We can see that the custom marker has its argument set extended with the function <code>hello_world</code>. This is the key difference between creating a custom marker as a callable, which invokes <code>__call__</code> behind the scenes, and using <code>with_args</code>.</p><h2 id="reading-markers-which-were-set-from-multiple-places" tabindex="-1">Reading markers which were set from multiple places <a class="header-anchor" href="#reading-markers-which-were-set-from-multiple-places" aria-label="Permalink to &quot;Reading markers which were set from multiple places {#reading-markers-which-were-set-from-multiple-places}&quot;">​</a></h2><p>If you are heavily using markers in your test suite you may encounter the case where a marker is applied several times to a test function. From plugin code you can read over all such settings. Example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_mark_three_times.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pytestmark </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pytest.mark.glob(</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.glob</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.glob</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_something</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_mark_three_times.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pytestmark </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pytest.mark.glob(</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">x</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.glob</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">x</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.glob</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">x</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_something</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>Here we have the marker “glob” applied three times to the same test function. From a conftest file we can read it like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_runtest_setup</span><span style="color:#E1E4E8;">(item):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> mark </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> item.iter_markers(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;glob&quot;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;glob args=</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">mark.args</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> kwargs=</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">mark.kwargs</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        sys.stdout.flush()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sys</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_runtest_setup</span><span style="color:#24292E;">(item):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> mark </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> item.iter_markers(</span><span style="color:#E36209;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;glob&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;glob args=</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">mark.args</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> kwargs=</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">mark.kwargs</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        sys.stdout.flush()</span></span></code></pre></div><p>Let’s run this without capturing output and see what we get:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span></span>
<span class="line"><span style="color:#B392F0;">glob</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">args=</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function&#39;,</span><span style="color:#E1E4E8;">) kwargs={</span><span style="color:#B392F0;">&#39;x&#39;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#B392F0;">glob</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">args=</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;class&#39;,</span><span style="color:#E1E4E8;">) kwargs={</span><span style="color:#B392F0;">&#39;x&#39;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#B392F0;">glob</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">args=</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;module&#39;,</span><span style="color:#E1E4E8;">) kwargs={</span><span style="color:#B392F0;">&#39;x&#39;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#79B8FF;">.</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span></span>
<span class="line"><span style="color:#6F42C1;">glob</span><span style="color:#24292E;"> </span><span style="color:#032F62;">args=</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function&#39;,</span><span style="color:#24292E;">) kwargs={</span><span style="color:#6F42C1;">&#39;x&#39;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#6F42C1;">glob</span><span style="color:#24292E;"> </span><span style="color:#032F62;">args=</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;class&#39;,</span><span style="color:#24292E;">) kwargs={</span><span style="color:#6F42C1;">&#39;x&#39;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#6F42C1;">glob</span><span style="color:#24292E;"> </span><span style="color:#032F62;">args=</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;module&#39;,</span><span style="color:#24292E;">) kwargs={</span><span style="color:#6F42C1;">&#39;x&#39;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#005CC5;">.</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><h2 id="marking-platform-specific-tests-with-pytest" tabindex="-1">Marking platform specific tests with pytest <a class="header-anchor" href="#marking-platform-specific-tests-with-pytest" aria-label="Permalink to &quot;Marking platform specific tests with pytest {#marking-platform-specific-tests-with-pytest}&quot;">​</a></h2><p>Consider you have a test suite which marks tests for particular platforms, namely <code>pytest.mark.darwin</code>, <code>pytest.mark.win32</code> etc. and you also have tests that run on all platforms and have no specific marker. If you now want to have a way to only run the tests for your particular platform, you could use the following plugin:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">ALL</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;darwin linux win32&quot;</span><span style="color:#E1E4E8;">.split())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_runtest_setup</span><span style="color:#E1E4E8;">(item):</span></span>
<span class="line"><span style="color:#E1E4E8;">    supported_platforms </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ALL</span><span style="color:#E1E4E8;">.intersection(mark.name </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> mark </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> item.iter_markers())</span></span>
<span class="line"><span style="color:#E1E4E8;">    plat </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sys.platform</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> supported_platforms </span><span style="color:#F97583;">and</span><span style="color:#E1E4E8;"> plat </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> supported_platforms:</span></span>
<span class="line"><span style="color:#E1E4E8;">        pytest.skip(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;cannot run on platform </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">plat</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#6A737D;">#</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">ALL</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;darwin linux win32&quot;</span><span style="color:#24292E;">.split())</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_runtest_setup</span><span style="color:#24292E;">(item):</span></span>
<span class="line"><span style="color:#24292E;">    supported_platforms </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ALL</span><span style="color:#24292E;">.intersection(mark.name </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> mark </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> item.iter_markers())</span></span>
<span class="line"><span style="color:#24292E;">    plat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sys.platform</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> supported_platforms </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> plat </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> supported_platforms:</span></span>
<span class="line"><span style="color:#24292E;">        pytest.skip(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;cannot run on platform </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">plat</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>then tests will be skipped if they were specified for a different platform. Let’s do a little test file to show how this looks like:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_plat.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.darwin</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_if_apple_is_evil</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.linux</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_if_linux_works</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.win32</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_if_win32_crashes</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_runs_everywhere</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_plat.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.darwin</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_if_apple_is_evil</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.linux</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_if_linux_works</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.win32</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_if_win32_crashes</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_runs_everywhere</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>then you will see two tests skipped and two executed tests as expected:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rs</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># this option reports skip reasons</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_plat.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">s.s.</span><span style="color:#E1E4E8;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">SKIPPED</span><span style="color:#E1E4E8;"> [2] conftest.py:13: cannot run on platform linux</span></span>
<span class="line"><span style="color:#E1E4E8;">======================= </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">skipped</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rs</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># this option reports skip reasons</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_plat.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">s.s.</span><span style="color:#24292E;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">SKIPPED</span><span style="color:#24292E;"> [2] conftest.py:13: cannot run on platform linux</span></span>
<span class="line"><span style="color:#24292E;">======================= </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">skipped</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=======================</span></span></code></pre></div><p>Note that if you specify a platform via the marker-command line option like this:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_plat.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">                                                       [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">===================== </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_plat.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                                                       [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">===================== </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">======================</span></span></code></pre></div><p>then the unmarked-tests will not be run. It is thus a way to restrict the run to the specific tests.</p><h2 id="automatically-adding-markers-based-on-test-names" tabindex="-1">Automatically adding markers based on test names <a class="header-anchor" href="#automatically-adding-markers-based-on-test-names" aria-label="Permalink to &quot;Automatically adding markers based on test names {#automatically-adding-markers-based-on-test-names}&quot;">​</a></h2><p>If you have a test suite where test function names indicate a certain type of test, you can implement a hook that automatically defines markers so that you can use the <code>-m</code> option with it. Let’s look at this test module:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_module.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_interface_simple</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_interface_complex</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_event_simple</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_something_else</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_module.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_interface_simple</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_interface_complex</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_event_simple</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_something_else</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><p>We want to dynamically define two markers and can do it in a <code>conftest.py</code> plugin:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_collection_modifyitems</span><span style="color:#E1E4E8;">(items):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;interface&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> item.nodeid:</span></span>
<span class="line"><span style="color:#E1E4E8;">            item.add_marker(pytest.mark.interface)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;event&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> item.nodeid:</span></span>
<span class="line"><span style="color:#E1E4E8;">            item.add_marker(pytest.mark.event)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_collection_modifyitems</span><span style="color:#24292E;">(items):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> items:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;interface&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> item.nodeid:</span></span>
<span class="line"><span style="color:#24292E;">            item.add_marker(pytest.mark.interface)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;event&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> item.nodeid:</span></span>
<span class="line"><span style="color:#24292E;">            item.add_marker(pytest.mark.event)</span></span></code></pre></div><p>We can now use the <code>-m option</code> to select one set:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--tb=short</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_module.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FF</span><span style="color:#E1E4E8;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">__________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_interface_simple</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">___________________________</span></span>
<span class="line"><span style="color:#B392F0;">test_module.py:4:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_interface_simple</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">__________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_interface_complex</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">__________________________</span></span>
<span class="line"><span style="color:#B392F0;">test_module.py:8:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_interface_complex</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_module.py::test_interface_simple</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_module.py::test_interface_complex</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">===================== </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">interface</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--tb=short</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_module.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FF</span><span style="color:#24292E;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">__________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_interface_simple</span><span style="color:#24292E;"> </span><span style="color:#032F62;">___________________________</span></span>
<span class="line"><span style="color:#6F42C1;">test_module.py:4:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_interface_simple</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">   </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">__________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_interface_complex</span><span style="color:#24292E;"> </span><span style="color:#032F62;">__________________________</span></span>
<span class="line"><span style="color:#6F42C1;">test_module.py:8:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_interface_complex</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">   </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_module.py::test_interface_simple</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_module.py::test_interface_complex</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">===================== </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">======================</span></span></code></pre></div><p>or to select both “event” and “interface” tests:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;interface or event&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--tb=short</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_module.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FFF</span><span style="color:#E1E4E8;">                                                   [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">__________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_interface_simple</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">___________________________</span></span>
<span class="line"><span style="color:#B392F0;">test_module.py:4:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_interface_simple</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">__________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_interface_complex</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">__________________________</span></span>
<span class="line"><span style="color:#B392F0;">test_module.py:8:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_interface_complex</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">____________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_event_simple</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_____________________________</span></span>
<span class="line"><span style="color:#B392F0;">test_module.py:12:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_event_simple</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_module.py::test_interface_simple</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_module.py::test_interface_complex</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_module.py::test_event_simple</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">===================== </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;interface or event&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--tb=short</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_module.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FFF</span><span style="color:#24292E;">                                                   [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">__________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_interface_simple</span><span style="color:#24292E;"> </span><span style="color:#032F62;">___________________________</span></span>
<span class="line"><span style="color:#6F42C1;">test_module.py:4:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_interface_simple</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">   </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">__________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_interface_complex</span><span style="color:#24292E;"> </span><span style="color:#032F62;">__________________________</span></span>
<span class="line"><span style="color:#6F42C1;">test_module.py:8:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_interface_complex</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">   </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">____________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_event_simple</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_____________________________</span></span>
<span class="line"><span style="color:#6F42C1;">test_module.py:12:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_event_simple</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">   </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_module.py::test_interface_simple</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_module.py::test_interface_complex</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_module.py::test_event_simple</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">===================== </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">======================</span></span></code></pre></div>`,97),e=[o];function t(c,r,y,E,F,i){return n(),a("div",null,e)}const B=s(l,[["render",t]]);export{d as __pageData,B as default};
