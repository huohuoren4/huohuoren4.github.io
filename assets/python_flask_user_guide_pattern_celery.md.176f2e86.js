import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"Background Tasks with Celery","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/pattern/celery.md","filePath":"python/flask/user_guide/pattern/celery.md","lastUpdated":1693404008000}'),e={name:"python/flask/user_guide/pattern/celery.md"},p=l(`<h1 id="background-tasks-with-celery" tabindex="-1">Background Tasks with Celery <a class="header-anchor" href="#background-tasks-with-celery" aria-label="Permalink to &quot;Background Tasks with Celery {#background-tasks-with-celery}&quot;">​</a></h1><p>If your application has a long running task, such as processing some uploaded data or sending email, you don’t want to wait for it to finish during a request. Instead, use a task queue to send the necessary data to another process that will run the task in the background while the request returns immediately.</p><p>Celery is a powerful task queue that can be used for simple background tasks as well as complex multi-stage programs and schedules. This guide will show you how to configure Celery using Flask. Read <a href="https://celery.readthedocs.io/en/latest/getting-started/first-steps-with-celery.html" target="_blank" rel="noreferrer">Celery&#39;s First Steps with Celery</a> guide to learn how to use Celery itself.</p><p>The Flask repository contains <a href="https://github.com/pallets/flask/tree/main/examples/celery" target="_blank" rel="noreferrer">an example</a> based on the information on this page, which also shows how to use JavaScript to submit tasks and poll for progress and results.</p><h2 id="install" tabindex="-1">Install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Install {#install}&quot;">​</a></h2><p>Install Celery from PyPI, for example using pip:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celery</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celery</span></span></code></pre></div><h2 id="integrate-celery-with-flask" tabindex="-1">Integrate Celery with Flask <a class="header-anchor" href="#integrate-celery-with-flask" aria-label="Permalink to &quot;Integrate Celery with Flask {#integrate-celery-with-flask}&quot;">​</a></h2><p>You can use Celery without any integration with Flask, but it’s convenient to configure it through Flask’s config, and to let tasks access the Flask application.</p><p>Celery uses similar ideas to Flask, with a <code>Celery</code> app object that has configuration and registers tasks. While creating a Flask app, use the following code to create and configure a Celery app as well.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> celery </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Celery, Task</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">celery_init_app</span><span style="color:#E1E4E8;">(app: Flask) -&gt; Celery:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FlaskTask</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Task</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__call__</span><span style="color:#E1E4E8;">(self, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args: </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs: </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">) -&gt; </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.run(</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    celery_app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Celery(app.name, </span><span style="color:#FFAB70;">task_cls</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">FlaskTask)</span></span>
<span class="line"><span style="color:#E1E4E8;">    celery_app.config_from_object(app.config[</span><span style="color:#9ECBFF;">&quot;CELERY&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    celery_app.set_default()</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.extensions[</span><span style="color:#9ECBFF;">&quot;celery&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> celery_app</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> celery_app</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Celery, Task</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">celery_init_app</span><span style="color:#24292E;">(app: Flask) -&gt; Celery:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FlaskTask</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Task</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__call__</span><span style="color:#24292E;">(self, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args: </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs: </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">) -&gt; </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> app.app_context():</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.run(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    celery_app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Celery(app.name, </span><span style="color:#E36209;">task_cls</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">FlaskTask)</span></span>
<span class="line"><span style="color:#24292E;">    celery_app.config_from_object(app.config[</span><span style="color:#032F62;">&quot;CELERY&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    celery_app.set_default()</span></span>
<span class="line"><span style="color:#24292E;">    app.extensions[</span><span style="color:#032F62;">&quot;celery&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> celery_app</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> celery_app</span></span></code></pre></div><p>This creates and returns a <code>Celery</code> app object. Celery <a href="https://celery.readthedocs.io/en/stable/userguide/configuration.html" target="_blank" rel="noreferrer">configuration</a> is taken from the <code>CELERY</code> key in the Flask configuration. The Celery app is set as the default, so that it is seen during each request. The <code>Task</code> subclass automatically runs task functions with a Flask app context active, so that services like your database connections are available.</p><p>Here’s a basic <code>example.py</code> that configures Celery to use Redis for communication. We enable a result backend, but ignore results by default. This allows us to store results only for tasks where we care about the result.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Flask</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.config.from_mapping(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">CELERY</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">broker_url</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;redis://localhost&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">result_backend</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;redis://localhost&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">task_ignore_result</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">celery_app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> celery_init_app(app)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Flask</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">app.config.from_mapping(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">CELERY</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">broker_url</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;redis://localhost&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">result_backend</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;redis://localhost&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">task_ignore_result</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">celery_app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> celery_init_app(app)</span></span></code></pre></div><p>Point the <code>celery worker</code> command at this and it will find the <code>celery_app</code> object.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celery</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-A</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">example</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--loglevel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">INFO</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celery</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">example</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--loglevel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">INFO</span></span></code></pre></div><p>You can also run the <code>celery beat</code> command to run tasks on a schedule. See Celery’s docs for more information about defining schedules.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celery</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-A</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">example</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">beat</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--loglevel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">INFO</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celery</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">example</span><span style="color:#24292E;"> </span><span style="color:#032F62;">beat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--loglevel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">INFO</span></span></code></pre></div><h2 id="application-factory" tabindex="-1">Application Factory <a class="header-anchor" href="#application-factory" aria-label="Permalink to &quot;Application Factory {#application-factory}&quot;">​</a></h2><p>When using the Flask application factory pattern, call the <code>celery_init_app</code> function inside the factory. It sets <code>app.extensions[&quot;celery&quot;]</code> to the Celery app object, which can be used to get the Celery app from the Flask app returned by the factory.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create_app</span><span style="color:#E1E4E8;">() -&gt; Flask:</span></span>
<span class="line"><span style="color:#E1E4E8;">    app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.config.from_mapping(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">CELERY</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">broker_url</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;redis://localhost&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">result_backend</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;redis://localhost&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">task_ignore_result</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.config.from_prefixed_env()</span></span>
<span class="line"><span style="color:#E1E4E8;">    celery_init_app(app)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> app</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_app</span><span style="color:#24292E;">() -&gt; Flask:</span></span>
<span class="line"><span style="color:#24292E;">    app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    app.config.from_mapping(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">CELERY</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">broker_url</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;redis://localhost&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">result_backend</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;redis://localhost&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">task_ignore_result</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    app.config.from_prefixed_env()</span></span>
<span class="line"><span style="color:#24292E;">    celery_init_app(app)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> app</span></span></code></pre></div><p>To use <code>celery</code> commands, Celery needs an app object, but that’s no longer directly available. Create a <code>make_celery.py</code> file that calls the Flask app factory and gets the Celery app from the returned Flask app.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> example </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> create_app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">flask_app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> create_app()</span></span>
<span class="line"><span style="color:#E1E4E8;">celery_app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> flask_app.extensions[</span><span style="color:#9ECBFF;">&quot;celery&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> example </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> create_app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">flask_app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> create_app()</span></span>
<span class="line"><span style="color:#24292E;">celery_app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> flask_app.extensions[</span><span style="color:#032F62;">&quot;celery&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>Point the celery command to this file.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celery</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-A</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make_celery</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">worker</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--loglevel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">INFO</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celery</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-A</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">make_celery</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">beat</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--loglevel</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">INFO</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celery</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make_celery</span><span style="color:#24292E;"> </span><span style="color:#032F62;">worker</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--loglevel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">INFO</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celery</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">make_celery</span><span style="color:#24292E;"> </span><span style="color:#032F62;">beat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--loglevel</span><span style="color:#24292E;"> </span><span style="color:#032F62;">INFO</span></span></code></pre></div><h2 id="defining-tasks" tabindex="-1">Defining Tasks <a class="header-anchor" href="#defining-tasks" aria-label="Permalink to &quot;Defining Tasks {#defining-tasks}&quot;">​</a></h2><p>Using <code>@celery_app.task</code> to decorate task functions requires access to the <code>celery_app</code> object, which won’t be available when using the factory pattern. It also means that the decorated tasks are tied to the specific Flask and Celery app instances, which could be an issue during testing if you change configuration for a test.</p><p>Instead, use Celery’s <code>@shared_task</code> decorator. This creates task objects that will access whatever the “current app” is, which is a similar concept to Flask’s blueprints and app context. This is why we called <code>celery_app.set_default()</code> above.</p><p>Here’s an example task that adds two numbers together and returns the result.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> celery </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> shared_task</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@shared_task</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ignore_result</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">False</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add_together</span><span style="color:#E1E4E8;">(a: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">) -&gt; </span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> b</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> shared_task</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@shared_task</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ignore_result</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">False</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add_together</span><span style="color:#24292E;">(a: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">) -&gt; </span><span style="color:#005CC5;">int</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b</span></span></code></pre></div><p>Earlier, we configured Celery to ignore task results by default. Since we want to know the return value of this task, we set <code>ignore_result=False</code>. On the other hand, a task that didn’t need a result, such as sending an email, wouldn’t set this.</p><h2 id="calling-tasks" tabindex="-1">Calling Tasks <a class="header-anchor" href="#calling-tasks" aria-label="Permalink to &quot;Calling Tasks {#calling-tasks}&quot;">​</a></h2><p>The decorated function becomes a task object with methods to call it in the background. The simplest way is to use the <code>delay(*args, **kwargs)</code> method. See Celery’s docs for more methods.</p><p>A Celery worker must be running to run the task. Starting a worker is shown in the previous sections.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/add&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">start_add</span><span style="color:#E1E4E8;">() -&gt; dict[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">]:</span></span>
<span class="line"><span style="color:#E1E4E8;">    a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.form.get(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.form.get(</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">int</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> add_together.delay(a, b)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;result_id&quot;</span><span style="color:#E1E4E8;">: result.id}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/add&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">start_add</span><span style="color:#24292E;">() -&gt; dict[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#24292E;">    a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.form.get(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.form.get(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> add_together.delay(a, b)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;result_id&quot;</span><span style="color:#24292E;">: result.id}</span></span></code></pre></div><p>The route doesn’t get the task’s result immediately. That would defeat the purpose by blocking the response. Instead, we return the running task’s result id, which we can use later to get the result.</p><h2 id="getting-results" tabindex="-1">Getting Results <a class="header-anchor" href="#getting-results" aria-label="Permalink to &quot;Getting Results {#getting-results}&quot;">​</a></h2><p>To fetch the result of the task we started above, we’ll add another route that takes the result id we returned before. We return whether the task is finished (ready), whether it finished successfully, and what the return value (or error) was if it is finished.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> celery.result </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> AsyncResult</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/result/&lt;id&gt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">task_result</span><span style="color:#E1E4E8;">(id: </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">) -&gt; dict[</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">]:</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AsyncResult(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;ready&quot;</span><span style="color:#E1E4E8;">: result.ready(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;successful&quot;</span><span style="color:#E1E4E8;">: result.successful(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">: result.result </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> result.ready() </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> celery.result </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> AsyncResult</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/result/&lt;id&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">task_result</span><span style="color:#24292E;">(id: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">) -&gt; dict[</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">object</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AsyncResult(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;ready&quot;</span><span style="color:#24292E;">: result.ready(),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;successful&quot;</span><span style="color:#24292E;">: result.successful(),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">: result.result </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> result.ready() </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>Now you can start the task using the first route, then poll for the result using the second route. This keeps the Flask request workers from being blocked waiting for tasks to finish.</p><p>The Flask repository contains <a href="https://github.com/pallets/flask/tree/main/examples/celery" target="_blank" rel="noreferrer">an example</a> using JavaScript to submit tasks and poll for progress and results.</p><h2 id="passing-data-to-tasks" tabindex="-1">Passing Data to Tasks <a class="header-anchor" href="#passing-data-to-tasks" aria-label="Permalink to &quot;Passing Data to Tasks {#passing-data-to-tasks}&quot;">​</a></h2><p>The “add” task above took two integers as arguments. To pass arguments to tasks, Celery has to serialize them to a format that it can pass to other processes. Therefore, passing complex objects is not recommended. For example, it would be impossible to pass a SQLAlchemy model object, since that object is probably not serializable and is tied to the session that queried it.</p><p>Pass the minimal amount of data necessary to fetch or recreate any complex data within the task. Consider a task that will run when the logged in user asks for an archive of their data. The Flask request knows the logged in user, and has the user object queried from the database. It got that by querying the database for a given id, so the task can do the same thing. Pass the user’s id rather than the user object.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@shared_task</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generate_user_archive</span><span style="color:#E1E4E8;">(user_id: </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">) -&gt; </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.session.get(User, user_id)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">generate_user_archive.delay(current_user.id)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@shared_task</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generate_user_archive</span><span style="color:#24292E;">(user_id: </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">) -&gt; </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.session.get(User, user_id)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">generate_user_archive.delay(current_user.id)</span></span></code></pre></div>`,45),o=[p];function t(r,c,y,E,i,d){return a(),n("div",null,o)}const F=s(e,[["render",t]]);export{h as __pageData,F as default};
