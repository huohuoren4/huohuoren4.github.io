import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.01af844e.js";const F=JSON.parse('{"title":"Class-based Views","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/view.md","filePath":"python/flask/user_guide/view.md","lastUpdated":1693328004000}'),p={name:"python/flask/user_guide/view.md"},o=l(`<h1 id="class-based-views" tabindex="-1">Class-based Views <a class="header-anchor" href="#class-based-views" aria-label="Permalink to &quot;Class-based Views {#class-based-views}&quot;">​</a></h1><p>This page introduces using the <code>View</code> and <code>MethodView</code> classes to write class-based views.</p><p>A class-based view is a class that acts as a view function. Because it is a class, different instances of the class can be created with different arguments, to change the behavior of the view. This is also known as generic, reusable, or pluggable views.</p><p>An example of where this is useful is defining a class that creates an API based on the database model it is initialized with.</p><p>For more complex API behavior and customization, look into the various API extensions for Flask.</p><h2 id="basic-reusable-view" tabindex="-1">Basic Reusable View <a class="header-anchor" href="#basic-reusable-view" aria-label="Permalink to &quot;Basic Reusable View {#basic-reusable-view}&quot;">​</a></h2><p>Let’s walk through an example converting a view function to a view class. We start with a view function that queries a list of users then renders a template to show the list.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_list</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.query.all()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;users.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">users</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">users)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_list</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.query.all()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;users.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">users</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">users)</span></span></code></pre></div><p>This works for the user model, but let’s say you also had more models that needed list pages. You’d need to write another view function for each model, even though the only thing that would change is the model and template name.</p><p>Instead, you can write a <code>View</code> subclass that will query a model and render a template. As the first step, we’ll convert the view to a class without any customization.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask.views </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> View</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserList</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">View</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatch_request</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> User.query.all()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;users.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">objects</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">users)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.add_url_rule(</span><span style="color:#9ECBFF;">&quot;/users/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">UserList.as_view(</span><span style="color:#9ECBFF;">&quot;user_list&quot;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask.views </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> View</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserList</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">View</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch_request</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> User.query.all()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;users.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">objects</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">users)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.add_url_rule(</span><span style="color:#032F62;">&quot;/users/&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">UserList.as_view(</span><span style="color:#032F62;">&quot;user_list&quot;</span><span style="color:#24292E;">))</span></span></code></pre></div><p>The <code>View.dispatch_request()</code> method is the equivalent of the view function. Calling <code>View.as_view()</code> method will create a view function that can be registered on the app with its <code>add_url_rule()</code> method. The first argument to <code>as_view</code> is the name to use to refer to the view with <code>url_for()</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>You can’t decorate the class with <code>@app.route()</code> the way you’d do with a basic view function.</p></div><p>Next, we need to be able to register the same view class for different models and templates, to make it more useful than the original function. The class will take two arguments, the model and template, and store them on <code>self</code>. Then <code>dispatch_request</code> can reference these instead of hard-coded values.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListView</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">View</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, model, template):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> model</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatch_request</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        items </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model.query.all()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.template, </span><span style="color:#FFAB70;">items</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">items)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListView</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">View</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, model, template):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch_request</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model.query.all()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.template, </span><span style="color:#E36209;">items</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">items)</span></span></code></pre></div><p>Remember, we create the view function with <code>View.as_view()</code> instead of creating the class directly. Any extra arguments passed to <code>as_view</code> are then passed when creating the class. Now we can register the same view to handle multiple models.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;/users/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ListView.as_view(</span><span style="color:#9ECBFF;">&quot;user_list&quot;</span><span style="color:#E1E4E8;">, User, </span><span style="color:#9ECBFF;">&quot;users.html&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;/stories/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">ListView.as_view(</span><span style="color:#9ECBFF;">&quot;story_list&quot;</span><span style="color:#E1E4E8;">, Story, </span><span style="color:#9ECBFF;">&quot;stories.html&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;/users/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ListView.as_view(</span><span style="color:#032F62;">&quot;user_list&quot;</span><span style="color:#24292E;">, User, </span><span style="color:#032F62;">&quot;users.html&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;/stories/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">ListView.as_view(</span><span style="color:#032F62;">&quot;story_list&quot;</span><span style="color:#24292E;">, Story, </span><span style="color:#032F62;">&quot;stories.html&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="url-variables" tabindex="-1">URL Variables <a class="header-anchor" href="#url-variables" aria-label="Permalink to &quot;URL Variables {#url-variables}&quot;">​</a></h2><p>Any variables captured by the URL are passed as keyword arguments to the <code>dispatch_request</code> method, as they would be for a regular view function.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DetailView</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">View</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, model):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> model</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">model.</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">.lower()</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">/detail.html&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatch_request</span><span style="color:#E1E4E8;">(self, id)</span></span>
<span class="line"><span style="color:#E1E4E8;">        item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model.query.get_or_404(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.template, </span><span style="color:#FFAB70;">item</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">item)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;/users/&lt;int:id&gt;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">DetailView.as_view(</span><span style="color:#9ECBFF;">&quot;user_detail&quot;</span><span style="color:#E1E4E8;">, User)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DetailView</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">View</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, model):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">model.</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">.lower()</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">/detail.html&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch_request</span><span style="color:#24292E;">(self, id)</span></span>
<span class="line"><span style="color:#24292E;">        item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model.query.get_or_404(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.template, </span><span style="color:#E36209;">item</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">item)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;/users/&lt;int:id&gt;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">DetailView.as_view(</span><span style="color:#032F62;">&quot;user_detail&quot;</span><span style="color:#24292E;">, User)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="view-lifetime-and-self" tabindex="-1">View Lifetime and self <a class="header-anchor" href="#view-lifetime-and-self" aria-label="Permalink to &quot;View Lifetime and self {#view-lifetime-and-self}&quot;">​</a></h2><p>By default, a new instance of the view class is created every time a request is handled. This means that it is safe to write other data to <code>self</code> during the request, since the next request will not see it, unlike other forms of global state.</p><p>However, if your view class needs to do a lot of complex initialization, doing it for every request is unnecessary and can be inefficient. To avoid this, set <code>View.init_every_request</code> to <code>False</code>, which will only create one instance of the class and use it for every request. In this case, writing to <code>self</code> is not safe. If you need to store data during the request, use <code>g</code> instead.</p><p>In the <code>ListView</code> example, nothing writes to <code>self</code> during the request, so it is more efficient to create a single instance.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListView</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">View</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    init_every_request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, model, template):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> model</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.template </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatch_request</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        items </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model.query.all()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.template, </span><span style="color:#FFAB70;">items</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">items)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListView</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">View</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    init_every_request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, model, template):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch_request</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model.query.all()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.template, </span><span style="color:#E36209;">items</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">items)</span></span></code></pre></div><p>Different instances will still be created each for each <code>as_view</code> call, but not for each request to those views.</p><h2 id="view-decorators" tabindex="-1">View Decorators <a class="header-anchor" href="#view-decorators" aria-label="Permalink to &quot;View Decorators {#view-decorators}&quot;">​</a></h2><p>The view class itself is not the view function. View decorators need to be applied to the view function returned by <code>as_view</code>, not the class itself. Set <code>View.decorators</code> to a list of decorators to apply.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserList</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">View</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    decorators </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [cache(</span><span style="color:#FFAB70;">minutes</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), login_required]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.add_url_rule(</span><span style="color:#9ECBFF;">&#39;/users/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">UserList.as_view())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserList</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">View</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    decorators </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [cache(</span><span style="color:#E36209;">minutes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), login_required]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.add_url_rule(</span><span style="color:#032F62;">&#39;/users/&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">UserList.as_view())</span></span></code></pre></div><p>If you didn’t set <code>decorators</code>, you could apply them manually instead. This is equivalent to:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">view </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> UserList.as_view(</span><span style="color:#9ECBFF;">&quot;users_list&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">view </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache(</span><span style="color:#FFAB70;">minutes</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)(view)</span></span>
<span class="line"><span style="color:#E1E4E8;">view </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> login_required(view)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.add_url_rule(</span><span style="color:#9ECBFF;">&#39;/users/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">view)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">view </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UserList.as_view(</span><span style="color:#032F62;">&quot;users_list&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">view </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache(</span><span style="color:#E36209;">minutes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)(view)</span></span>
<span class="line"><span style="color:#24292E;">view </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> login_required(view)</span></span>
<span class="line"><span style="color:#24292E;">app.add_url_rule(</span><span style="color:#032F62;">&#39;/users/&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">view)</span></span></code></pre></div><p>Keep in mind that order matters. If you’re used to <code>@decorator</code> style, this is equivalent to:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/users/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">@login_required</span></span>
<span class="line"><span style="color:#B392F0;">@cache</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">minutes</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_list</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">@login_required</span></span>
<span class="line"><span style="color:#6F42C1;">@cache</span><span style="color:#24292E;">(</span><span style="color:#E36209;">minutes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_list</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span></code></pre></div><h2 id="method-hints" tabindex="-1">Method Hints <a class="header-anchor" href="#method-hints" aria-label="Permalink to &quot;Method Hints {#method-hints}&quot;">​</a></h2><p>A common pattern is to register a view with <code>methods=[&quot;GET&quot;, &quot;POST&quot;]</code>, then check <code>request.method == &quot;POST&quot;</code> to decide what to do. Setting <code>View.methods</code> is equivalent to passing the list of methods to <code>add_url_rule</code> or <code>route</code>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyView</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">View</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    methods </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dispatch_request</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> request.method </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.add_url_rule(</span><span style="color:#9ECBFF;">&#39;/my-view&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">MyView.as_view(</span><span style="color:#9ECBFF;">&#39;my-view&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyView</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">View</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dispatch_request</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> request.method </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.add_url_rule(</span><span style="color:#032F62;">&#39;/my-view&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">MyView.as_view(</span><span style="color:#032F62;">&#39;my-view&#39;</span><span style="color:#24292E;">))</span></span></code></pre></div><p>This is equivalent to the following, except further subclasses can inherit or change the methods.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;/my-view&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">MyView.as_view(</span><span style="color:#9ECBFF;">&quot;my-view&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">methods</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.add_url_rule(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;/my-view&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">MyView.as_view(</span><span style="color:#032F62;">&quot;my-view&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">methods</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="method-dispatching-and-apis" tabindex="-1">Method Dispatching and APIs <a class="header-anchor" href="#method-dispatching-and-apis" aria-label="Permalink to &quot;Method Dispatching and APIs {#method-dispatching-and-apis}&quot;">​</a></h2><p>For APIs it can be helpful to use a different function for each HTTP method. <code>MethodView</code> extends the basic <code>View</code> to dispatch to different methods of the class based on the request method. Each HTTP method maps to a method of the class with the same (lowercase) name.</p><p><code>MethodView</code> automatically sets <code>View.methods</code> based on the methods defined by the class. It even knows how to handle subclasses that override or define other methods.</p><p>We can make a generic <code>ItemAPI</code> class that provides get (detail), patch (edit), and delete methods for a given model. A <code>GroupAPI</code> can provide get (list) and post (create) methods.</p><p>from flask.views import MethodView</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ItemAPI</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">MethodView</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    init_every_request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, model):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> model</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.validator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> generate_validator(model)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_get_item</span><span style="color:#E1E4E8;">(self, id):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model.query.get_or_404(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(self, id):</span></span>
<span class="line"><span style="color:#E1E4E8;">        item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">._get_item(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify(item.to_json())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">patch</span><span style="color:#E1E4E8;">(self, id):</span></span>
<span class="line"><span style="color:#E1E4E8;">        item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">._get_item(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        errors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.validator.validate(item, request.json)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> errors:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify(errors), </span><span style="color:#79B8FF;">400</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        item.update_from_json(request.json)</span></span>
<span class="line"><span style="color:#E1E4E8;">        db.session.commit()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify(item.to_json())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(self, id):</span></span>
<span class="line"><span style="color:#E1E4E8;">        item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">._get_item(</span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        db.session.delete(item)</span></span>
<span class="line"><span style="color:#E1E4E8;">        db.session.commit()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">204</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GroupAPI</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">MethodView</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    init_every_request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, model):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> model</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.validator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> generate_validator(model, </span><span style="color:#FFAB70;">create</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        items </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model.query.all()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify([item.to_json() </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">post</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        errors </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.validator.validate(request.json)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> errors:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify(errors), </span><span style="color:#79B8FF;">400</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        db.session.add(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.model.from_json(request.json))</span></span>
<span class="line"><span style="color:#E1E4E8;">        db.session.commit()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify(item.to_json())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">register_api</span><span style="color:#E1E4E8;">(app, model, name):</span></span>
<span class="line"><span style="color:#E1E4E8;">    item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ItemAPI.as_view(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">-item&quot;</span><span style="color:#E1E4E8;">, model)</span></span>
<span class="line"><span style="color:#E1E4E8;">    group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> GroupAPI.as_view(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">-group&quot;</span><span style="color:#E1E4E8;">, model)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.add_url_rule(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;/</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">/&lt;int:id&gt;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">item)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.add_url_rule(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;/</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">view_func</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">group)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">register_api(app, User, </span><span style="color:#9ECBFF;">&quot;users&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">register_api(app, Story, </span><span style="color:#9ECBFF;">&quot;stories&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ItemAPI</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">MethodView</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    init_every_request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, model):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.validator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> generate_validator(model)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_get_item</span><span style="color:#24292E;">(self, id):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model.query.get_or_404(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(self, id):</span></span>
<span class="line"><span style="color:#24292E;">        item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._get_item(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify(item.to_json())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">patch</span><span style="color:#24292E;">(self, id):</span></span>
<span class="line"><span style="color:#24292E;">        item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._get_item(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        errors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.validator.validate(item, request.json)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> errors:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify(errors), </span><span style="color:#005CC5;">400</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        item.update_from_json(request.json)</span></span>
<span class="line"><span style="color:#24292E;">        db.session.commit()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify(item.to_json())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(self, id):</span></span>
<span class="line"><span style="color:#24292E;">        item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._get_item(</span><span style="color:#005CC5;">id</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        db.session.delete(item)</span></span>
<span class="line"><span style="color:#24292E;">        db.session.commit()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">204</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GroupAPI</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">MethodView</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    init_every_request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, model):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> model</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.validator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> generate_validator(model, </span><span style="color:#E36209;">create</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model.query.all()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify([item.to_json() </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> items])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        errors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.validator.validate(request.json)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> errors:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify(errors), </span><span style="color:#005CC5;">400</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        db.session.add(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.model.from_json(request.json))</span></span>
<span class="line"><span style="color:#24292E;">        db.session.commit()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify(item.to_json())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">register_api</span><span style="color:#24292E;">(app, model, name):</span></span>
<span class="line"><span style="color:#24292E;">    item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ItemAPI.as_view(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">-item&quot;</span><span style="color:#24292E;">, model)</span></span>
<span class="line"><span style="color:#24292E;">    group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> GroupAPI.as_view(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">-group&quot;</span><span style="color:#24292E;">, model)</span></span>
<span class="line"><span style="color:#24292E;">    app.add_url_rule(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;/</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">/&lt;int:id&gt;&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">item)</span></span>
<span class="line"><span style="color:#24292E;">    app.add_url_rule(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;/</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">/&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">view_func</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">group)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">register_api(app, User, </span><span style="color:#032F62;">&quot;users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">register_api(app, Story, </span><span style="color:#032F62;">&quot;stories&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>This produces the following views, a standard REST API!</p><table><thead><tr><th>URL</th><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>/users/</code></td><td>GET</td><td>List all users</td></tr><tr><td><code>/users/</code></td><td>POST</td><td>Create a new user</td></tr><tr><td><code>/users/&lt;id&gt;</code></td><td>GET</td><td>Show a single user</td></tr><tr><td><code>/users/&lt;id&gt;</code></td><td>PATCH</td><td>Update a user</td></tr><tr><td><code>/users/&lt;id&gt;</code></td><td>DELETE</td><td>Delete a user</td></tr><tr><td><code>/stories/</code></td><td>GET</td><td>List all stories</td></tr><tr><td><code>/stories/</code></td><td>POST</td><td>Create a new story</td></tr><tr><td><code>/stories/&lt;id&gt;</code></td><td>GET</td><td>Show a single story</td></tr><tr><td><code>/stories/&lt;id&gt;</code></td><td>PATCH</td><td>Update a story</td></tr><tr><td><code>/stories/&lt;id&gt;</code></td><td>DELETE</td><td>Delete a story</td></tr></tbody></table>`,46),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{F as __pageData,h as default};
