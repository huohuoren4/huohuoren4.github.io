import{_ as s,o as a,c as o,Q as l}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"How to manage logging","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/logging.md","filePath":"python/pytest/how_to_guides/logging.md","lastUpdated":1692720083000}'),n={name:"python/pytest/how_to_guides/logging.md"},e=l(`<h1 id="how-to-manage-logging" tabindex="-1">How to manage logging <a class="header-anchor" href="#how-to-manage-logging" aria-label="Permalink to &quot;How to manage logging {#how-to-manage-logging}&quot;">â€‹</a></h1><p>pytest captures log messages of level <code>WARNING</code> or above automatically and displays them in their own section for each failed test in the same manner as captured stdout and stderr.</p><p>Running without options:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span></span></code></pre></div><p>Shows failed tests like so:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">-----------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stdlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">----------------------</span></span>
<span class="line"><span style="color:#B392F0;">test_reporting.py</span><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">26</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">WARNING</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">going</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">logger</span></span>
<span class="line"><span style="color:#B392F0;">-----------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stdout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">----------------------</span></span>
<span class="line"><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">going</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stdout</span></span>
<span class="line"><span style="color:#B392F0;">-----------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stderr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">----------------------</span></span>
<span class="line"><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">going</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stderr</span></span>
<span class="line"><span style="color:#E1E4E8;">==================== </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.02</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">seconds</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=====================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">-----------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stdlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">----------------------</span></span>
<span class="line"><span style="color:#6F42C1;">test_reporting.py</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">26</span><span style="color:#24292E;"> </span><span style="color:#032F62;">WARNING</span><span style="color:#24292E;">  </span><span style="color:#032F62;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">going</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logger</span></span>
<span class="line"><span style="color:#6F42C1;">-----------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stdout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">----------------------</span></span>
<span class="line"><span style="color:#6F42C1;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">going</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stdout</span></span>
<span class="line"><span style="color:#6F42C1;">-----------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stderr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">----------------------</span></span>
<span class="line"><span style="color:#6F42C1;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">going</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stderr</span></span>
<span class="line"><span style="color:#24292E;">==================== </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.02</span><span style="color:#24292E;"> </span><span style="color:#032F62;">seconds</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=====================</span></span></code></pre></div><p>By default each captured log message shows the module, line number, log level and message.</p><p>If desired the log and date format can be specified to anything that the logging module supports by passing specific formatting options:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--log-format=</span><span style="color:#9ECBFF;">&quot;%(asctime)s %(levelname)s %(message)s&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">--log-date-format=</span><span style="color:#9ECBFF;">&quot;%Y-%m-%d %H:%M:%S&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--log-format=</span><span style="color:#032F62;">&quot;%(asctime)s %(levelname)s %(message)s&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">--log-date-format=</span><span style="color:#032F62;">&quot;%Y-%m-%d %H:%M:%S&quot;</span></span></code></pre></div><p>Shows failed tests like so:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">-----------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stdlog</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">----------------------</span></span>
<span class="line"><span style="color:#B392F0;">2010-04-10</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">14</span><span style="color:#9ECBFF;">:48:44</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">WARNING</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">going</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">logger</span></span>
<span class="line"><span style="color:#B392F0;">-----------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stdout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">----------------------</span></span>
<span class="line"><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">going</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stdout</span></span>
<span class="line"><span style="color:#B392F0;">-----------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stderr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">----------------------</span></span>
<span class="line"><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">going</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stderr</span></span>
<span class="line"><span style="color:#E1E4E8;">==================== </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.02</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">seconds</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=====================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">-----------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stdlog</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">----------------------</span></span>
<span class="line"><span style="color:#6F42C1;">2010-04-10</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">14</span><span style="color:#032F62;">:48:44</span><span style="color:#24292E;"> </span><span style="color:#032F62;">WARNING</span><span style="color:#24292E;"> </span><span style="color:#032F62;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">going</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logger</span></span>
<span class="line"><span style="color:#6F42C1;">-----------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stdout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">----------------------</span></span>
<span class="line"><span style="color:#6F42C1;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">going</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stdout</span></span>
<span class="line"><span style="color:#6F42C1;">-----------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stderr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">----------------------</span></span>
<span class="line"><span style="color:#6F42C1;">text</span><span style="color:#24292E;"> </span><span style="color:#032F62;">going</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stderr</span></span>
<span class="line"><span style="color:#24292E;">==================== </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.02</span><span style="color:#24292E;"> </span><span style="color:#032F62;">seconds</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=====================</span></span></code></pre></div><p>These options can also be customized through <code>pytest.ini</code> file:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">log_format</span><span style="color:#E1E4E8;"> = %(asctime)s %(levelname)s %(message)s</span></span>
<span class="line"><span style="color:#F97583;">log_date_format</span><span style="color:#E1E4E8;"> = %Y-%m-%d %H:%M:%S</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">log_format</span><span style="color:#24292E;"> = %(asctime)s %(levelname)s %(message)s</span></span>
<span class="line"><span style="color:#D73A49;">log_date_format</span><span style="color:#24292E;"> = %Y-%m-%d %H:%M:%S</span></span></code></pre></div><p>Specific loggers can be disabled via <code>--log-disable={logger_name}</code>. This argument can be passed multiple times:</p><p>pytest --log-disable=main --log-disable=testing Further it is possible to disable reporting of captured content (stdout, stderr and logs) on failed tests completely with:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--show-capture=no</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--show-capture=no</span></span></code></pre></div><h2 id="caplog-fixture" tabindex="-1">caplog fixture <a class="header-anchor" href="#caplog-fixture" aria-label="Permalink to &quot;caplog fixture {#caplog-fixture}&quot;">â€‹</a></h2><p>Inside tests it is possible to change the log level for the captured log messages. This is supported by the <code>caplog</code> fixture:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_foo</span><span style="color:#E1E4E8;">(caplog):</span></span>
<span class="line"><span style="color:#E1E4E8;">    caplog.set_level(logging.</span><span style="color:#79B8FF;">INFO</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_foo</span><span style="color:#24292E;">(caplog):</span></span>
<span class="line"><span style="color:#24292E;">    caplog.set_level(logging.</span><span style="color:#005CC5;">INFO</span><span style="color:#24292E;">)</span></span></code></pre></div><p>By default the level is set on the root logger, however as a convenience it is also possible to set the log level of any logger:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_foo</span><span style="color:#E1E4E8;">(caplog):</span></span>
<span class="line"><span style="color:#E1E4E8;">    caplog.set_level(logging.</span><span style="color:#79B8FF;">CRITICAL</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">logger</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;root.baz&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_foo</span><span style="color:#24292E;">(caplog):</span></span>
<span class="line"><span style="color:#24292E;">    caplog.set_level(logging.</span><span style="color:#005CC5;">CRITICAL</span><span style="color:#24292E;">, </span><span style="color:#E36209;">logger</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;root.baz&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>The log levels set are restored automatically at the end of the test.</p><p>It is also possible to use a context manager to temporarily change the log level inside a <code>with</code> block:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_bar</span><span style="color:#E1E4E8;">(caplog):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> caplog.at_level(logging.</span><span style="color:#79B8FF;">INFO</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_bar</span><span style="color:#24292E;">(caplog):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> caplog.at_level(logging.</span><span style="color:#005CC5;">INFO</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>Again, by default the level of the root logger is affected but the level of any logger can be changed instead with:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_bar</span><span style="color:#E1E4E8;">(caplog):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> caplog.at_level(logging.</span><span style="color:#79B8FF;">CRITICAL</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">logger</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;root.baz&quot;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_bar</span><span style="color:#24292E;">(caplog):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> caplog.at_level(logging.</span><span style="color:#005CC5;">CRITICAL</span><span style="color:#24292E;">, </span><span style="color:#E36209;">logger</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;root.baz&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>Lastly all the logs sent to the logger during the test run are made available on the fixture in the form of both the <code>logging.LogRecord</code> instances and the final log text. This is useful for when you want to assert on the contents of a message:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_baz</span><span style="color:#E1E4E8;">(caplog):</span></span>
<span class="line"><span style="color:#E1E4E8;">    func_under_test()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> record </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> caplog.records:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> record.levelname </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;CRITICAL&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;wally&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> caplog.text</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_baz</span><span style="color:#24292E;">(caplog):</span></span>
<span class="line"><span style="color:#24292E;">    func_under_test()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> record </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> caplog.records:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> record.levelname </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;CRITICAL&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;wally&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> caplog.text</span></span></code></pre></div><p>For all the available attributes of the log records see the <code>logging.LogRecord</code> class.</p><p>You can also resort to <code>record_tuples</code> if all you want to do is to ensure, that certain messages have been logged under a given logger name with a given severity and message:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_foo</span><span style="color:#E1E4E8;">(caplog):</span></span>
<span class="line"><span style="color:#E1E4E8;">    logging.getLogger().info(</span><span style="color:#9ECBFF;">&quot;boo </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;arg&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> caplog.record_tuples </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> [(</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">, logging.</span><span style="color:#79B8FF;">INFO</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;boo arg&quot;</span><span style="color:#E1E4E8;">)]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_foo</span><span style="color:#24292E;">(caplog):</span></span>
<span class="line"><span style="color:#24292E;">    logging.getLogger().info(</span><span style="color:#032F62;">&quot;boo </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;arg&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> caplog.record_tuples </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> [(</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">, logging.</span><span style="color:#005CC5;">INFO</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;boo arg&quot;</span><span style="color:#24292E;">)]</span></span></code></pre></div><p>You can call <code>caplog.clear()</code> to reset the captured log records in a test:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_something_with_clearing_records</span><span style="color:#E1E4E8;">(caplog):</span></span>
<span class="line"><span style="color:#E1E4E8;">    some_method_that_creates_log_records()</span></span>
<span class="line"><span style="color:#E1E4E8;">    caplog.clear()</span></span>
<span class="line"><span style="color:#E1E4E8;">    your_test_method()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;Foo&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> [rec.message </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> rec </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> caplog.records]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_something_with_clearing_records</span><span style="color:#24292E;">(caplog):</span></span>
<span class="line"><span style="color:#24292E;">    some_method_that_creates_log_records()</span></span>
<span class="line"><span style="color:#24292E;">    caplog.clear()</span></span>
<span class="line"><span style="color:#24292E;">    your_test_method()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;Foo&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> [rec.message </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> rec </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> caplog.records]</span></span></code></pre></div><p>The <code>caplog.records</code> attribute contains records from the current stage only, so inside the setup phase it contains only <code>setup</code> logs, same with the <code>call</code> and <code>teardown</code> phases.</p><p>To access logs from other stages, use the <code>caplog.get_records(when)</code> method. As an example, if you want to make sure that tests which use a certain fixture never log any warnings, you can inspect the records for the <code>setup</code> and <code>call</code> stages during teardown like so:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@pytest.fixture</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">window</span><span style="color:#E1E4E8;">(caplog):</span></span>
<span class="line"><span style="color:#E1E4E8;">    window </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> create_window()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> window</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> when </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;setup&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;call&quot;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        messages </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            x.message </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> caplog.get_records(when) </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> x.levelno </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> logging.</span><span style="color:#79B8FF;">WARNING</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> messages:</span></span>
<span class="line"><span style="color:#E1E4E8;">            pytest.fail(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;warning messages encountered during testing: </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">messages</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@pytest.fixture</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">window</span><span style="color:#24292E;">(caplog):</span></span>
<span class="line"><span style="color:#24292E;">    window </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> create_window()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> window</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> when </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;setup&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;call&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        messages </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">            x.message </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> caplog.get_records(when) </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> x.levelno </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> logging.</span><span style="color:#005CC5;">WARNING</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> messages:</span></span>
<span class="line"><span style="color:#24292E;">            pytest.fail(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;warning messages encountered during testing: </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">messages</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>The full API is available at <code>pytest.LogCaptureFixture</code>.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>The <code>caplog</code> fixture adds a handler to the root logger to capture logs. If the root logger is modified during a test, for example with <code>logging.config.dictConfig</code>, this handler may be removed and cause no logs to be captured. To avoid this, ensure that any root logger configuration only adds to the existing handlers.</p></div><h2 id="live-logs" tabindex="-1">Live Logs <a class="header-anchor" href="#live-logs" aria-label="Permalink to &quot;Live Logs {#live-logs}&quot;">â€‹</a></h2><p>By setting the <code>log_cli</code> configuration option to <code>true</code>, pytest will output logging records as they are emitted directly into the console.</p><p>You can specify the logging level for which log records with equal or higher level are printed to the console by passing <code>--log-cli-level</code>. This setting accepts the logging level names or numeric values as seen in <a href="https://docs.python.org/3/library/logging.html#levels" target="_blank" rel="noreferrer">loggingâ€™s documentation</a>.</p><p>Additionally, you can also specify <code>--log-cli-format</code> and <code>--log-cli-date-format</code> which mirror and default to <code>--log-format</code> and <code>--log-date-format</code> if not provided, but are applied only to the console logging handler.</p><p>All of the CLI log options can also be set in the configuration INI file. The option names are:</p><ul><li><p><code>log_cli_level</code></p></li><li><p><code>log_cli_format</code></p></li><li><p><code>log_cli_date_format</code></p></li></ul><p>If you need to record the whole test suite logging calls to a file, you can pass <code>--log-file=/path/to/log/file</code>. This log file is opened in write mode which means that it will be overwritten at each run tests session. Note that relative paths for the log-file location, whether passed on the CLI or declared in a config file, are always resolved relative to the current working directory.</p><p>You can also specify the logging level for the log file by passing <code>--log-file-level</code>. This setting accepts the logging level names or numeric values as seen in <a href="https://docs.python.org/3/library/logging.html#levels" target="_blank" rel="noreferrer">loggingâ€™s documentation</a>.</p><p>Additionally, you can also specify <code>--log-file-format</code> and <code>--log-file-date-format</code> which are equal to <code>--log-format</code> and <code>--log-date-format</code> but are applied to the log file logging handler.</p><p>All of the log file options can also be set in the configuration INI file. The option names are:</p><ul><li><p><code>log_file</code></p></li><li><p><code>log_file_level</code></p></li><li><p><code>log_file_format</code></p></li><li><p><code>log_file_date_format</code></p></li></ul><p>You can call <code>set_log_path()</code> to customize the log_file path dynamically. This functionality is considered experimental.</p><h2 id="customizing-colors" tabindex="-1">Customizing Colors <a class="header-anchor" href="#customizing-colors" aria-label="Permalink to &quot;Customizing Colors {#customizing-colors}&quot;">â€‹</a></h2><p>Log levels are colored if colored terminal output is enabled. Changing from default colors or putting color on custom log levels is supported through <code>add_color_level()</code>. Example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@pytest.hookimpl</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_configure</span><span style="color:#E1E4E8;">(config):</span></span>
<span class="line"><span style="color:#E1E4E8;">    logging_plugin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.pluginmanager.get_plugin(</span><span style="color:#9ECBFF;">&quot;logging-plugin&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># Change color on existing log level</span></span>
<span class="line"><span style="color:#E1E4E8;">    logging_plugin.log_cli_handler.formatter.add_color_level(logging.</span><span style="color:#79B8FF;">INFO</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;cyan&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># Add color to a custom log level (a custom log level \`SPAM\` is already set up)</span></span>
<span class="line"><span style="color:#E1E4E8;">    logging_plugin.log_cli_handler.formatter.add_color_level(logging.</span><span style="color:#79B8FF;">SPAM</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;blue&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@pytest.hookimpl</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_configure</span><span style="color:#24292E;">(config):</span></span>
<span class="line"><span style="color:#24292E;">    logging_plugin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.pluginmanager.get_plugin(</span><span style="color:#032F62;">&quot;logging-plugin&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Change color on existing log level</span></span>
<span class="line"><span style="color:#24292E;">    logging_plugin.log_cli_handler.formatter.add_color_level(logging.</span><span style="color:#005CC5;">INFO</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;cyan&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># Add color to a custom log level (a custom log level \`SPAM\` is already set up)</span></span>
<span class="line"><span style="color:#24292E;">    logging_plugin.log_cli_handler.formatter.add_color_level(logging.</span><span style="color:#005CC5;">SPAM</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This feature and its API are considered experimental and might change between releases without a deprecation notice.</p></div><h2 id="release-notes" tabindex="-1">Release notes <a class="header-anchor" href="#release-notes" aria-label="Permalink to &quot;Release notes {#release-notes}&quot;">â€‹</a></h2><p>This feature was introduced as a drop-in replacement for the <code>pytest-catchlog</code> plugin and they conflict with each other. The backward compatibility API with <code>pytest-capturelog</code> has been dropped when this feature was introduced, so if for that reason you still need <code>pytest-catchlog</code> you can disable the internal feature by adding to your <code>pytest.ini</code>:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">addopts</span><span style="color:#E1E4E8;">=-p no:logging</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">addopts</span><span style="color:#24292E;">=-p no:logging</span></span></code></pre></div><h2 id="incompatible-changes-in-pytest-3-4" tabindex="-1">Incompatible changes in pytest 3.4 <a class="header-anchor" href="#incompatible-changes-in-pytest-3-4" aria-label="Permalink to &quot;Incompatible changes in pytest 3.4 {#incompatible-changes-in-pytest-3-4}&quot;">â€‹</a></h2><p>This feature was introduced in <code>3.3</code> and some incompatible changes have been made in <code>3.4</code> after community feedback:</p><ul><li><p>Log levels are no longer changed unless explicitly requested by the <code>log_level</code> configuration or <code>--log-level</code> command-line options. This allows users to configure logger objects themselves. Setting <code>log_level</code> will set the level that is captured globally so if a specific test requires a lower level than this, use the <code>caplog.set_level()</code> functionality otherwise that test will be prone to failure.</p></li><li><p><a href="/python/pytest/how_to_guides/logging#live-logs">Live Logs</a> is now disabled by default and can be enabled setting the <code>log_cli</code> configuration option to <code>true</code>. When enabled, the verbosity is increased so logging for each test is visible.</p></li><li><p><a href="/python/pytest/how_to_guides/logging#live-logs">Live Logs</a> are now sent to <code>sys.stdout</code> and no longer require the <code>-s</code> command-line option to work.</p></li></ul><p>If you want to partially restore the logging behavior of version <code>3.3</code>, you can add this options to your <code>ini</code> file:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">log_cli</span><span style="color:#E1E4E8;">=true</span></span>
<span class="line"><span style="color:#F97583;">log_level</span><span style="color:#E1E4E8;">=NOTSET</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">log_cli</span><span style="color:#24292E;">=true</span></span>
<span class="line"><span style="color:#D73A49;">log_level</span><span style="color:#24292E;">=NOTSET</span></span></code></pre></div><p>More details about the discussion that lead to this changes can be read in <a href="https://github.com/pytest-dev/pytest/issues/3013" target="_blank" rel="noreferrer">issue #3013</a>.</p>`,63),p=[e];function t(c,r,i,y,E,g){return a(),o("div",null,p)}const u=s(n,[["render",t]]);export{h as __pageData,u as default};
