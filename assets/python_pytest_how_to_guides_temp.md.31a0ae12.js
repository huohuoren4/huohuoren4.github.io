import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.01af844e.js";const _=JSON.parse('{"title":"How to use temporary directories and files in tests","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/temp.md","filePath":"python/pytest/how_to_guides/temp.md","lastUpdated":1692720083000}'),l={name:"python/pytest/how_to_guides/temp.md"},o=p(`<h1 id="how-to-use-temporary-directories-and-files-in-tests" tabindex="-1">How to use temporary directories and files in tests <a class="header-anchor" href="#how-to-use-temporary-directories-and-files-in-tests" aria-label="Permalink to &quot;How to use temporary directories and files in tests {#how-to-use-temporary-directories-and-files-in-tests}&quot;">​</a></h1><h2 id="the-tmp-path-fixture" tabindex="-1">The <code>tmp_path</code> fixture <a class="header-anchor" href="#the-tmp-path-fixture" aria-label="Permalink to &quot;The \`tmp_path\` fixture {#the-tmp-path-fixture}&quot;">​</a></h2><p>You can use the <code>tmp_path</code> fixture which will provide a temporary directory unique to the test invocation, created in the <a href="/python/pytest/how_to_guides/temp#the-default-base-temporary-directory">base temporary directory</a>.</p><p><code>tmp_path</code> is a <code>pathlib.Path</code> object. Here is an example test usage:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_tmp_path.py</span></span>
<span class="line"><span style="color:#79B8FF;">CONTENT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;content&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_create_file</span><span style="color:#E1E4E8;">(tmp_path):</span></span>
<span class="line"><span style="color:#E1E4E8;">    d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp_path </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;sub&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    d.mkdir()</span></span>
<span class="line"><span style="color:#E1E4E8;">    p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello.txt&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    p.write_text(</span><span style="color:#79B8FF;">CONTENT</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">encoding</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> p.read_text(</span><span style="color:#FFAB70;">encoding</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CONTENT</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;">(tmp_path.iterdir())) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_tmp_path.py</span></span>
<span class="line"><span style="color:#005CC5;">CONTENT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;content&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_create_file</span><span style="color:#24292E;">(tmp_path):</span></span>
<span class="line"><span style="color:#24292E;">    d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp_path </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sub&quot;</span></span>
<span class="line"><span style="color:#24292E;">    d.mkdir()</span></span>
<span class="line"><span style="color:#24292E;">    p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello.txt&quot;</span></span>
<span class="line"><span style="color:#24292E;">    p.write_text(</span><span style="color:#005CC5;">CONTENT</span><span style="color:#24292E;">, </span><span style="color:#E36209;">encoding</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> p.read_text(</span><span style="color:#E36209;">encoding</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CONTENT</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(tmp_path.iterdir())) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span></code></pre></div><p>Running this would result in a passed test except for the last <code>assert 0</code> line which we use to look at values:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_tmp_path.py</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_tmp_path.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">F</span><span style="color:#E1E4E8;">                                                   [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">_____________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_create_file</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_____________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">tmp_path</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PosixPath</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&#39;PYTEST_TMPDIR/test_create_file0&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_create_file</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tmp_path</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tmp_path</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;sub&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">d.mkdir</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        p = d / &quot;hello.txt&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        p.write_text(</span><span style="color:#B392F0;">CONTENT</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">p.read_text</span><span style="color:#E1E4E8;">() </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CONTENT</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">len</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">list(tmp_path.iterdir(</span><span style="color:#E1E4E8;">))) == 1</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">       assert 0</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_tmp_path.py:11:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AssertionError</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_tmp_path.py::test_create_file</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">============================ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_tmp_path.py</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_tmp_path.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">F</span><span style="color:#24292E;">                                                   [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">_____________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_create_file</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_____________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">tmp_path</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PosixPath</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&#39;PYTEST_TMPDIR/test_create_file0&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_create_file</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tmp_path</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tmp_path</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sub&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">d.mkdir</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        p = d / &quot;hello.txt&quot;</span></span>
<span class="line"><span style="color:#24292E;">        p.write_text(</span><span style="color:#6F42C1;">CONTENT</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">p.read_text</span><span style="color:#24292E;">() </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CONTENT</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">len</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">list(tmp_path.iterdir(</span><span style="color:#24292E;">))) == 1</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">       assert 0</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_tmp_path.py:11:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AssertionError</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_tmp_path.py::test_create_file</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">============================ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span></code></pre></div><h2 id="the-tmp-path-factory-fixture" tabindex="-1">The <code>tmp_path_factory</code> fixture <a class="header-anchor" href="#the-tmp-path-factory-fixture" aria-label="Permalink to &quot;The \`tmp_path_factory\` fixture {#the-tmp-path-factory-fixture}&quot;">​</a></h2><p>The <code>tmp_path_factory</code> is a session-scoped fixture which can be used to create arbitrary temporary directories from any other fixture or test.</p><p>For example, suppose your test suite needs a large image on disk, which is generated procedurally. Instead of computing the same image for each test that uses it into its own <code>tmp_path</code>, you can generate it once per-session to save time:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># contents of conftest.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;session&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">image_file</span><span style="color:#E1E4E8;">(tmp_path_factory):</span></span>
<span class="line"><span style="color:#E1E4E8;">    img </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compute_expensive_image()</span></span>
<span class="line"><span style="color:#E1E4E8;">    fn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp_path_factory.mktemp(</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;img.png&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    img.save(fn)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fn</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># contents of test_image.py</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_histogram</span><span style="color:#E1E4E8;">(image_file):</span></span>
<span class="line"><span style="color:#E1E4E8;">    img </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> load_image(image_file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># compute and test histogram</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># contents of conftest.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;session&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">image_file</span><span style="color:#24292E;">(tmp_path_factory):</span></span>
<span class="line"><span style="color:#24292E;">    img </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> compute_expensive_image()</span></span>
<span class="line"><span style="color:#24292E;">    fn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp_path_factory.mktemp(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;img.png&quot;</span></span>
<span class="line"><span style="color:#24292E;">    img.save(fn)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fn</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># contents of test_image.py</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_histogram</span><span style="color:#24292E;">(image_file):</span></span>
<span class="line"><span style="color:#24292E;">    img </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> load_image(image_file)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># compute and test histogram</span></span></code></pre></div><p>See <code>tmp_path_factory</code> API for details.</p><h2 id="the-tmpdir-and-tmpdir-factory-fixtures" tabindex="-1">The <code>tmpdir</code> and <code>tmpdir_factory</code> fixtures <a class="header-anchor" href="#the-tmpdir-and-tmpdir-factory-fixtures" aria-label="Permalink to &quot;The \`tmpdir\` and \`tmpdir_factory\` fixtures {#the-tmpdir-and-tmpdir-factory-fixtures}&quot;">​</a></h2><p>The <code>tmpdir</code> and <code>tmpdir_factory</code> fixtures are similar to <code>tmp_path</code> and <code>tmp_path_factory</code>, but use/return legacy py.path.local objects rather than standard <code>pathlib.Path</code> objects.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>These days, it is preferred to use <code>tmp_path</code> and <code>tmp_path_factory</code>.</p><p>In order to help modernize old code bases, one can run pytest with the legacypath plugin disabled:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no:legacypath</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no:legacypath</span></span></code></pre></div><p>This will trigger errors on tests using the legacy paths. It can also be permanently set as part of the <code>addopts</code> parameter in the config file.</p></div><p>See <code>tmpdir</code> <code>tmpdir_factory</code> API for details.</p><h2 id="the-default-base-temporary-directory" tabindex="-1">The default base temporary directory <a class="header-anchor" href="#the-default-base-temporary-directory" aria-label="Permalink to &quot;The default base temporary directory {#the-default-base-temporary-directory}&quot;">​</a></h2><p>Temporary directories are by default created as sub-directories of the system temporary directory. The base name will be <code>pytest-NUM</code> where <code>NUM</code> will be incremented with each test run. By default, entries older than 3 temporary directories will be removed. This behavior can be configured with <code>tmp_path_retention_count</code> and <code>tmp_path_retention_policy</code>.</p><p>Using the <code>--basetemp</code> option will remove the directory before every run, effectively meaning the temporary directories of only the most recent run will be kept.</p><p>You can override the default temporary directory setting like this:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--basetemp=mydir</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--basetemp=mydir</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Warning</p><p>The contents of <code>mydir</code> will be completely removed, so make sure to use a directory for that purpose only.</p></div><p>When distributing tests on the local machine using <code>pytest-xdist</code>, care is taken to automatically configure a basetemp directory for the sub processes such that all temporary data lands below a single per-test run basetemp directory.</p>`,23),e=[o];function t(c,r,y,E,i,d){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{_ as __pageData,h as default};
