import{_ as s,o as a,c as e,X as n}from"./chunks/framework.b5656a4e.js";const A=JSON.parse('{"title":"Blueprints and Views","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/tutorial/blueprint_view.md","filePath":"python/flask/user_guide/tutorial/blueprint_view.md","lastUpdated":1691303202000}'),l={name:"python/flask/user_guide/tutorial/blueprint_view.md"},o=n(`<h1 id="blueprints-and-views" tabindex="-1">Blueprints and Views <a class="header-anchor" href="#blueprints-and-views" aria-label="Permalink to &quot;Blueprints and Views&quot;">​</a></h1><p>A view function is the code you write to respond to requests to your application. Flask uses patterns to match the incoming request URL to the view that should handle it. The view returns data that Flask turns into an outgoing response. Flask can also go the other direction and generate a URL to a view based on its name and arguments.</p><h2 id="create-a-blueprint" tabindex="-1">Create a Blueprint <a class="header-anchor" href="#create-a-blueprint" aria-label="Permalink to &quot;Create a Blueprint&quot;">​</a></h2><p>A <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Blueprint" target="_blank" rel="noreferrer">Blueprint</a> is a way to organize a group of related views and other code. Rather than registering views and other code directly with an application, they are registered with a blueprint. Then the blueprint is registered with the application when it is available in the factory function.</p><p>Flaskr will have two blueprints, one for authentication functions and one for the blog posts functions. The code for each blueprint will go in a separate module. Since the blog needs to know about authentication, you’ll write the authentication one first.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/auth.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> functools</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> flask </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    Blueprint</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> flash</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> redirect</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> render_template</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> session</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> url_for</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> werkzeug</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">security </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> check_password_hash</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> generate_password_hash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> flaskr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">db </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> get_db</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">bp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Blueprint</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">auth</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;">__name__</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">url_prefix</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/auth</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>This creates a <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Blueprint" target="_blank" rel="noreferrer">Blueprint</a> named <code>&#39;auth&#39;</code>. Like the application object, the blueprint needs to know where it’s defined, so <code>__name__</code> is passed as the second argument. The <code>url_prefix</code> will be prepended to all the URLs associated with the blueprint.</p><p>Import and register the blueprint from the factory using <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.register_blueprint" target="_blank" rel="noreferrer">app.register_blueprint()</a>. Place the new code at the end of the factory function before returning the app.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/__init__.py</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create_app</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># existing code omitted</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> auth</span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">register_blueprint</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">auth</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">bp</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> app</span></span></code></pre></div><p>The authentication blueprint will have views to register new users and to log in and log out.</p><h2 id="the-first-view-register" tabindex="-1">The First View: Register <a class="header-anchor" href="#the-first-view-register" aria-label="Permalink to &quot;The First View: Register&quot;">​</a></h2><p>When the user visits the <code>/auth/register</code> URL, the <code>register</code> view will return <a href="https://developer.mozilla.org/docs/Web/HTML" target="_blank" rel="noreferrer">HTML</a> with a form for them to fill out. When they submit the form, it will validate their input and either show the form again with an error message or create the new user and go to the login page.</p><p>For now you will just write the view code. On the next page, you’ll write templates to generate the HTML form.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/auth.py</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/register</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">methods</span><span style="color:#89DDFF;">=(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">register</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> request</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">method</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        username </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> request</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">username</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        password </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> request</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        db </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_db</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        error </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> username</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            error </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Username is required.</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">elif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> password</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            error </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Password is required.</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> error </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">                    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">INSERT INTO user (username, password) VALUES (?, ?)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">                    </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">username</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> generate_password_hash</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">password</span><span style="color:#89DDFF;">)),</span></span>
<span class="line"><span style="color:#82AAFF;">                </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">commit</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">except</span><span style="color:#A6ACCD;"> db</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">IntegrityError</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                error </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;User </span><span style="color:#F78C6C;">{</span><span style="color:#A6ACCD;">username</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;"> is already registered.&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">redirect</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">url_for</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">auth.login</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">flash</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">error</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">render_template</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">auth/register.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Here’s what the <code>register</code> view function is doing:</p><ol><li><p><a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Blueprint.route" target="_blank" rel="noreferrer">@bp.route</a> associates the URL <code>/register</code> with the <code>register</code> view function. When Flask receives a request to <code>/auth/register</code>, it will call the <code>register</code> view and use the return value as the response.</p></li><li><p>If the user submitted the form, <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Request.method" target="_blank" rel="noreferrer">request.method</a> will be <code>&#39;POST&#39;</code>. In this case, start validating the input.</p></li><li><p><a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Request.form" target="_blank" rel="noreferrer">request.form</a> is a special type of <a href="https://docs.python.org/3/library/stdtypes.html#dict" target="_blank" rel="noreferrer">dict</a> mapping submitted form keys and values. The user will input their <code>username</code> and <code>password</code>.</p></li><li><p>Validate that <code>username</code> and <code>password</code> are not empty.</p></li><li><p>If validation succeeds, insert the new user data into the database.</p><ul><li><p><a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.execute" target="_blank" rel="noreferrer">db.execute</a> takes a SQL query with <code>?</code> placeholders for any user input, and a tuple of values to replace the placeholders with. The database library will take care of escaping the values so you are not vulnerable to a <code>SQL injection attack</code>.</p></li><li><p>For security, passwords should never be stored in the database directly. Instead, <a href="https://werkzeug.palletsprojects.com/en/2.3.x/utils/#werkzeug.security.generate_password_hash" target="_blank" rel="noreferrer">generate_password_hash()</a> is used to securely hash the password, and that hash is stored. Since this query modifies data, <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit" target="_blank" rel="noreferrer">db.commit()</a> needs to be called afterwards to save the changes.</p></li><li><p>An <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.IntegrityError" target="_blank" rel="noreferrer">sqlite3.IntegrityError</a> will occur if the username already exists, which should be shown to the user as another validation error.</p></li></ul></li><li><p>After storing the user, they are redirected to the login page. <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.url_for" target="_blank" rel="noreferrer">url_for()</a> generates the URL for the login view based on its name. This is preferable to writing the URL directly as it allows you to change the URL later without changing all code that links to it. <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.redirect" target="_blank" rel="noreferrer">redirect()</a> generates a redirect response to the generated URL.</p></li><li><p>If validation fails, the error is shown to the user. <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.flash" target="_blank" rel="noreferrer">flash()</a> stores messages that can be retrieved when rendering the template.</p></li><li><p>When the user initially navigates to <code>auth/register</code>, or there was a validation error, an HTML page with the registration form should be shown. <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.render_template" target="_blank" rel="noreferrer">render_template()</a> will render a template containing the HTML, which you’ll write in the next step of the tutorial.</p></li></ol><h2 id="login" tabindex="-1">Login <a class="header-anchor" href="#login" aria-label="Permalink to &quot;Login&quot;">​</a></h2><p>This view follows the same pattern as the <code>register</code> view above.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/auth.py</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">methods</span><span style="color:#89DDFF;">=(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">login</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> request</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">method</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        username </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> request</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">username</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        password </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> request</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        db </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_db</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        error </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">        user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">SELECT * FROM user WHERE username = ?</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">username</span><span style="color:#89DDFF;">,)</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">fetchone</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">            error </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Incorrect username.</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">elif</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">check_password_hash</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">user</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> password</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            error </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Incorrect password.</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> error </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">            session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            session</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> user</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">redirect</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">url_for</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">flash</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">error</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">render_template</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">auth/login.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>There are a few differences from the <code>register</code> view:</p><ol><li><p>The user is queried first and stored in a variable for later use. <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchone" target="_blank" rel="noreferrer">fetchone()</a> returns one row from the query. If the query returned no results, it returns <code>None</code>. Later, <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchall" target="_blank" rel="noreferrer">fetchall()</a> will be used, which returns a list of all results.</p></li><li><p><a href="https://werkzeug.palletsprojects.com/en/2.3.x/utils/#werkzeug.security.check_password_hash" target="_blank" rel="noreferrer">check_password_hash()</a> hashes the submitted password in the same way as the stored hash and securely compares them. If they match, the password is valid.</p></li><li><p><a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.session" target="_blank" rel="noreferrer">session</a> is a <code>dict</code> that stores data across requests. When validation succeeds, the user’s id is stored in a new session. The data is stored in a cookie that is sent to the browser, and the browser then sends it back with subsequent requests. Flask securely signs the data so that it can’t be tampered with.</p></li></ol><p>Now that the user’s <code>id</code> is stored in the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.session" target="_blank" rel="noreferrer">session</a>, it will be available on subsequent requests. At the beginning of each request, if a user is logged in their information should be loaded and made available to other views.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/auth.py</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">before_app_request</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load_logged_in_user</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    user_id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user_id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> user_id </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">        g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">user</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">user</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_db</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">execute</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">SELECT * FROM user WHERE id = ?</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">user_id</span><span style="color:#89DDFF;">,)</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">fetchone</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p><a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Blueprint.before_app_request" target="_blank" rel="noreferrer">bp.before_app_request()</a> registers a function that runs before the view function, no matter what URL is requested. <code>load_logged_in_user</code> checks if a user id is stored in the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.session" target="_blank" rel="noreferrer">session</a> and gets that user’s data from the database, storing it on <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.g" target="_blank" rel="noreferrer">g.user</a>, which lasts for the length of the request. If there is no user id, or if the id doesn’t exist, <code>g.user</code> will be <code>None</code>.</p><h2 id="logout" tabindex="-1">Logout <a class="header-anchor" href="#logout" aria-label="Permalink to &quot;Logout&quot;">​</a></h2><p>To log out, you need to remove the user id from the <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.session" target="_blank" rel="noreferrer">session</a>. Then <code>load_logged_in_user</code> won’t load a user on subsequent requests.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/auth.py</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">bp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/logout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">logout</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">redirect</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">url_for</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">))</span></span></code></pre></div><h2 id="require-authentication-in-other-views" tabindex="-1">Require Authentication in Other Views <a class="header-anchor" href="#require-authentication-in-other-views" aria-label="Permalink to &quot;Require Authentication in Other Views&quot;">​</a></h2><p>Creating, editing, and deleting blog posts will require a user to be logged in. A decorator can be used to check this for each view it’s applied to.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/auth.py</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">login_required</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">view</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">functools</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">wraps</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">view</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wrapped_view</span><span style="color:#89DDFF;">(**</span><span style="color:#A6ACCD;font-style:italic;">kwargs</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">user</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">redirect</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">url_for</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">auth.login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">view</span><span style="color:#89DDFF;">(**</span><span style="color:#82AAFF;">kwargs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> wrapped_view</span></span></code></pre></div><p>This decorator returns a new view function that wraps the original view it’s applied to. The new function checks if a user is loaded and redirects to the login page otherwise. If a user is loaded the original view is called and continues normally. You’ll use this decorator when writing the blog views.</p><h2 id="endpoints-and-urls" tabindex="-1">Endpoints and URLs <a class="header-anchor" href="#endpoints-and-urls" aria-label="Permalink to &quot;Endpoints and URLs&quot;">​</a></h2><p>The <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.url_for" target="_blank" rel="noreferrer">url_for()</a> function generates the URL to a view based on a name and arguments. The name associated with a view is also called the endpoint, and by default it’s the same as the name of the view function.</p><p>For example, the <code>hello()</code> view that was added to the app factory earlier in the tutorial has the name <code>&#39;hello&#39;</code> and can be linked to with <code>url_for(&#39;hello&#39;)</code>. If it took an argument, which you’ll see later, it would be linked to using <code>url_for(&#39;hello&#39;, who=&#39;World&#39;)</code>.</p><p>When using a blueprint, the name of the blueprint is prepended to the name of the function, so the endpoint for the <code>login</code> function you wrote above is <code>&#39;auth.login&#39;</code> because you added it to the <code>&#39;auth&#39;</code> blueprint.</p><p>Continue to <a href="https://flask.palletsprojects.com/en/2.3.x/tutorial/templates/" target="_blank" rel="noreferrer">Templates</a>.</p>`,36),p=[o];function t(r,c,i,D,F,y){return a(),e("div",null,p)}const d=s(l,[["render",t]]);export{A as __pageData,d as default};
