import{_ as s,o as a,c as n,V as e}from"./chunks/framework.48c56699.js";const F=JSON.parse('{"title":"How to use temporary directories and files in tests","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/temp.md","filePath":"python/pytest/how_to_guides/temp.md","lastUpdated":1692437254000}'),p={name:"python/pytest/how_to_guides/temp.md"},o=e(`<h1 id="how-to-use-temporary-directories-and-files-in-tests" tabindex="-1">How to use temporary directories and files in tests <a class="header-anchor" href="#how-to-use-temporary-directories-and-files-in-tests" aria-label="Permalink to &quot;How to use temporary directories and files in tests&quot;">​</a></h1><h2 id="the-tmp-path-fixture" tabindex="-1">The <code>tmp_path</code> fixture <a class="header-anchor" href="#the-tmp-path-fixture" aria-label="Permalink to &quot;The \`tmp_path\` fixture&quot;">​</a></h2><p>You can use the <code>tmp_path</code> fixture which will provide a temporary directory unique to the test invocation, created in the <a href="/python/pytest/how_to_guides/temp#the-default-base-temporary-directory">base temporary directory</a>.</p><p><code>tmp_path</code> is a <code>pathlib.Path</code> object. Here is an example test usage:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_tmp_path.py</span></span>
<span class="line"><span style="color:#A6ACCD;">CONTENT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">content</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_create_file</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">tmp_path</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tmp_path </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sub</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    d</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mkdir</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello.txt</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write_text</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">CONTENT</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read_text</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> CONTENT</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">list</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tmp_path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">iterdir</span><span style="color:#89DDFF;">()))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span></code></pre></div><p>Running this would result in a passed test except for the last <code>assert 0</code> line which we use to look at values:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_tmp_path.py</span></span>
<span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-7.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/home/sweet/project</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_tmp_path.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">F</span><span style="color:#A6ACCD;">                                                   [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">================================= </span><span style="color:#C3E88D;">FAILURES</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=================================</span></span>
<span class="line"><span style="color:#FFCB6B;">_____________________________</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_create_file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">_____________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">tmp_path</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">PosixPath</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">&#39;PYTEST_TMPDIR/test_create_file0&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_create_file</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">tmp_path</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tmp_path</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sub</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">d.mkdir</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        p = d / &quot;hello.txt&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        p.write_text</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">CONTENT</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">p.read_text</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CONTENT</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">len</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">list(tmp_path.iterdir(</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">)) == 1</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">       assert 0</span></span>
<span class="line"><span style="color:#FFCB6B;">E</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">test_tmp_path.py:11:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AssertionError</span></span>
<span class="line"><span style="color:#A6ACCD;">========================= </span><span style="color:#C3E88D;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==========================</span></span>
<span class="line"><span style="color:#FFCB6B;">FAILED</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_tmp_path.py::test_create_file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">============================ </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=============================</span></span></code></pre></div><h2 id="the-tmp-path-factory-fixture" tabindex="-1">The <code>tmp_path_factory</code> fixture <a class="header-anchor" href="#the-tmp-path-factory-fixture" aria-label="Permalink to &quot;The \`tmp_path_factory\` fixture&quot;">​</a></h2><p>The <code>tmp_path_factory</code> is a session-scoped fixture which can be used to create arbitrary temporary directories from any other fixture or test.</p><p>For example, suppose your test suite needs a large image on disk, which is generated procedurally. Instead of computing the same image for each test that uses it into its own <code>tmp_path</code>, you can generate it once per-session to save time:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># contents of conftest.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">scope</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">session</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">image_file</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">tmp_path_factory</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    img </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">compute_expensive_image</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> tmp_path_factory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mktemp</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">data</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">img.png</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    img</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">save</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> fn</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># contents of test_image.py</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_histogram</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">image_file</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    img </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load_image</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">image_file</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># compute and test histogram</span></span></code></pre></div><p>See <code>tmp_path_factory</code> API for details.</p><h2 id="the-tmpdir-and-tmpdir-factory-fixtures" tabindex="-1">The <code>tmpdir</code> and <code>tmpdir_factory</code> fixtures <a class="header-anchor" href="#the-tmpdir-and-tmpdir-factory-fixtures" aria-label="Permalink to &quot;The \`tmpdir\` and \`tmpdir_factory\` fixtures&quot;">​</a></h2><p>The <code>tmpdir</code> and <code>tmpdir_factory</code> fixtures are similar to <code>tmp_path</code> and <code>tmp_path_factory</code>, but use/return legacy py.path.local objects rather than standard <code>pathlib.Path</code> objects.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>These days, it is preferred to use <code>tmp_path</code> and <code>tmp_path_factory</code>.</p><p>In order to help modernize old code bases, one can run pytest with the legacypath plugin disabled:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">no:legacypath</span></span></code></pre></div><p>This will trigger errors on tests using the legacy paths. It can also be permanently set as part of the <code>addopts</code> parameter in the config file.</p></div><p>See <code>tmpdir</code> <code>tmpdir_factory</code> API for details.</p><h2 id="the-default-base-temporary-directory" tabindex="-1">The default base temporary directory <a class="header-anchor" href="#the-default-base-temporary-directory" aria-label="Permalink to &quot;The default base temporary directory&quot;">​</a></h2><p>Temporary directories are by default created as sub-directories of the system temporary directory. The base name will be <code>pytest-NUM</code> where <code>NUM</code> will be incremented with each test run. By default, entries older than 3 temporary directories will be removed. This behavior can be configured with <code>tmp_path_retention_count</code> and <code>tmp_path_retention_policy</code>.</p><p>Using the <code>--basetemp</code> option will remove the directory before every run, effectively meaning the temporary directories of only the most recent run will be kept.</p><p>You can override the default temporary directory setting like this:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--basetemp=mydir</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Warning</p><p>The contents of <code>mydir</code> will be completely removed, so make sure to use a directory for that purpose only.</p></div><p>When distributing tests on the local machine using <code>pytest-xdist</code>, care is taken to automatically configure a basetemp directory for the sub processes such that all temporary data lands below a single per-test run basetemp directory.</p>`,23),l=[o];function t(r,c,y,i,D,C){return a(),n("div",null,l)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
