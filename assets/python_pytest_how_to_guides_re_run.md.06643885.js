import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.01af844e.js";const C=JSON.parse('{"title":"How to re-run failed tests and maintain state between test runs","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/re_run.md","filePath":"python/pytest/how_to_guides/re_run.md","lastUpdated":1692720083000}'),p={name:"python/pytest/how_to_guides/re_run.md"},o=l(`<h1 id="how-to-re-run-failed-tests-and-maintain-state-between-test-runs" tabindex="-1">How to re-run failed tests and maintain state between test runs <a class="header-anchor" href="#how-to-re-run-failed-tests-and-maintain-state-between-test-runs" aria-label="Permalink to &quot;How to re-run failed tests and maintain state between test runs {#how-to-re-run-failed-tests-and-maintain-state-between-test-runs}&quot;">​</a></h1><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage {#usage}&quot;">​</a></h2><p>The plugin provides two command line options to rerun failures from the last <code>pytest</code> invocation:</p><ul><li><p><code>--lf</code>, <code>--last-failed</code> - to only re-run the failures.</p></li><li><p><code>--ff</code>, <code>--failed-first</code> - to run the failures first and then the rest of the tests.</p></li></ul><p>For cleanup (usually not needed), a <code>--cache-clear</code> option allows to remove all cross-session cache contents ahead of a test run.</p><p>Other plugins may access the config.cache object to set/get json encodable values between <code>pytest</code> invocations.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This plugin is enabled by default, but can be disabled if needed: see <a href="/python/pytest/how_to_guides/use_plugin#deactivating-unregistering-a-plugin-by-name">Deactivating / unregistering a plugin by name</a> (the internal name for this plugin is <code>cacheprovider</code>).</p></div><h2 id="rerunning-only-failures-or-failures-first" tabindex="-1">Rerunning only failures or failures first <a class="header-anchor" href="#rerunning-only-failures-or-failures-first" aria-label="Permalink to &quot;Rerunning only failures or failures first {#rerunning-only-failures-or-failures-first}&quot;">​</a></h2><p>First, let’s create 50 test invocation of which only 2 fail:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_50.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;i&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_num</span><span style="color:#E1E4E8;">(i):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        pytest.fail(</span><span style="color:#9ECBFF;">&quot;bad luck&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_50.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;i&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_num</span><span style="color:#24292E;">(i):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">17</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        pytest.fail(</span><span style="color:#032F62;">&quot;bad luck&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>If you run this for the first time you will see two failures:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span></span>
<span class="line"><span style="color:#79B8FF;">................</span><span style="color:#E1E4E8;">.F.</span><span style="color:#79B8FF;">.....</span><span style="color:#E1E4E8;">.F.</span><span style="color:#79B8FF;">.......................</span><span style="color:#E1E4E8;">                   [100%]</span></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">_______________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num[</span><span style="color:#79B8FF;">17</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize(</span><span style="color:#B392F0;">&quot;i&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">50</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> (17, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">           pytest.fail(</span><span style="color:#B392F0;">&quot;bad luck&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_50.py:7:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed</span></span>
<span class="line"><span style="color:#B392F0;">_______________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num[</span><span style="color:#79B8FF;">25</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize(</span><span style="color:#B392F0;">&quot;i&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">50</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> (17, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">           pytest.fail(</span><span style="color:#B392F0;">&quot;bad luck&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_50.py:7:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_50.py::test_num[</span><span style="color:#79B8FF;">17</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_50.py::test_num[</span><span style="color:#79B8FF;">25</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span></span>
<span class="line"><span style="color:#005CC5;">................</span><span style="color:#24292E;">.F.</span><span style="color:#005CC5;">.....</span><span style="color:#24292E;">.F.</span><span style="color:#005CC5;">.......................</span><span style="color:#24292E;">                   [100%]</span></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">_______________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num[</span><span style="color:#005CC5;">17</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize(</span><span style="color:#6F42C1;">&quot;i&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">range</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">50</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">i</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> (17, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">           pytest.fail(</span><span style="color:#6F42C1;">&quot;bad luck&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">           </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_50.py:7:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed</span></span>
<span class="line"><span style="color:#6F42C1;">_______________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num[</span><span style="color:#005CC5;">25</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize(</span><span style="color:#6F42C1;">&quot;i&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">range</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">50</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">i</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> (17, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">           pytest.fail(</span><span style="color:#6F42C1;">&quot;bad luck&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">           </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_50.py:7:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_50.py::test_num[</span><span style="color:#005CC5;">17</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_50.py::test_num[</span><span style="color:#005CC5;">25</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><p>If you then run it with <code>--lf</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--lf</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"><span style="color:#B392F0;">run-last-failure:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rerun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">previous</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failures</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_50.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FF</span><span style="color:#E1E4E8;">                                                        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">_______________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num[</span><span style="color:#79B8FF;">17</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize(</span><span style="color:#B392F0;">&quot;i&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">50</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> (17, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">           pytest.fail(</span><span style="color:#B392F0;">&quot;bad luck&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_50.py:7:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed</span></span>
<span class="line"><span style="color:#B392F0;">_______________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num[</span><span style="color:#79B8FF;">25</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize(</span><span style="color:#B392F0;">&quot;i&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">50</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> (17, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">           pytest.fail(</span><span style="color:#B392F0;">&quot;bad luck&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_50.py:7:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_50.py::test_num[</span><span style="color:#79B8FF;">17</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_50.py::test_num[</span><span style="color:#79B8FF;">25</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"><span style="color:#E1E4E8;">============================ </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--lf</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"><span style="color:#6F42C1;">run-last-failure:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rerun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">previous</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failures</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_50.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FF</span><span style="color:#24292E;">                                                        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">_______________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num[</span><span style="color:#005CC5;">17</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize(</span><span style="color:#6F42C1;">&quot;i&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">range</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">50</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">i</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> (17, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">           pytest.fail(</span><span style="color:#6F42C1;">&quot;bad luck&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">           </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_50.py:7:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed</span></span>
<span class="line"><span style="color:#6F42C1;">_______________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num[</span><span style="color:#005CC5;">25</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize(</span><span style="color:#6F42C1;">&quot;i&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">range</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">50</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">i</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> (17, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">           pytest.fail(</span><span style="color:#6F42C1;">&quot;bad luck&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">           </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_50.py:7:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_50.py::test_num[</span><span style="color:#005CC5;">17</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_50.py::test_num[</span><span style="color:#005CC5;">25</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"><span style="color:#24292E;">============================ </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span></code></pre></div><p>You have run only the two failing tests from the last run, while the 48 passing tests have not been run (“deselected”).</p><p>Now, if you run with the <code>--ff</code> option, all tests will be run but the first previous failures will be executed first (as can be seen from the series of <code>FF</code> and dots):</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--ff</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"><span style="color:#B392F0;">run-last-failure:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rerun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">previous</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failures</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">first</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_50.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">FF................................................</span><span style="color:#E1E4E8;">        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">_______________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num[</span><span style="color:#79B8FF;">17</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize(</span><span style="color:#B392F0;">&quot;i&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">50</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> (17, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">           pytest.fail(</span><span style="color:#B392F0;">&quot;bad luck&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_50.py:7:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed</span></span>
<span class="line"><span style="color:#B392F0;">_______________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num[</span><span style="color:#79B8FF;">25</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@pytest.mark.parametrize(</span><span style="color:#B392F0;">&quot;i&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">range</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">50</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_num</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> (17, </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">           pytest.fail(</span><span style="color:#B392F0;">&quot;bad luck&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_50.py:7:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_50.py::test_num[</span><span style="color:#79B8FF;">17</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_50.py::test_num[</span><span style="color:#79B8FF;">25</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bad</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">luck</span></span>
<span class="line"><span style="color:#E1E4E8;">======================= </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">48</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--ff</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"><span style="color:#6F42C1;">run-last-failure:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rerun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">previous</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failures</span><span style="color:#24292E;"> </span><span style="color:#032F62;">first</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_50.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">FF................................................</span><span style="color:#24292E;">        [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">_______________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num[</span><span style="color:#005CC5;">17</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize(</span><span style="color:#6F42C1;">&quot;i&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">range</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">50</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">i</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> (17, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">           pytest.fail(</span><span style="color:#6F42C1;">&quot;bad luck&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">           </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_50.py:7:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed</span></span>
<span class="line"><span style="color:#6F42C1;">_______________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num[</span><span style="color:#005CC5;">25</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">25</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">@pytest.mark.parametrize(</span><span style="color:#6F42C1;">&quot;i&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">range</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">50</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_num</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">i</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> (17, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">           pytest.fail(</span><span style="color:#6F42C1;">&quot;bad luck&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">           </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_50.py:7:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_50.py::test_num[</span><span style="color:#005CC5;">17</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_50.py::test_num[</span><span style="color:#005CC5;">25</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bad</span><span style="color:#24292E;"> </span><span style="color:#032F62;">luck</span></span>
<span class="line"><span style="color:#24292E;">======================= </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">48</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=======================</span></span></code></pre></div><p>New <code>--nf</code>, <code>--new-first</code> options: run new tests first followed by the rest of the tests, in both cases tests are also sorted by the file modified time, with more recent files coming first.</p><h2 id="behavior-when-no-tests-failed-in-the-last-run" tabindex="-1">Behavior when no tests failed in the last run <a class="header-anchor" href="#behavior-when-no-tests-failed-in-the-last-run" aria-label="Permalink to &quot;Behavior when no tests failed in the last run {#behavior-when-no-tests-failed-in-the-last-run}&quot;">​</a></h2><p>When no tests failed in the last run, or when no cached <code>lastfailed</code> data was found, pytest can be configured either to run all of the tests or no tests, using the <code>--last-failed-no-failures</code> option, which takes one of the following values:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--last-failed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--last-failed-no-failures</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">all</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># run all tests (default behavior)</span></span>
<span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--last-failed</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--last-failed-no-failures</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">none</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># run no tests and exit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--last-failed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--last-failed-no-failures</span><span style="color:#24292E;"> </span><span style="color:#032F62;">all</span><span style="color:#24292E;">    </span><span style="color:#6A737D;"># run all tests (default behavior)</span></span>
<span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--last-failed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--last-failed-no-failures</span><span style="color:#24292E;"> </span><span style="color:#032F62;">none</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># run no tests and exit</span></span></code></pre></div><h2 id="the-new-config-cache-object" tabindex="-1">The new config.cache object <a class="header-anchor" href="#the-new-config-cache-object" aria-label="Permalink to &quot;The new config.cache object {#the-new-config-cache-object}&quot;">​</a></h2><p>Plugins or <code>conftest.py</code> support code can get a cached value using the pytest <code>config</code> object. Here is a basic example plugin which implements a fixture which re-uses previously created state across pytest invocations:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_caching.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expensive_computation</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;running expensive computation...&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mydata</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.config.cache.get(</span><span style="color:#9ECBFF;">&quot;example/value&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> val </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        expensive_computation()</span></span>
<span class="line"><span style="color:#E1E4E8;">        val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span></span>
<span class="line"><span style="color:#E1E4E8;">        request.config.cache.set(</span><span style="color:#9ECBFF;">&quot;example/value&quot;</span><span style="color:#E1E4E8;">, val)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> val</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_function</span><span style="color:#E1E4E8;">(mydata):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> mydata </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_caching.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expensive_computation</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;running expensive computation...&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mydata</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.config.cache.get(</span><span style="color:#032F62;">&quot;example/value&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        expensive_computation()</span></span>
<span class="line"><span style="color:#24292E;">        val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span></span>
<span class="line"><span style="color:#24292E;">        request.config.cache.set(</span><span style="color:#032F62;">&quot;example/value&quot;</span><span style="color:#24292E;">, val)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> val</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_function</span><span style="color:#24292E;">(mydata):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> mydata </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span></span></code></pre></div><p>If you run this command for the first time, you can see the print statement:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span></span>
<span class="line"><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">______________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">mydata</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_function</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">mydata</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">       assert mydata == 23</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_caching.py:19:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AssertionError</span></span>
<span class="line"><span style="color:#B392F0;">--------------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stdout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setup</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">---------------------------</span></span>
<span class="line"><span style="color:#B392F0;">running</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">expensive</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">computation...</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_caching.py::test_function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span></span>
<span class="line"><span style="color:#6F42C1;">F</span><span style="color:#24292E;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">______________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">mydata</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_function</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">mydata</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">       assert mydata == 23</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_caching.py:19:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AssertionError</span></span>
<span class="line"><span style="color:#6F42C1;">--------------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stdout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setup</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">---------------------------</span></span>
<span class="line"><span style="color:#6F42C1;">running</span><span style="color:#24292E;"> </span><span style="color:#032F62;">expensive</span><span style="color:#24292E;"> </span><span style="color:#032F62;">computation...</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_caching.py::test_function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><p>If you run it a second time, the value will be retrieved from the cache and nothing will be printed:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span></span>
<span class="line"><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">______________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">mydata</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_function</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">mydata</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">       assert mydata == 23</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_caching.py:19:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AssertionError</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_caching.py::test_function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span></span>
<span class="line"><span style="color:#6F42C1;">F</span><span style="color:#24292E;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">______________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">mydata</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_function</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">mydata</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">       assert mydata == 23</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_caching.py:19:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AssertionError</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_caching.py::test_function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">42</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><p>See the <code>config.cache</code> fixture for more details.</p><h2 id="inspecting-cache-content" tabindex="-1">Inspecting Cache content <a class="header-anchor" href="#inspecting-cache-content" aria-label="Permalink to &quot;Inspecting Cache content {#inspecting-cache-content}&quot;">​</a></h2><p>You can always peek at the content of the cache using the <code>--cache-show</code> command line option:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cache-show</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project/.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">---------------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cache</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">values</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;*&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">---------------------------</span></span>
<span class="line"><span style="color:#B392F0;">cache/lastfailed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">contains:</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span><span style="color:#B392F0;">&#39;test_caching.py::test_function&#39;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">True}</span></span>
<span class="line"><span style="color:#B392F0;">cache/nodeids</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">contains:</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#9ECBFF;">&#39;test_caching.py::test_function&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#B392F0;">cache/stepwise</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">contains:</span></span>
<span class="line"><span style="color:#E1E4E8;">  []</span></span>
<span class="line"><span style="color:#B392F0;">example/value</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">contains:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">========================== </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ran</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cache-show</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project/.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">---------------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cache</span><span style="color:#24292E;"> </span><span style="color:#032F62;">values</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;*&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">---------------------------</span></span>
<span class="line"><span style="color:#6F42C1;">cache/lastfailed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">contains:</span></span>
<span class="line"><span style="color:#24292E;">  {</span><span style="color:#6F42C1;">&#39;test_caching.py::test_function&#39;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">True}</span></span>
<span class="line"><span style="color:#6F42C1;">cache/nodeids</span><span style="color:#24292E;"> </span><span style="color:#032F62;">contains:</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#032F62;">&#39;test_caching.py::test_function&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6F42C1;">cache/stepwise</span><span style="color:#24292E;"> </span><span style="color:#032F62;">contains:</span></span>
<span class="line"><span style="color:#24292E;">  []</span></span>
<span class="line"><span style="color:#6F42C1;">example/value</span><span style="color:#24292E;"> </span><span style="color:#032F62;">contains:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">========================== </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ran</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===========================</span></span></code></pre></div><p><code>--cache-show</code> takes an optional argument to specify a glob pattern for filtering:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cache-show</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">example/</span><span style="color:#79B8FF;">*</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project/.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">-----------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cache</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">values</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;example/*&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-----------------------</span></span>
<span class="line"><span style="color:#B392F0;">example/value</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">contains:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">========================== </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ran</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">===========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cache-show</span><span style="color:#24292E;"> </span><span style="color:#032F62;">example/</span><span style="color:#005CC5;">*</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project/.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">-----------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cache</span><span style="color:#24292E;"> </span><span style="color:#032F62;">values</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;example/*&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-----------------------</span></span>
<span class="line"><span style="color:#6F42C1;">example/value</span><span style="color:#24292E;"> </span><span style="color:#032F62;">contains:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">42</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">========================== </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ran</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">===========================</span></span></code></pre></div><h2 id="clearing-cache-content" tabindex="-1">Clearing Cache content <a class="header-anchor" href="#clearing-cache-content" aria-label="Permalink to &quot;Clearing Cache content {#clearing-cache-content}&quot;">​</a></h2><p>You can instruct pytest to clear all cache files and values by adding the <code>--cache-clear</code> option like this:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--cache-clear</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cache-clear</span></span></code></pre></div><p>This is recommended for invocations from Continuous Integration servers where isolation and correctness is more important than speed.</p><h2 id="stepwise" tabindex="-1">Stepwise <a class="header-anchor" href="#stepwise" aria-label="Permalink to &quot;Stepwise {#stepwise}&quot;">​</a></h2><p>As an alternative to <code>--lf -x</code>, especially for cases where you expect a large part of the test suite will fail, <code>--sw</code>, <code>--stepwise</code> allows you to fix them one at a time. The test suite will run until the first failure and then stop. At the next invocation, tests will continue from the last failing test and then run until the next failing test. You may use the <code>--stepwise-skip</code> option to ignore one failing test and stop the test execution on the second failing test instead. This is useful if you get stuck on a failing test and just want to ignore it until later. Providing <code>--stepwise-skip</code> will also enable <code>--stepwise</code> implicitly.</p>`,40),e=[o];function t(c,r,y,E,F,i){return n(),a("div",null,e)}const B=s(p,[["render",t]]);export{C as __pageData,B as default};
