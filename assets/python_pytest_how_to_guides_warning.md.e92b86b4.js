import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.01af844e.js";const F=JSON.parse('{"title":"How to capture warnings","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/warning.md","filePath":"python/pytest/how_to_guides/warning.md","lastUpdated":1692720083000}'),l={name:"python/pytest/how_to_guides/warning.md"},o=p(`<h1 id="how-to-capture-warnings" tabindex="-1">How to capture warnings <a class="header-anchor" href="#how-to-capture-warnings" aria-label="Permalink to &quot;How to capture warnings {#how-to-capture-warnings}&quot;">â€‹</a></h1><p>Starting from version <code>3.1</code>, pytest now automatically catches warnings during test execution and displays them at the end of the session:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_show_warnings.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> warnings</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">api_v1</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    warnings.warn(</span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;api v1, should use functions from v2&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_one</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> api_v1() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_show_warnings.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> warnings</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">api_v1</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    warnings.warn(</span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;api v1, should use functions from v2&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_one</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> api_v1() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><p>Running pytest now produces this output:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_show_warnings.py</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_show_warnings.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">                                              [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">============================= </span><span style="color:#9ECBFF;">warnings</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span>
<span class="line"><span style="color:#B392F0;">test_show_warnings.py::test_one</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">/home/sweet/project/test_show_warnings.py:5:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">UserWarning:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">api</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">should</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">functions</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v2</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warnings.warn(UserWarning(</span><span style="color:#B392F0;">&quot;api v1, should use functions from v2&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Docs:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://docs.pytest.org/en/stable/how-to/capture-warnings.html</span></span>
<span class="line"><span style="color:#E1E4E8;">======================= </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">warning</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_show_warnings.py</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_show_warnings.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                                              [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">============================= </span><span style="color:#032F62;">warnings</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span>
<span class="line"><span style="color:#6F42C1;">test_show_warnings.py::test_one</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">/home/sweet/project/test_show_warnings.py:5:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">UserWarning:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">api</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">should</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">functions</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warnings.warn(UserWarning(</span><span style="color:#6F42C1;">&quot;api v1, should use functions from v2&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Docs:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://docs.pytest.org/en/stable/how-to/capture-warnings.html</span></span>
<span class="line"><span style="color:#24292E;">======================= </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">warning</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=======================</span></span></code></pre></div><h2 id="controlling-warnings" tabindex="-1">Controlling warnings <a class="header-anchor" href="#controlling-warnings" aria-label="Permalink to &quot;Controlling warnings {#controlling-warnings}&quot;">â€‹</a></h2><p>Similar to Pythonâ€™s <a href="https://docs.python.org/3/library/warnings.html#warning-filter" target="_blank" rel="noreferrer">warning filter</a> and <a href="https://docs.python.org/3/using/cmdline.html#cmdoption-W" target="_blank" rel="noreferrer">-W option</a> flag, pytest provides its own <code>-W</code> flag to control which warnings are ignored, displayed, or turned into errors. See the <a href="https://docs.python.org/3/library/warnings.html#warning-filter" target="_blank" rel="noreferrer">warning filter</a> documentation for more advanced use-cases.</p><p>This code sample shows how to treat any <code>UserWarning</code> category class of warning as an error:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_show_warnings.py</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-W</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">error::UserWarning</span></span>
<span class="line"><span style="color:#B392F0;">F</span><span style="color:#E1E4E8;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">_________________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_one</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">_________________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_one</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">       assert </span><span style="color:#B392F0;">api_v1</span><span style="color:#E1E4E8;">() == 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">test_show_warnings.py:10:</span></span>
<span class="line"><span style="color:#E1E4E8;">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    def api_v1():</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">       warnings.warn(</span><span style="color:#B392F0;">UserWarning(</span><span style="color:#B392F0;">&quot;api v1, should use functions from v2&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">UserWarning:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">api</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">should</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">functions</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_show_warnings.py:5:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">UserWarning</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_show_warnings.py::test_one</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">UserWarning:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">api</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">v1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">should</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_show_warnings.py</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-W</span><span style="color:#24292E;"> </span><span style="color:#032F62;">error::UserWarning</span></span>
<span class="line"><span style="color:#6F42C1;">F</span><span style="color:#24292E;">                                                                    [100%]</span></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">_________________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">_________________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_one</span><span style="color:#24292E;">()</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">       assert </span><span style="color:#6F42C1;">api_v1</span><span style="color:#24292E;">() == 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">test_show_warnings.py:10:</span></span>
<span class="line"><span style="color:#24292E;">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    def api_v1():</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">       warnings.warn(</span><span style="color:#6F42C1;">UserWarning(</span><span style="color:#6F42C1;">&quot;api v1, should use functions from v2&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">UserWarning:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">api</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">should</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">functions</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_show_warnings.py:5:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">UserWarning</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_show_warnings.py::test_one</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">UserWarning:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">api</span><span style="color:#24292E;"> </span><span style="color:#032F62;">v1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">should</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><p>The same option can be set in the <code>pytest.ini</code> or <code>pyproject.toml</code> file using the <code>filterwarnings</code> ini option. For example, the configuration below will ignore all user warnings and specific deprecation warnings matching a regex, but will transform all other warnings into errors.</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">filterwarnings</span><span style="color:#E1E4E8;"> =</span></span>
<span class="line"><span style="color:#E1E4E8;">    error</span></span>
<span class="line"><span style="color:#E1E4E8;">    ignore::UserWarning</span></span>
<span class="line"><span style="color:#E1E4E8;">    ignore:function ham\\(\\) is deprecated:DeprecationWarning</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">filterwarnings</span><span style="color:#24292E;"> =</span></span>
<span class="line"><span style="color:#24292E;">    error</span></span>
<span class="line"><span style="color:#24292E;">    ignore::UserWarning</span></span>
<span class="line"><span style="color:#24292E;">    ignore:function ham\\(\\) is deprecated:DeprecationWarning</span></span></code></pre></div><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># pyproject.toml</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ini_options</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">filterwarnings = [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;ignore::UserWarning&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># note the use of single quote below to denote &quot;raw&quot; strings in TOML</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;ignore:function ham\\(\\) is deprecated:DeprecationWarning&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># pyproject.toml</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ini_options</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">filterwarnings = [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;ignore::UserWarning&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># note the use of single quote below to denote &quot;raw&quot; strings in TOML</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;ignore:function ham\\(\\) is deprecated:DeprecationWarning&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>When a warning matches more than one option in the list, the action for the last matching option is performed.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The <code>-W</code> flag and the <code>filterwarnings</code> ini option use warning filters that are similar in structure, but each configuration option interprets its filter differently. For example, message in <code>filterwarnings</code> is a string containing a regular expression that the start of the warning message must match, case-insensitively, while message in <code>-W</code> is a literal string that the start of the warning message must contain (case-insensitively), ignoring any whitespace at the start or end of message. Consult the <a href="https://docs.python.org/3/library/warnings.html#warning-filter" target="_blank" rel="noreferrer">warning filter</a> documentation for more details.</p></div><h2 id="pytest-mark-filterwarnings" tabindex="-1"><code>@pytest.mark.filterwarnings</code> <a class="header-anchor" href="#pytest-mark-filterwarnings" aria-label="Permalink to &quot;\`@pytest.mark.filterwarnings\` {#pytest-mark-filterwarnings}&quot;">â€‹</a></h2><p>You can use the <code>@pytest.mark.filterwarnings</code> to add warning filters to specific test items, allowing you to have finer control of which warnings should be captured at test, class or even module level:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> warnings</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">api_v1</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    warnings.warn(</span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;api v1, should use functions from v2&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.filterwarnings</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ignore:api v1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_one</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> api_v1() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> warnings</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">api_v1</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    warnings.warn(</span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;api v1, should use functions from v2&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.filterwarnings</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ignore:api v1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_one</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> api_v1() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><p>Filters applied using a mark take precedence over filters passed on the command line or configured by the <code>filterwarnings</code> ini option.</p><p>You may apply a filter to all tests of a class by using the <code>filterwarnings</code> mark as a class decorator or to all tests in a module by setting the <code>pytestmark</code> variable:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># turns all warnings into errors for this module</span></span>
<span class="line"><span style="color:#E1E4E8;">pytestmark </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pytest.mark.filterwarnings(</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># turns all warnings into errors for this module</span></span>
<span class="line"><span style="color:#24292E;">pytestmark </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pytest.mark.filterwarnings(</span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p><em>Credits go to Florian Schulze for the reference implementation in the <a href="https://github.com/fschulze/pytest-warnings" target="_blank" rel="noreferrer">pytest-warnings</a> plugin.</em></p><h2 id="disabling-warnings-summary" tabindex="-1">Disabling warnings summary <a class="header-anchor" href="#disabling-warnings-summary" aria-label="Permalink to &quot;Disabling warnings summary {#disabling-warnings-summary}&quot;">â€‹</a></h2><p>Although not recommended, you can use the <code>--disable-warnings</code> command-line option to suppress the warning summary entirely from the test run output.</p><h2 id="disabling-warning-capture-entirely" tabindex="-1">Disabling warning capture entirely <a class="header-anchor" href="#disabling-warning-capture-entirely" aria-label="Permalink to &quot;Disabling warning capture entirely {#disabling-warning-capture-entirely}&quot;">â€‹</a></h2><p>This plugin is enabled by default but can be disabled entirely in your <code>pytest.ini</code> file with:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">addopts</span><span style="color:#E1E4E8;"> = -p no:warnings</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">addopts</span><span style="color:#24292E;"> = -p no:warnings</span></span></code></pre></div><p>Or passing <code>-p no:warnings</code> in the command-line. This might be useful if your test suites handles warnings using an external system.</p><h2 id="deprecationwarning-and-pendingdeprecationwarning" tabindex="-1">DeprecationWarning and PendingDeprecationWarning <a class="header-anchor" href="#deprecationwarning-and-pendingdeprecationwarning" aria-label="Permalink to &quot;DeprecationWarning and PendingDeprecationWarning {#deprecationwarning-and-pendingdeprecationwarning}&quot;">â€‹</a></h2><p>By default pytest will display <code>DeprecationWarning</code> and <code>PendingDeprecationWarning</code> warnings from user code and third-party libraries, as recommended by <a href="https://peps.python.org/pep-0565/" target="_blank" rel="noreferrer">PEP 565</a>. This helps users keep their code modern and avoid breakages when deprecated warnings are effectively removed.</p><p>However, in the specific case where users capture any type of warnings in their test, either with <code>pytest.warns()</code>, <code>pytest.deprecated_call()</code> or using the <code>recwarn</code> fixture, no warning will be displayed at all.</p><p>Sometimes it is useful to hide some specific deprecation warnings that happen in code that you have no control over (such as third-party libraries), in which case you might use the warning filters options (ini or marks) to ignore those warnings.</p><p>For example:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">filterwarnings</span><span style="color:#E1E4E8;"> =</span></span>
<span class="line"><span style="color:#E1E4E8;">    ignore:.*U.*mode is deprecated:DeprecationWarning</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">filterwarnings</span><span style="color:#24292E;"> =</span></span>
<span class="line"><span style="color:#24292E;">    ignore:.*U.*mode is deprecated:DeprecationWarning</span></span></code></pre></div><p>This will ignore all warnings of type <code>DeprecationWarning</code> where the start of the message matches the regular expression <code>&quot;.*U.*mode is deprecated&quot;</code>.</p><p>See <code>@pytest.mark.filterwarnings</code> and <a href="/python/pytest/how_to_guides/warning#controlling-warnings">Controlling warnings</a> for more examples.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>If warnings are configured at the interpreter level, using the <code>PYTHONWARNINGS</code> environment variable or the <code>-W</code> command-line option, pytest will not configure any filters by default.</p><p>Also pytest doesnâ€™t follow <a href="https://peps.python.org/pep-0506/" target="_blank" rel="noreferrer">PEP 506</a> suggestion of resetting all warning filters because it might break test suites that configure warning filters themselves by calling <code>warnings.simplefilter()</code> (see <a href="https://github.com/pytest-dev/pytest/issues/2430" target="_blank" rel="noreferrer">issue #2430</a> for an example of that).</p></div><h2 id="ensuring-code-triggers-a-deprecation-warning" tabindex="-1">Ensuring code triggers a deprecation warning <a class="header-anchor" href="#ensuring-code-triggers-a-deprecation-warning" aria-label="Permalink to &quot;Ensuring code triggers a deprecation warning {#ensuring-code-triggers-a-deprecation-warning}&quot;">â€‹</a></h2><p>You can also use <code>pytest.deprecated_call()</code> for checking that a certain function call triggers a <code>DeprecationWarning</code> or <code>PendingDeprecationWarning</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_myfunction_deprecated</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> pytest.deprecated_call():</span></span>
<span class="line"><span style="color:#E1E4E8;">        myfunction(</span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_myfunction_deprecated</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> pytest.deprecated_call():</span></span>
<span class="line"><span style="color:#24292E;">        myfunction(</span><span style="color:#005CC5;">17</span><span style="color:#24292E;">)</span></span></code></pre></div><p>This test will fail if <code>myfunction</code> does not issue a deprecation warning when called with a <code>17</code> argument.</p><h2 id="asserting-warnings-with-the-warns-function" tabindex="-1">Asserting warnings with the warns function <a class="header-anchor" href="#asserting-warnings-with-the-warns-function" aria-label="Permalink to &quot;Asserting warnings with the warns function {#asserting-warnings-with-the-warns-function}&quot;">â€‹</a></h2><p>You can check that code raises a particular warning using <code>pytest.warns()</code>, which works in a similar manner to <code>raises</code> (except that <code>raises</code> does not capture all exceptions, only the <code>expected_exception</code>):</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> warnings</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_warning</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> pytest.warns(</span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        warnings.warn(</span><span style="color:#9ECBFF;">&quot;my warning&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> warnings</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_warning</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> pytest.warns(</span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        warnings.warn(</span><span style="color:#032F62;">&quot;my warning&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">)</span></span></code></pre></div><p>The test will fail if the warning in question is not raised. Use the keyword argument <code>match</code> to assert that the warning matches a text or regex. To match a literal string that may contain regular expression metacharacters like <code>(</code> or <code>.</code>, the pattern can first be escaped with <code>re.escape</code>.</p><p>Some examples:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">warns</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">UserWarning,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">match=&quot;must be 0 or None&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warnings.warn(</span><span style="color:#B392F0;">&quot;value must be 0 or None&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">UserWarning</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">warns</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">UserWarning,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">match=r&quot;must be \\d+$&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warnings.warn(</span><span style="color:#B392F0;">&quot;value must be 42&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">UserWarning</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">warns</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">UserWarning,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">match=r&quot;must be \\d+$&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warnings.warn(</span><span style="color:#B392F0;">&quot;this is not here&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">UserWarning</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Traceback</span><span style="color:#E1E4E8;"> (most </span><span style="color:#9ECBFF;">recent</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">last</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">DID</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NOT</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">WARN.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">No</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">warnings</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...UserWarning...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">were</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">emitted...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">warns</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">UserWarning,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">match=re.escape</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&quot;issue with foo() func&quot;</span><span style="color:#E1E4E8;">))</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warnings.warn(</span><span style="color:#B392F0;">&quot;issue with foo() func&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">warns</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">UserWarning,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">match=&quot;must be 0 or None&quot;</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warnings.warn(</span><span style="color:#6F42C1;">&quot;value must be 0 or None&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">UserWarning</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">warns</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">UserWarning,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">match=r&quot;must be \\d+$&quot;</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warnings.warn(</span><span style="color:#6F42C1;">&quot;value must be 42&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">UserWarning</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">warns</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">UserWarning,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">match=r&quot;must be \\d+$&quot;</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warnings.warn(</span><span style="color:#6F42C1;">&quot;this is not here&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">UserWarning</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Traceback</span><span style="color:#24292E;"> (most </span><span style="color:#032F62;">recent</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> </span><span style="color:#032F62;">last</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">DID</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NOT</span><span style="color:#24292E;"> </span><span style="color:#032F62;">WARN.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">No</span><span style="color:#24292E;"> </span><span style="color:#032F62;">warnings</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...UserWarning...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">were</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emitted...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">warns</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">UserWarning,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">match=re.escape</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&quot;issue with foo() func&quot;</span><span style="color:#24292E;">))</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warnings.warn(</span><span style="color:#6F42C1;">&quot;issue with foo() func&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>You can also call <code>pytest.warns()</code> on a function or code string:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest.warns(expected_warning, func, </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">args, </span><span style="color:#F97583;">**</span><span style="color:#E1E4E8;">kwargs)</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest.warns(expected_warning, </span><span style="color:#9ECBFF;">&quot;func(*args, **kwargs)&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest.warns(expected_warning, func, </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#24292E;">pytest.warns(expected_warning, </span><span style="color:#032F62;">&quot;func(*args, **kwargs)&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>The function also returns a list of all raised warnings (as <code>warnings.WarningMessage</code> objects), which you can query for additional information:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> pytest.warns(</span><span style="color:#79B8FF;">RuntimeWarning</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> record:</span></span>
<span class="line"><span style="color:#E1E4E8;">    warnings.warn(</span><span style="color:#9ECBFF;">&quot;another warning&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">RuntimeWarning</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># check that only one warning was raised</span></span>
<span class="line"><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(record) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#6A737D;"># check that the message matches</span></span>
<span class="line"><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> record[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].message.args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;another warning&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> pytest.warns(</span><span style="color:#005CC5;">RuntimeWarning</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> record:</span></span>
<span class="line"><span style="color:#24292E;">    warnings.warn(</span><span style="color:#032F62;">&quot;another warning&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">RuntimeWarning</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># check that only one warning was raised</span></span>
<span class="line"><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(record) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6A737D;"># check that the message matches</span></span>
<span class="line"><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> record[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].message.args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;another warning&quot;</span></span></code></pre></div><p>Alternatively, you can examine raised warnings in detail using the <code>recwarn</code> fixture (see below).</p><p>The <code>recwarn</code> fixture automatically ensures to reset the warnings filter at the end of the test, so no global state is leaked.</p><h2 id="recording-warnings" tabindex="-1">Recording warnings <a class="header-anchor" href="#recording-warnings" aria-label="Permalink to &quot;Recording warnings {#recording-warnings}&quot;">â€‹</a></h2><p>You can record raised warnings either using <code>pytest.warns()</code> or with the <code>recwarn</code> fixture.</p><p>To record with <code>pytest.warns()</code> without asserting anything about the warnings, pass no arguments as the expected warning type and it will default to a generic Warning:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> pytest.warns() </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> record:</span></span>
<span class="line"><span style="color:#E1E4E8;">    warnings.warn(</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    warnings.warn(</span><span style="color:#9ECBFF;">&quot;runtime&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">RuntimeWarning</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(record) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(record[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].message) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;user&quot;</span></span>
<span class="line"><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(record[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].message) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;runtime&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> pytest.warns() </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> record:</span></span>
<span class="line"><span style="color:#24292E;">    warnings.warn(</span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    warnings.warn(</span><span style="color:#032F62;">&quot;runtime&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">RuntimeWarning</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(record) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(record[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].message) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span></span>
<span class="line"><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(record[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].message) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;runtime&quot;</span></span></code></pre></div><p>The <code>recwarn</code> fixture will record warnings for the whole function:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> warnings</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_hello</span><span style="color:#E1E4E8;">(recwarn):</span></span>
<span class="line"><span style="color:#E1E4E8;">    warnings.warn(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(recwarn) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    w </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> recwarn.pop(</span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">issubclass</span><span style="color:#E1E4E8;">(w.category, </span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(w.message) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> w.filename</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> w.lineno</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> warnings</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_hello</span><span style="color:#24292E;">(recwarn):</span></span>
<span class="line"><span style="color:#24292E;">    warnings.warn(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(recwarn) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    w </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> recwarn.pop(</span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">issubclass</span><span style="color:#24292E;">(w.category, </span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(w.message) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> w.filename</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> w.lineno</span></span></code></pre></div><p>Both <code>recwarn</code> and <code>pytest.warns()</code> return the same interface for recorded warnings: a <code>WarningsRecorder</code> instance. To view the recorded warnings, you can iterate over this instance, call <code>len</code> on it to get the number of recorded warnings, or index into it to get a particular recorded warning.</p><p>Full API: <code>WarningsRecorder</code>.</p><h2 id="additional-use-cases-of-warnings-in-tests" tabindex="-1">Additional use cases of warnings in tests <a class="header-anchor" href="#additional-use-cases-of-warnings-in-tests" aria-label="Permalink to &quot;Additional use cases of warnings in tests {#additional-use-cases-of-warnings-in-tests}&quot;">â€‹</a></h2><p>Here are some use cases involving warnings that often come up in tests, and suggestions on how to deal with them:</p><ul><li><p>To ensure that at least one of the indicated warnings is issued, use:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_warning</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> pytest.warns((</span><span style="color:#79B8FF;">RuntimeWarning</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">)):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_warning</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> pytest.warns((</span><span style="color:#005CC5;">RuntimeWarning</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">)):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">...</span></span></code></pre></div></li><li><p>To ensure that only certain warnings are issued, use:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_warning</span><span style="color:#E1E4E8;">(recwarn):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(recwarn) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    user_warning </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> recwarn.pop(</span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">issubclass</span><span style="color:#E1E4E8;">(user_warning.category, </span><span style="color:#79B8FF;">UserWarning</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_warning</span><span style="color:#24292E;">(recwarn):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(recwarn) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    user_warning </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> recwarn.pop(</span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">issubclass</span><span style="color:#24292E;">(user_warning.category, </span><span style="color:#005CC5;">UserWarning</span><span style="color:#24292E;">)</span></span></code></pre></div></li><li><p>To ensure that no warnings are emitted, use:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_warning</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> warnings.catch_warnings():</span></span>
<span class="line"><span style="color:#E1E4E8;">        warnings.simplefilter(</span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_warning</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> warnings.catch_warnings():</span></span>
<span class="line"><span style="color:#24292E;">        warnings.simplefilter(</span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">...</span></span></code></pre></div></li><li><p>To suppress warnings, use:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> warnings.catch_warnings():</span></span>
<span class="line"><span style="color:#E1E4E8;">    warnings.simplefilter(</span><span style="color:#9ECBFF;">&quot;ignore&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> warnings.catch_warnings():</span></span>
<span class="line"><span style="color:#24292E;">    warnings.simplefilter(</span><span style="color:#032F62;">&quot;ignore&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span></code></pre></div></li></ul><h2 id="custom-failure-messages" tabindex="-1">Custom failure messages <a class="header-anchor" href="#custom-failure-messages" aria-label="Permalink to &quot;Custom failure messages {#custom-failure-messages}&quot;">â€‹</a></h2><p>Recording warnings provides an opportunity to produce custom test failure messages for when no warnings are issued or other conditions are met.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> pytest.warns(</span><span style="color:#79B8FF;">Warning</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> record:</span></span>
<span class="line"><span style="color:#E1E4E8;">        f()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> record:</span></span>
<span class="line"><span style="color:#E1E4E8;">            pytest.fail(</span><span style="color:#9ECBFF;">&quot;Expected a warning!&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> pytest.warns(</span><span style="color:#005CC5;">Warning</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> record:</span></span>
<span class="line"><span style="color:#24292E;">        f()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> record:</span></span>
<span class="line"><span style="color:#24292E;">            pytest.fail(</span><span style="color:#032F62;">&quot;Expected a warning!&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>If no warnings are issued when calling f, then <code>not record</code> will evaluate to <code>True</code>. You can then call <code>pytest.fail()</code> with a custom error message.</p><h2 id="internal-pytest-warnings" tabindex="-1">Internal pytest warnings <a class="header-anchor" href="#internal-pytest-warnings" aria-label="Permalink to &quot;Internal pytest warnings {#internal-pytest-warnings}&quot;">â€‹</a></h2><p>pytest may generate its own warnings in some situations, such as improper usage or deprecated features.</p><p>For example, pytest will emit a warning if it encounters a class that matches <code>python_classes</code> but also defines an <code>__init__</code> constructor, as this prevents the class from being instantiated:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_pytest_warnings.py</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_foo</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_pytest_warnings.py</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_foo</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_pytest_warnings.py</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">============================= </span><span style="color:#9ECBFF;">warnings</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span>
<span class="line"><span style="color:#B392F0;">test_pytest_warnings.py:1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">/home/sweet/project/test_pytest_warnings.py:1:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PytestCollectionWarning:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cannot</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collect</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Test&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">because</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">has</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">__init__</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">constructor</span><span style="color:#E1E4E8;"> (from: </span><span style="color:#9ECBFF;">test_pytest_warnings.py</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Test:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Docs:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://docs.pytest.org/en/stable/how-to/capture-warnings.html</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">warning</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_pytest_warnings.py</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">============================= </span><span style="color:#032F62;">warnings</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span>
<span class="line"><span style="color:#6F42C1;">test_pytest_warnings.py:1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">/home/sweet/project/test_pytest_warnings.py:1:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PytestCollectionWarning:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cannot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collect</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Test&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">because</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">has</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">__init__</span><span style="color:#24292E;"> </span><span style="color:#032F62;">constructor</span><span style="color:#24292E;"> (from: </span><span style="color:#032F62;">test_pytest_warnings.py</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Test:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Docs:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://docs.pytest.org/en/stable/how-to/capture-warnings.html</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">warning</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><p>These warnings might be filtered using the same builtin mechanisms used to filter other types of warnings.</p><p>Please read our <a href="/python/pytest/further_topics/compatibility#backwards-compatibility-policy">Backwards Compatibility Policy</a> to learn how we proceed about deprecating and eventually removing features.</p><p>The full list of warnings is listed in <a href="/python/pytest/reference_guides/api_reference/warnings#warnings">the reference documentation</a>.</p><h2 id="resource-warnings" tabindex="-1">Resource Warnings <a class="header-anchor" href="#resource-warnings" aria-label="Permalink to &quot;Resource Warnings {#resource-warnings}&quot;">â€‹</a></h2><p>Additional information of the source of a <code>ResourceWarning</code> can be obtained when captured by pytest if <a href="https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc" target="_blank" rel="noreferrer">tracemalloc</a> module is enabled.</p><p>One convenient way to enable <a href="https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc" target="_blank" rel="noreferrer">tracemalloc</a> when running tests is to set the <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONTRACEMALLOC" target="_blank" rel="noreferrer">PYTHONTRACEMALLOC</a> to a large enough number of frames (say <code>20</code>, but that number is application dependent).</p><p>For more information, consult the <a href="https://docs.python.org/3/library/devmode.html" target="_blank" rel="noreferrer">Python Development Mode</a> section in the Python documentation.</p>`,79),e=[o];function t(r,c,i,y,E,d){return n(),a("div",null,e)}const h=s(l,[["render",t]]);export{F as __pageData,h as default};
