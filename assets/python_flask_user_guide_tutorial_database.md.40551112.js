import{_ as s,o as a,c as n,V as e}from"./chunks/framework.48c56699.js";const C=JSON.parse('{"title":"Define and Access the Database","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/tutorial/database.md","filePath":"python/flask/user_guide/tutorial/database.md"}'),l={name:"python/flask/user_guide/tutorial/database.md"},o=e(`<h1 id="define-and-access-the-database" tabindex="-1">Define and Access the Database <a class="header-anchor" href="#define-and-access-the-database" aria-label="Permalink to &quot;Define and Access the Database&quot;">​</a></h1><p>The application will use a <a href="https://sqlite.org/about.html" target="_blank" rel="noreferrer">SQLite</a> database to store users and posts. Python comes with built-in support for SQLite in the <a href="https://docs.python.org/3/library/sqlite3.html#module-sqlite3" target="_blank" rel="noreferrer">sqlite3</a> module.</p><p>SQLite is convenient because it doesn’t require setting up a separate database server and is built-in to Python. However, if concurrent requests try to write to the database at the same time, they will slow down as each write happens sequentially. Small applications won’t notice this. Once you become big, you may want to switch to a different database.</p><p>The tutorial doesn’t go into detail about SQL. If you are not familiar with it, the SQLite docs describe the <a href="https://sqlite.org/lang.html" target="_blank" rel="noreferrer">language</a>.</p><h2 id="connect-to-the-database" tabindex="-1">Connect to the Database <a class="header-anchor" href="#connect-to-the-database" aria-label="Permalink to &quot;Connect to the Database&quot;">​</a></h2><p>The first thing to do when working with a SQLite database (and most other Python database libraries) is to create a connection to it. Any queries and operations are performed using the connection, which is closed after the work is finished.</p><p>In web applications this connection is typically tied to the request. It is created at some point when handling a request, and closed before the response is sent.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/db.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> sqlite3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> click</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> flask </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> current_app</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> g</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_db</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">db</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">db</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sqlite3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">connect</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            current_app</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DATABASE</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#A6ACCD;font-style:italic;">detect_types</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">sqlite3</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">PARSE_DECLTYPES</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">db</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">row_factory</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> sqlite3</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">Row</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">db</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">close_db</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">=None):</span></span>
<span class="line"><span style="color:#A6ACCD;">    db </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> g</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">db</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">None)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> db </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">        db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p><code>g</code> is a special object that is unique for each request. It is used to store data that might be accessed by multiple functions during the request. The connection is stored and reused instead of creating a new connection if <code>get_db</code> is called a second time in the same request.</p><p><a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.current_app" target="_blank" rel="noreferrer">current_app</a> is another special object that points to the Flask application handling the request. Since you used an application factory, there is no application object when writing the rest of your code. <code>get_db</code> will be called when the application has been created and is handling a request, so <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.current_app" target="_blank" rel="noreferrer">current_app</a> can be used.</p><p><a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.connect" target="_blank" rel="noreferrer">sqlite3.connect()</a> establishes a connection to the file pointed at by the <code>DATABASE</code> configuration key. This file doesn’t have to exist yet, and won’t until you initialize the database later.</p><p><a href="https://docs.python.org/3/library/sqlite3.html#sqlite3.Row" target="_blank" rel="noreferrer">sqlite3.Row</a> tells the connection to return rows that behave like dicts. This allows accessing the columns by name.</p><p><code>close_db</code> checks if a connection was created by checking if <code>g.db</code> was set. If the connection exists, it is closed. Further down you will tell your application about the <code>close_db</code> function in the application factory so that it is called after each request.</p><h2 id="create-the-tables" tabindex="-1">Create the Tables <a class="header-anchor" href="#create-the-tables" aria-label="Permalink to &quot;Create the Tables&quot;">​</a></h2><p>In SQLite, data is stored in tables and columns. These need to be created before you can store and retrieve data. Flaskr will store users in the <code>user</code> table, and posts in the <code>post</code> table. Create a file with the SQL commands needed to create empty tables:</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">-- flaskr/schema.sql</span></span>
<span class="line"><span style="color:#F78C6C;">DROP</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">IF</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">EXISTS</span><span style="color:#A6ACCD;"> user;</span></span>
<span class="line"><span style="color:#F78C6C;">DROP</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">IF</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">EXISTS</span><span style="color:#A6ACCD;"> post;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">CREATE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">user</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  id </span><span style="color:#C792EA;">INTEGER</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">PRIMARY KEY</span><span style="color:#A6ACCD;"> AUTOINCREMENT,</span></span>
<span class="line"><span style="color:#A6ACCD;">  username </span><span style="color:#C792EA;">TEXT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">UNIQUE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NOT NULL</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">password</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">TEXT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NOT NULL</span></span>
<span class="line"><span style="color:#A6ACCD;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">CREATE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">TABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">post</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  id </span><span style="color:#C792EA;">INTEGER</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">PRIMARY KEY</span><span style="color:#A6ACCD;"> AUTOINCREMENT,</span></span>
<span class="line"><span style="color:#A6ACCD;">  author_id </span><span style="color:#C792EA;">INTEGER</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NOT NULL</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  created </span><span style="color:#C792EA;">TIMESTAMP</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NOT NULL</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DEFAULT</span><span style="color:#A6ACCD;"> CURRENT_TIMESTAMP,</span></span>
<span class="line"><span style="color:#A6ACCD;">  title </span><span style="color:#C792EA;">TEXT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NOT NULL</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  body </span><span style="color:#C792EA;">TEXT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">NOT NULL</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">FOREIGN KEY</span><span style="color:#A6ACCD;"> (author_id) </span><span style="color:#C792EA;">REFERENCES</span><span style="color:#A6ACCD;"> user (id)</span></span>
<span class="line"><span style="color:#A6ACCD;">);</span></span></code></pre></div><p>Add the Python functions that will run these SQL commands to the <code>db.py</code> file:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/db.py</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init_db</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    db </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_db</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> current_app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open_resource</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">schema.sql</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">executescript</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">decode</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">click</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">command</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">init-db</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init_db_command</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">Clear the existing data and create new tables.</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">init_db</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    click</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">echo</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Initialized the database.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p><a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.open_resource" target="_blank" rel="noreferrer">open_resource()</a> opens a file relative to the <code>flaskr</code> package, which is useful since you won’t necessarily know where that location is when deploying the application later. <code>get_db</code> returns a database connection, which is used to execute the commands read from the file.</p><p><a href="https://click.palletsprojects.com/en/8.1.x/api/#click.command" target="_blank" rel="noreferrer">click.command()</a> defines a command line command called <code>init-db</code> that calls the <code>init_db</code> function and shows a success message to the user. You can read <a href="https://flask.palletsprojects.com/en/2.3.x/cli/" target="_blank" rel="noreferrer">Command Line Interface</a> to learn more about writing commands.</p><h2 id="register-with-the-application" tabindex="-1">Register with the Application <a class="header-anchor" href="#register-with-the-application" aria-label="Permalink to &quot;Register with the Application&quot;">​</a></h2><p>The <code>close_db</code> and <code>init_db_command</code> functions need to be registered with the application instance; otherwise, they won’t be used by the application. However, since you’re using a factory function, that instance isn’t available when writing the functions. Instead, write a function that takes an application and does the registration.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/db.py</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init_app</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">teardown_appcontext</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">close_db</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cli</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_command</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">init_db_command</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p><a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.teardown_appcontext" target="_blank" rel="noreferrer">app.teardown_appcontext()</a> tells Flask to call that function when cleaning up after returning the response.</p><p><a href="https://click.palletsprojects.com/en/8.1.x/api/#click.Group.add_command" target="_blank" rel="noreferrer">app.cli.add_command()</a> adds a new command that can be called with the <code>flask</code> command.</p><p>Import and call this function from the factory. Place the new code at the end of the factory function before returning the app.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># flaskr/__init__.py</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create_app</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># existing code omitted</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> db</span></span>
<span class="line"><span style="color:#A6ACCD;">    db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init_app</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> app</span></span></code></pre></div><h2 id="initialize-the-database-file" tabindex="-1">Initialize the Database File <a class="header-anchor" href="#initialize-the-database-file" aria-label="Permalink to &quot;Initialize the Database File&quot;">​</a></h2><p>Now that <code>init-db</code> has been registered with the app, it can be called using the <code>flask</code> command, similar to the <code>run</code> command from the previous page.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>If you’re still running the server from the previous page, you can either stop the server, or run this command in a new terminal. If you use a new terminal, remember to change to your project directory and activate the env as described in <a href="https://flask.palletsprojects.com/en/2.3.x/installation/" target="_blank" rel="noreferrer">Installation</a>.</p></div><p>Run the <code>init-db</code> command:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">flask</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">flaskr</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init-db</span></span>
<span class="line"><span style="color:#FFCB6B;">Initialized</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">the</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">database.</span></span></code></pre></div><p>There will now be a <code>flaskr.sqlite</code> file in the <code>instance</code> folder in your project.</p><p>Continue to <a href="https://flask.palletsprojects.com/en/2.3.x/tutorial/views/" target="_blank" rel="noreferrer">Blueprints and Views</a>.</p>`,34),t=[o];function p(c,r,i,y,D,A){return a(),n("div",null,t)}const F=s(l,[["render",p]]);export{C as __pageData,F as default};
