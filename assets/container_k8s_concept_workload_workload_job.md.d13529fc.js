import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.01af844e.js";const E=JSON.parse('{"title":"Jobs","description":"","frontmatter":{},"headers":[],"relativePath":"container/k8s/concept/workload/workload/job.md","filePath":"container/k8s/concept/workload/workload/job.md","lastUpdated":1694607182000}'),o={name:"container/k8s/concept/workload/workload/job.md"},l=n(`<h1 id="jobs" tabindex="-1">Jobs <a class="header-anchor" href="#jobs" aria-label="Permalink to &quot;Jobs&quot;">​</a></h1><p>A Job creates one or more Pods and will continue to retry execution of the Pods until a specified number of them successfully terminate. As pods successfully complete, the Job tracks the successful completions. When a specified number of successful completions is reached, the task (ie, Job) is complete. Deleting a Job will clean up the Pods it created. Suspending a Job will delete its active Pods until the Job is resumed again.</p><p>A simple case is to create one Job object in order to reliably run one Pod to completion. The Job object will start a new Pod if the first Pod fails or is deleted (for example due to a node hardware failure or a node reboot).</p><p>You can also use a Job to run multiple Pods in parallel.</p><p>If you want to run a Job (either a single task, or several in parallel) on a schedule, see <a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/" target="_blank" rel="noreferrer">CronJob</a>.</p><h2 id="running-an-example-job" tabindex="-1">Running an example Job <a class="header-anchor" href="#running-an-example-job" aria-label="Permalink to &quot;Running an example Job&quot;">​</a></h2><p>Here is an example Job config. It computes π to 2000 places and prints it out. It takes around 10s to complete.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># controllers/job.yaml </span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pi</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pi</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">perl:5.34.0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;perl&quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#9ECBFF;">&quot;-Mbignum=bpi&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-wle&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;print bpi(2000)&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Never</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">backoffLimit</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># controllers/job.yaml </span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pi</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pi</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">perl:5.34.0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;perl&quot;</span><span style="color:#24292E;">,  </span><span style="color:#032F62;">&quot;-Mbignum=bpi&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-wle&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;print bpi(2000)&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Never</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">backoffLimit</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span></span></code></pre></div><p>You can run the example with this command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://kubernetes.io/examples/controllers/job.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://kubernetes.io/examples/controllers/job.yaml</span></span></code></pre></div><p>The output is similar to this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">job.batch/pi created</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">job.batch/pi created</span></span></code></pre></div><p>Check on the status of the Job with <code>kubectl</code>:</p><ul><li><p><code>kubectl describe job pi</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Name:           pi</span></span>
<span class="line"><span style="color:#e1e4e8;">Namespace:      default</span></span>
<span class="line"><span style="color:#e1e4e8;">Selector:       batch.kubernetes.io/controller-uid=c9948307-e56d-4b5d-8302-ae2d7b7da67c</span></span>
<span class="line"><span style="color:#e1e4e8;">Labels:         batch.kubernetes.io/controller-uid=c9948307-e56d-4b5d-8302-ae2d7b7da67c</span></span>
<span class="line"><span style="color:#e1e4e8;">                batch.kubernetes.io/job-name=pi</span></span>
<span class="line"><span style="color:#e1e4e8;">                ...</span></span>
<span class="line"><span style="color:#e1e4e8;">Annotations:    batch.kubernetes.io/job-tracking: &quot;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">Parallelism:    1</span></span>
<span class="line"><span style="color:#e1e4e8;">Completions:    1</span></span>
<span class="line"><span style="color:#e1e4e8;">Start Time:     Mon, 02 Dec 2019 15:20:11 +0200</span></span>
<span class="line"><span style="color:#e1e4e8;">Completed At:   Mon, 02 Dec 2019 15:21:16 +0200</span></span>
<span class="line"><span style="color:#e1e4e8;">Duration:       65s</span></span>
<span class="line"><span style="color:#e1e4e8;">Pods Statuses:  0 Running / 1 Succeeded / 0 Failed</span></span>
<span class="line"><span style="color:#e1e4e8;">Pod Template:</span></span>
<span class="line"><span style="color:#e1e4e8;">Labels:  batch.kubernetes.io/controller-uid=c9948307-e56d-4b5d-8302-ae2d7b7da67c</span></span>
<span class="line"><span style="color:#e1e4e8;">        batch.kubernetes.io/job-name=pi</span></span>
<span class="line"><span style="color:#e1e4e8;">Containers:</span></span>
<span class="line"><span style="color:#e1e4e8;">pi:</span></span>
<span class="line"><span style="color:#e1e4e8;">    Image:      perl:5.34.0</span></span>
<span class="line"><span style="color:#e1e4e8;">    Port:       &lt;none&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    Host Port:  &lt;none&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    Command:</span></span>
<span class="line"><span style="color:#e1e4e8;">    perl</span></span>
<span class="line"><span style="color:#e1e4e8;">    -Mbignum=bpi</span></span>
<span class="line"><span style="color:#e1e4e8;">    -wle</span></span>
<span class="line"><span style="color:#e1e4e8;">    print bpi(2000)</span></span>
<span class="line"><span style="color:#e1e4e8;">    Environment:  &lt;none&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">    Mounts:       &lt;none&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">Volumes:        &lt;none&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">Events:</span></span>
<span class="line"><span style="color:#e1e4e8;">Type    Reason            Age   From            Message</span></span>
<span class="line"><span style="color:#e1e4e8;">----    ------            ----  ----            -------</span></span>
<span class="line"><span style="color:#e1e4e8;">Normal  SuccessfulCreate  21s   job-controller  Created pod: pi-xf9p4</span></span>
<span class="line"><span style="color:#e1e4e8;">Normal  Completed         18s   job-controller  Job completed</span></span>
<span class="line"><span style="color:#e1e4e8;">\`\`\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Name:           pi</span></span>
<span class="line"><span style="color:#24292e;">Namespace:      default</span></span>
<span class="line"><span style="color:#24292e;">Selector:       batch.kubernetes.io/controller-uid=c9948307-e56d-4b5d-8302-ae2d7b7da67c</span></span>
<span class="line"><span style="color:#24292e;">Labels:         batch.kubernetes.io/controller-uid=c9948307-e56d-4b5d-8302-ae2d7b7da67c</span></span>
<span class="line"><span style="color:#24292e;">                batch.kubernetes.io/job-name=pi</span></span>
<span class="line"><span style="color:#24292e;">                ...</span></span>
<span class="line"><span style="color:#24292e;">Annotations:    batch.kubernetes.io/job-tracking: &quot;&quot;</span></span>
<span class="line"><span style="color:#24292e;">Parallelism:    1</span></span>
<span class="line"><span style="color:#24292e;">Completions:    1</span></span>
<span class="line"><span style="color:#24292e;">Start Time:     Mon, 02 Dec 2019 15:20:11 +0200</span></span>
<span class="line"><span style="color:#24292e;">Completed At:   Mon, 02 Dec 2019 15:21:16 +0200</span></span>
<span class="line"><span style="color:#24292e;">Duration:       65s</span></span>
<span class="line"><span style="color:#24292e;">Pods Statuses:  0 Running / 1 Succeeded / 0 Failed</span></span>
<span class="line"><span style="color:#24292e;">Pod Template:</span></span>
<span class="line"><span style="color:#24292e;">Labels:  batch.kubernetes.io/controller-uid=c9948307-e56d-4b5d-8302-ae2d7b7da67c</span></span>
<span class="line"><span style="color:#24292e;">        batch.kubernetes.io/job-name=pi</span></span>
<span class="line"><span style="color:#24292e;">Containers:</span></span>
<span class="line"><span style="color:#24292e;">pi:</span></span>
<span class="line"><span style="color:#24292e;">    Image:      perl:5.34.0</span></span>
<span class="line"><span style="color:#24292e;">    Port:       &lt;none&gt;</span></span>
<span class="line"><span style="color:#24292e;">    Host Port:  &lt;none&gt;</span></span>
<span class="line"><span style="color:#24292e;">    Command:</span></span>
<span class="line"><span style="color:#24292e;">    perl</span></span>
<span class="line"><span style="color:#24292e;">    -Mbignum=bpi</span></span>
<span class="line"><span style="color:#24292e;">    -wle</span></span>
<span class="line"><span style="color:#24292e;">    print bpi(2000)</span></span>
<span class="line"><span style="color:#24292e;">    Environment:  &lt;none&gt;</span></span>
<span class="line"><span style="color:#24292e;">    Mounts:       &lt;none&gt;</span></span>
<span class="line"><span style="color:#24292e;">Volumes:        &lt;none&gt;</span></span>
<span class="line"><span style="color:#24292e;">Events:</span></span>
<span class="line"><span style="color:#24292e;">Type    Reason            Age   From            Message</span></span>
<span class="line"><span style="color:#24292e;">----    ------            ----  ----            -------</span></span>
<span class="line"><span style="color:#24292e;">Normal  SuccessfulCreate  21s   job-controller  Created pod: pi-xf9p4</span></span>
<span class="line"><span style="color:#24292e;">Normal  Completed         18s   job-controller  Job completed</span></span>
<span class="line"><span style="color:#24292e;">\`\`\`</span></span></code></pre></div></li><li><p><code>kubectl get job pi -o yaml</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">apiVersion: batch/v1</span></span>
<span class="line"><span style="color:#e1e4e8;">kind: Job</span></span>
<span class="line"><span style="color:#e1e4e8;">metadata:</span></span>
<span class="line"><span style="color:#e1e4e8;">annotations: batch.kubernetes.io/job-tracking: &quot;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">            ...  </span></span>
<span class="line"><span style="color:#e1e4e8;">creationTimestamp: &quot;2022-11-10T17:53:53Z&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">generation: 1</span></span>
<span class="line"><span style="color:#e1e4e8;">labels:</span></span>
<span class="line"><span style="color:#e1e4e8;">    batch.kubernetes.io/controller-uid: 863452e6-270d-420e-9b94-53a54146c223</span></span>
<span class="line"><span style="color:#e1e4e8;">    batch.kubernetes.io/job-name: pi</span></span>
<span class="line"><span style="color:#e1e4e8;">name: pi</span></span>
<span class="line"><span style="color:#e1e4e8;">namespace: default</span></span>
<span class="line"><span style="color:#e1e4e8;">resourceVersion: &quot;4751&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">uid: 204fb678-040b-497f-9266-35ffa8716d14</span></span>
<span class="line"><span style="color:#e1e4e8;">spec:</span></span>
<span class="line"><span style="color:#e1e4e8;">backoffLimit: 4</span></span>
<span class="line"><span style="color:#e1e4e8;">completionMode: NonIndexed</span></span>
<span class="line"><span style="color:#e1e4e8;">completions: 1</span></span>
<span class="line"><span style="color:#e1e4e8;">parallelism: 1</span></span>
<span class="line"><span style="color:#e1e4e8;">selector:</span></span>
<span class="line"><span style="color:#e1e4e8;">    matchLabels:</span></span>
<span class="line"><span style="color:#e1e4e8;">    batch.kubernetes.io/controller-uid: 863452e6-270d-420e-9b94-53a54146c223</span></span>
<span class="line"><span style="color:#e1e4e8;">suspend: false</span></span>
<span class="line"><span style="color:#e1e4e8;">template:</span></span>
<span class="line"><span style="color:#e1e4e8;">    metadata:</span></span>
<span class="line"><span style="color:#e1e4e8;">    creationTimestamp: null</span></span>
<span class="line"><span style="color:#e1e4e8;">    labels:</span></span>
<span class="line"><span style="color:#e1e4e8;">        batch.kubernetes.io/controller-uid: 863452e6-270d-420e-9b94-53a54146c223</span></span>
<span class="line"><span style="color:#e1e4e8;">        batch.kubernetes.io/job-name: pi</span></span>
<span class="line"><span style="color:#e1e4e8;">    spec:</span></span>
<span class="line"><span style="color:#e1e4e8;">    containers:</span></span>
<span class="line"><span style="color:#e1e4e8;">    - command:</span></span>
<span class="line"><span style="color:#e1e4e8;">        - perl</span></span>
<span class="line"><span style="color:#e1e4e8;">        - -Mbignum=bpi</span></span>
<span class="line"><span style="color:#e1e4e8;">        - -wle</span></span>
<span class="line"><span style="color:#e1e4e8;">        - print bpi(2000)</span></span>
<span class="line"><span style="color:#e1e4e8;">        image: perl:5.34.0</span></span>
<span class="line"><span style="color:#e1e4e8;">        imagePullPolicy: IfNotPresent</span></span>
<span class="line"><span style="color:#e1e4e8;">        name: pi</span></span>
<span class="line"><span style="color:#e1e4e8;">        resources: {}</span></span>
<span class="line"><span style="color:#e1e4e8;">        terminationMessagePath: /dev/termination-log</span></span>
<span class="line"><span style="color:#e1e4e8;">        terminationMessagePolicy: File</span></span>
<span class="line"><span style="color:#e1e4e8;">    dnsPolicy: ClusterFirst</span></span>
<span class="line"><span style="color:#e1e4e8;">    restartPolicy: Never</span></span>
<span class="line"><span style="color:#e1e4e8;">    schedulerName: default-scheduler</span></span>
<span class="line"><span style="color:#e1e4e8;">    securityContext: {}</span></span>
<span class="line"><span style="color:#e1e4e8;">    terminationGracePeriodSeconds: 30</span></span>
<span class="line"><span style="color:#e1e4e8;">status:</span></span>
<span class="line"><span style="color:#e1e4e8;">active: 1</span></span>
<span class="line"><span style="color:#e1e4e8;">ready: 0</span></span>
<span class="line"><span style="color:#e1e4e8;">startTime: &quot;2022-11-10T17:53:57Z&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">uncountedTerminatedPods: {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">apiVersion: batch/v1</span></span>
<span class="line"><span style="color:#24292e;">kind: Job</span></span>
<span class="line"><span style="color:#24292e;">metadata:</span></span>
<span class="line"><span style="color:#24292e;">annotations: batch.kubernetes.io/job-tracking: &quot;&quot;</span></span>
<span class="line"><span style="color:#24292e;">            ...  </span></span>
<span class="line"><span style="color:#24292e;">creationTimestamp: &quot;2022-11-10T17:53:53Z&quot;</span></span>
<span class="line"><span style="color:#24292e;">generation: 1</span></span>
<span class="line"><span style="color:#24292e;">labels:</span></span>
<span class="line"><span style="color:#24292e;">    batch.kubernetes.io/controller-uid: 863452e6-270d-420e-9b94-53a54146c223</span></span>
<span class="line"><span style="color:#24292e;">    batch.kubernetes.io/job-name: pi</span></span>
<span class="line"><span style="color:#24292e;">name: pi</span></span>
<span class="line"><span style="color:#24292e;">namespace: default</span></span>
<span class="line"><span style="color:#24292e;">resourceVersion: &quot;4751&quot;</span></span>
<span class="line"><span style="color:#24292e;">uid: 204fb678-040b-497f-9266-35ffa8716d14</span></span>
<span class="line"><span style="color:#24292e;">spec:</span></span>
<span class="line"><span style="color:#24292e;">backoffLimit: 4</span></span>
<span class="line"><span style="color:#24292e;">completionMode: NonIndexed</span></span>
<span class="line"><span style="color:#24292e;">completions: 1</span></span>
<span class="line"><span style="color:#24292e;">parallelism: 1</span></span>
<span class="line"><span style="color:#24292e;">selector:</span></span>
<span class="line"><span style="color:#24292e;">    matchLabels:</span></span>
<span class="line"><span style="color:#24292e;">    batch.kubernetes.io/controller-uid: 863452e6-270d-420e-9b94-53a54146c223</span></span>
<span class="line"><span style="color:#24292e;">suspend: false</span></span>
<span class="line"><span style="color:#24292e;">template:</span></span>
<span class="line"><span style="color:#24292e;">    metadata:</span></span>
<span class="line"><span style="color:#24292e;">    creationTimestamp: null</span></span>
<span class="line"><span style="color:#24292e;">    labels:</span></span>
<span class="line"><span style="color:#24292e;">        batch.kubernetes.io/controller-uid: 863452e6-270d-420e-9b94-53a54146c223</span></span>
<span class="line"><span style="color:#24292e;">        batch.kubernetes.io/job-name: pi</span></span>
<span class="line"><span style="color:#24292e;">    spec:</span></span>
<span class="line"><span style="color:#24292e;">    containers:</span></span>
<span class="line"><span style="color:#24292e;">    - command:</span></span>
<span class="line"><span style="color:#24292e;">        - perl</span></span>
<span class="line"><span style="color:#24292e;">        - -Mbignum=bpi</span></span>
<span class="line"><span style="color:#24292e;">        - -wle</span></span>
<span class="line"><span style="color:#24292e;">        - print bpi(2000)</span></span>
<span class="line"><span style="color:#24292e;">        image: perl:5.34.0</span></span>
<span class="line"><span style="color:#24292e;">        imagePullPolicy: IfNotPresent</span></span>
<span class="line"><span style="color:#24292e;">        name: pi</span></span>
<span class="line"><span style="color:#24292e;">        resources: {}</span></span>
<span class="line"><span style="color:#24292e;">        terminationMessagePath: /dev/termination-log</span></span>
<span class="line"><span style="color:#24292e;">        terminationMessagePolicy: File</span></span>
<span class="line"><span style="color:#24292e;">    dnsPolicy: ClusterFirst</span></span>
<span class="line"><span style="color:#24292e;">    restartPolicy: Never</span></span>
<span class="line"><span style="color:#24292e;">    schedulerName: default-scheduler</span></span>
<span class="line"><span style="color:#24292e;">    securityContext: {}</span></span>
<span class="line"><span style="color:#24292e;">    terminationGracePeriodSeconds: 30</span></span>
<span class="line"><span style="color:#24292e;">status:</span></span>
<span class="line"><span style="color:#24292e;">active: 1</span></span>
<span class="line"><span style="color:#24292e;">ready: 0</span></span>
<span class="line"><span style="color:#24292e;">startTime: &quot;2022-11-10T17:53:57Z&quot;</span></span>
<span class="line"><span style="color:#24292e;">uncountedTerminatedPods: {}</span></span></code></pre></div></li></ul><p>To view completed Pods of a Job, use <code>kubectl get pods</code>.</p><p>To list all the Pods that belong to a Job in a machine readable form, you can use a command like this:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pods</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">kubectl</span><span style="color:#9ECBFF;"> get pods </span><span style="color:#79B8FF;">--selector=batch.kubernetes.io/job-name=pi</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">--output=jsonpath=</span><span style="color:#9ECBFF;">&#39;{.items[*].metadata.name}&#39;)</span></span>
<span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $pods</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pods</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">kubectl</span><span style="color:#032F62;"> get pods </span><span style="color:#005CC5;">--selector=batch.kubernetes.io/job-name=pi</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">--output=jsonpath=</span><span style="color:#032F62;">&#39;{.items[*].metadata.name}&#39;)</span></span>
<span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $pods</span></span></code></pre></div><p>The output is similar to this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">pi-5rwd7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">pi-5rwd7</span></span></code></pre></div><p>Here, the selector is the same as the selector for the Job. The <code>--output=jsonpath</code> option specifies an expression with the name from each Pod in the returned list.</p><p>View the standard output of one of the pods:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">logs</span><span style="color:#E1E4E8;"> $pods</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logs</span><span style="color:#24292E;"> $pods</span></span></code></pre></div><p>Another way to view the logs of a Job:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">logs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jobs/pi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">logs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jobs/pi</span></span></code></pre></div><p>The output is similar to this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275901</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275901</span></span></code></pre></div><h2 id="writing-a-job-spec" tabindex="-1">Writing a Job spec <a class="header-anchor" href="#writing-a-job-spec" aria-label="Permalink to &quot;Writing a Job spec&quot;">​</a></h2><p>As with all other Kubernetes config, a Job needs <code>apiVersion</code>, <code>kind</code>, and <code>metadata</code> fields.</p><p>When the control plane creates new Pods for a Job, the <code>.metadata.name</code> of the Job is part of the basis for naming those Pods. The name of a Job must be a valid <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/names#dns-subdomain-names" target="_blank" rel="noreferrer">DNS subdomain</a> value, but this can produce unexpected results for the Pod hostnames. For best compatibility, the name should follow the more restrictive rules for a <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/names#dns-label-names" target="_blank" rel="noreferrer">DNS label</a>. Even when the name is a DNS subdomain, the name must be no longer than 63 characters.</p><p>A Job also needs a <a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status" target="_blank" rel="noreferrer"><code>.spec</code> section</a>.</p><h3 id="job-labels" tabindex="-1">Job Labels <a class="header-anchor" href="#job-labels" aria-label="Permalink to &quot;Job Labels&quot;">​</a></h3><p>Job labels will have <code>batch.kubernetes.io/</code> prefix for <code>job-name</code> and <code>controller-uid</code>.</p><h3 id="pod-template" tabindex="-1">Pod Template <a class="header-anchor" href="#pod-template" aria-label="Permalink to &quot;Pod Template&quot;">​</a></h3><p>The <code>.spec.template</code> is the only required field of the <code>.spec</code>.</p><p>The <code>.spec.template</code> is a <a href="https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates" target="_blank" rel="noreferrer">pod template</a>. It has exactly the same schema as a Pod, except it is nested and does not have an <code>apiVersion</code> or <code>kind</code>.</p><p>In addition to required fields for a Pod, a pod template in a Job must specify appropriate labels (see <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-selector" target="_blank" rel="noreferrer">pod selector</a>) and an appropriate restart policy.</p><p>Only a <code>RestartPolicy</code> equal to <code>Never</code> or <code>OnFailure</code> is allowed.</p><h3 id="pod-selector" tabindex="-1">Pod selector <a class="header-anchor" href="#pod-selector" aria-label="Permalink to &quot;Pod selector&quot;">​</a></h3><p>The <code>.spec.selector</code> field is optional. In almost all cases you should not specify it. See section <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#specifying-your-own-pod-selector" target="_blank" rel="noreferrer">specifying your own pod selector</a>.</p><h3 id="parallel-execution-for-jobs" tabindex="-1">Parallel execution for Jobs <a class="header-anchor" href="#parallel-execution-for-jobs" aria-label="Permalink to &quot;Parallel execution for Jobs&quot;">​</a></h3><p>There are three main types of task suitable to run as a Job:</p><ol><li><p>Non-parallel Jobs</p><ul><li>normally, only one Pod is started, unless the Pod fails.</li><li>the Job is complete as soon as its Pod terminates successfully.</li></ul></li><li><p>Parallel Jobs with a fixed completion count:</p><ul><li>specify a non-zero positive value for <code>.spec.completions</code>.</li><li>the Job represents the overall task, and is complete when there are <code>.spec.completions</code> successful Pods.</li><li>when using <code>.spec.completionMode=&quot;Indexed&quot;</code>, each Pod gets a different index in the range 0 to <code>.spec.completions-1</code>.</li></ul></li><li><p>Parallel Jobs with a work queue:</p><ul><li>do not specify <code>.spec.completions</code>, default to <code>.spec.parallelism</code>.</li><li>the Pods must coordinate amongst themselves or an external service to determine what each should work on. For example, a Pod might fetch a batch of up to N items from the work queue.</li><li>each Pod is independently capable of determining whether or not all its peers are done, and thus that the entire Job is done.</li><li>when any Pod from the Job terminates with success, no new Pods are created.</li><li>once at least one Pod has terminated with success and all Pods are terminated, then the Job is completed with success.</li><li>once any Pod has exited with success, no other Pod should still be doing any work for this task or writing any output. They should all be in the process of exiting.</li></ul></li></ol><p>For a non-parallel Job, you can leave both <code>.spec.completions</code> and <code>.spec.parallelism</code> unset. When both are unset, both are defaulted to 1.</p><p>For a fixed completion count Job, you should set <code>.spec.completions</code> to the number of completions needed. You can set <code>.spec.parallelism</code>, or leave it unset and it will default to 1.</p><p>For a work queue Job, you must leave <code>.spec.completions</code> unset, and set <code>.spec.parallelism</code> to a non-negative integer.</p><p>For more information about how to make use of the different types of job, see the <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#job-patterns" target="_blank" rel="noreferrer">job patterns</a> section.</p><h4 id="controlling-parallelism" tabindex="-1">Controlling parallelism <a class="header-anchor" href="#controlling-parallelism" aria-label="Permalink to &quot;Controlling parallelism&quot;">​</a></h4><p>The requested parallelism (<code>.spec.parallelism</code>) can be set to any non-negative value. If it is unspecified, it defaults to 1. If it is specified as 0, then the Job is effectively paused until it is increased.</p><p>Actual parallelism (number of pods running at any instant) may be more or less than requested parallelism, for a variety of reasons:</p><ul><li>For fixed completion count Jobs, the actual number of pods running in parallel will not exceed the number of remaining completions. Higher values of <code>.spec.parallelism</code> are effectively ignored.</li><li>For work queue Jobs, no new Pods are started after any Pod has succeeded -- remaining Pods are allowed to complete, however.</li><li>If the Job Controller has not had time to react.</li><li>If the Job controller failed to create Pods for any reason (lack of <code>ResourceQuota</code>, lack of permission, etc.), then there may be fewer pods than requested.</li><li>The Job controller may throttle new Pod creation due to excessive previous pod failures in the same Job.</li><li>When a Pod is gracefully shut down, it takes time to stop.</li></ul><h3 id="completion-mode" tabindex="-1">Completion mode <a class="header-anchor" href="#completion-mode" aria-label="Permalink to &quot;Completion mode&quot;">​</a></h3><p><em>FEATURE STATE</em>: <code>Kubernetes v1.24 [stable]</code></p><p>Jobs with fixed completion count - that is, jobs that have non null <code>.spec.completions</code> - can have a completion mode that is specified in <code>.spec.completionMode</code>:</p><ul><li><p><code>NonIndexed</code> (default): the Job is considered complete when there have been <code>.spec.completions</code> successfully completed Pods. In other words, each Pod completion is homologous to each other. Note that Jobs that have null <code>.spec.completions</code> are implicitly <code>NonIndexed</code>.</p></li><li><p><code>Indexed</code>: the Pods of a Job get an associated completion index from 0 to <code>.spec.completions-1</code>. The index is available through four mechanisms:</p><ul><li>The Pod annotation <code>batch.kubernetes.io/job-completion-index</code>.</li><li>The Pod label <code>batch.kubernetes.io/job-completion-index</code> (for v1.28 and later). Note the feature gate <code>PodIndexLabel</code> must be enabled to use this label, and it is enabled by default.</li><li>As part of the Pod hostname, following the pattern <code>$(job-name)-$(index)</code>. When you use an Indexed Job in combination with a Service, Pods within the Job can use the deterministic hostnames to address each other via DNS. For more information about how to configure this, see <a href="https://kubernetes.io/docs/tasks/job/job-with-pod-to-pod-communication/" target="_blank" rel="noreferrer">Job with Pod-to-Pod Communication</a>.</li><li>From the containerized task, in the environment variable <code>JOB_COMPLETION_INDEX</code>.</li></ul><p>The Job is considered complete when there is one successfully completed Pod for each index. For more information about how to use this mode, see <a href="https://kubernetes.io/docs/tasks/job/indexed-parallel-processing-static/" target="_blank" rel="noreferrer">Indexed Job for Parallel Processing with Static Work Assignment</a>.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Although rare, more than one Pod could be started for the same index (due to various reasons such as node failures, kubelet restarts, or Pod evictions). In this case, only the first Pod that completes successfully will count towards the completion count and update the status of the Job. The other Pods that are running or completed for the same index will be deleted by the Job controller once they are detected.</p></div><h2 id="handling-pod-and-container-failures" tabindex="-1">Handling Pod and container failures <a class="header-anchor" href="#handling-pod-and-container-failures" aria-label="Permalink to &quot;Handling Pod and container failures&quot;">​</a></h2><p>A container in a Pod may fail for a number of reasons, such as because the process in it exited with a non-zero exit code, or the container was killed for exceeding a memory limit, etc. If this happens, and the <code>.spec.template.spec.restartPolicy = &quot;OnFailure&quot;</code>, then the Pod stays on the node, but the container is re-run. Therefore, your program needs to handle the case when it is restarted locally, or else specify <code>.spec.template.spec.restartPolicy = &quot;Never&quot;</code>. See <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#example-states" target="_blank" rel="noreferrer">pod lifecycle</a> for more information on <code>restartPolicy</code>.</p><p>An entire Pod can also fail, for a number of reasons, such as when the pod is kicked off the node (node is upgraded, rebooted, deleted, etc.), or if a container of the Pod fails and the <code>.spec.template.spec.restartPolicy = &quot;Never&quot;</code>. When a Pod fails, then the Job controller starts a new Pod. This means that your application needs to handle the case when it is restarted in a new pod. In particular, it needs to handle temporary files, locks, incomplete output and the like caused by previous runs.</p><p>By default, each pod failure is counted towards the <code>.spec.backoffLimit</code> limit, see <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy" target="_blank" rel="noreferrer">pod backoff failure policy</a>. However, you can customize handling of pod failures by setting the Job&#39;s <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-failure-policy" target="_blank" rel="noreferrer">pod failure policy</a>.</p><p>Additionally, you can choose to count the pod failures independently for each index of an <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode" target="_blank" rel="noreferrer">Indexed</a> Job by setting the <code>.spec.backoffLimitPerIndex</code> field (for more information, see <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#backoff-limit-per-index" target="_blank" rel="noreferrer">backoff limit per index</a>).</p><p>Note that even if you specify <code>.spec.parallelism = 1</code> and <code>.spec.completions = 1</code> and <code>.spec.template.spec.restartPolicy = &quot;Never&quot;</code>, the same program may sometimes be started twice.</p><p>If you do specify <code>.spec.parallelism</code> and <code>.spec.completions</code> both greater than 1, then there may be multiple pods running at once. Therefore, your pods must also be tolerant of concurrency.</p><p>When the <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/" target="_blank" rel="noreferrer">feature gates</a> <code>PodDisruptionConditions</code> and <code>JobPodFailurePolicy</code> are both enabled, and the <code>.spec.podFailurePolicy</code> field is set, the Job controller does not consider a terminating Pod (a pod that has a <code>.metadata.deletionTimestamp</code> field set) as a failure until that Pod is terminal (its <code>.status.phase</code> is <code>Failed</code> or <code>Succeeded</code>). However, the Job controller creates a replacement Pod as soon as the termination becomes apparent. Once the pod terminates, the Job controller evaluates <code>.backoffLimit</code> and <code>.podFailurePolicy</code> for the relevant Job, taking this now-terminated Pod into consideration.</p><p>If either of these requirements is not satisfied, the Job controller counts a terminating Pod as an immediate failure, even if that Pod later terminates with <code>phase: &quot;Succeeded&quot;</code>.</p><h3 id="pod-backoff-failure-policy" tabindex="-1">Pod backoff failure policy <a class="header-anchor" href="#pod-backoff-failure-policy" aria-label="Permalink to &quot;Pod backoff failure policy&quot;">​</a></h3><p>There are situations where you want to fail a Job after some amount of retries due to a logical error in configuration etc. To do so, set <code>.spec.backoffLimit</code> to specify the number of retries before considering a Job as failed. The back-off limit is set by default to 6. Failed Pods associated with the Job are recreated by the Job controller with an exponential back-off delay (10s, 20s, 40s ...) capped at six minutes.</p><p>The number of retries is calculated in two ways:</p><ul><li>The number of Pods with <code>.status.phase = &quot;Failed&quot;</code>.</li><li>When using <code>restartPolicy = &quot;OnFailure&quot;</code>, the number of retries in all the containers of Pods with <code>.status.phase</code> equal to <code>Pending</code> or <code>Running</code>.</li></ul><p>If either of the calculations reaches the <code>.spec.backoffLimit</code>, the Job is considered failed.</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>If your job has <code>restartPolicy = &quot;OnFailure&quot;</code>, keep in mind that your Pod running the Job will be terminated once the job backoff limit has been reached. This can make debugging the Job&#39;s executable more difficult. We suggest setting <code>restartPolicy = &quot;Never&quot;</code> when debugging the Job or using a logging system to ensure output from failed Jobs is not lost inadvertently.</p></div><h3 id="backoff-limit-per-index" tabindex="-1">Backoff limit per index <a class="header-anchor" href="#backoff-limit-per-index" aria-label="Permalink to &quot;Backoff limit per index&quot;">​</a></h3><p><em>FEATURE STATE</em>: <code>Kubernetes v1.28 [alpha]</code></p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>You can only configure the backoff limit per index for an <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode" target="_blank" rel="noreferrer">Indexed</a> Job, if you have the <code>JobBackoffLimitPerIndex</code> <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/" target="_blank" rel="noreferrer">feature gate</a> enabled in your cluster.</p></div><p>When you run an <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#completion-mode" target="_blank" rel="noreferrer">indexed</a> Job, you can choose to handle retries for pod failures independently for each index. To do so, set the <code>.spec.backoffLimitPerIndex</code> to specify the maximal number of pod failures per index.</p><p>When the per-index backoff limit is exceeded for an index, Kuberentes considers the index as failed and adds it to the <code>.status.failedIndexes</code> field. The succeeded indexes, those with a successfully executed pods, are recorded in the <code>.status.completedIndexes</code> field, regardless of whether you set the <code>backoffLimitPerIndex</code> field.</p><p>Note that a failing index does not interrupt execution of other indexes. Once all indexes finish for a Job where you specified a backoff limit per index, if at least one of those indexes did fail, the Job controller marks the overall Job as failed, by setting the Failed condition in the status. The Job gets marked as failed even if some, potentially nearly all, of the indexes were processed successfully.</p><p>You can additionally limit the maximal number of indexes marked failed by setting the <code>.spec.maxFailedIndexes</code> field. When the number of failed indexes exceeds the <code>maxFailedIndexes</code> field, the Job controller triggers termination of all remaining running Pods for that Job. Once all pods are terminated, the entire Job is marked failed by the Job controller, by setting the Failed condition in the Job status.</p><p>Here is an example manifest for a Job that defines a <code>backoffLimitPerIndex</code>:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># /controllers/job-backoff-limit-per-index-example.yaml</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">job-backoff-limit-per-index-example</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">completions</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">parallelism</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">completionMode</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Indexed</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># required for the feature</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">backoffLimitPerIndex</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># maximal number of failures per index</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">maxFailedIndexes</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># maximal number of failed indexes before terminating the Job execution</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Never</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># required for the feature</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">example</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">python</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">:           </span><span style="color:#6A737D;"># The jobs fails as there is at least one failed index</span></span>
<span class="line"><span style="color:#E1E4E8;">                           </span><span style="color:#6A737D;"># (all even indexes fail in here), yet all indexes</span></span>
<span class="line"><span style="color:#E1E4E8;">                           </span><span style="color:#6A737D;"># are executed as maxFailedIndexes is not exceeded.</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">python3</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">-c</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#9ECBFF;">          import os, sys</span></span>
<span class="line"><span style="color:#9ECBFF;">          print(&quot;Hello world&quot;)</span></span>
<span class="line"><span style="color:#9ECBFF;">          if int(os.environ.get(&quot;JOB_COMPLETION_INDEX&quot;)) % 2 == 0:</span></span>
<span class="line"><span style="color:#9ECBFF;">            sys.exit(1)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># /controllers/job-backoff-limit-per-index-example.yaml</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">job-backoff-limit-per-index-example</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">completions</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">parallelism</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">completionMode</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Indexed</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># required for the feature</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">backoffLimitPerIndex</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># maximal number of failures per index</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">maxFailedIndexes</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">      </span><span style="color:#6A737D;"># maximal number of failed indexes before terminating the Job execution</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Never</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># required for the feature</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">example</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">python</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">command</span><span style="color:#24292E;">:           </span><span style="color:#6A737D;"># The jobs fails as there is at least one failed index</span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#6A737D;"># (all even indexes fail in here), yet all indexes</span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#6A737D;"># are executed as maxFailedIndexes is not exceeded.</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">python3</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">-c</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#D73A49;">|</span></span>
<span class="line"><span style="color:#032F62;">          import os, sys</span></span>
<span class="line"><span style="color:#032F62;">          print(&quot;Hello world&quot;)</span></span>
<span class="line"><span style="color:#032F62;">          if int(os.environ.get(&quot;JOB_COMPLETION_INDEX&quot;)) % 2 == 0:</span></span>
<span class="line"><span style="color:#032F62;">            sys.exit(1)</span></span></code></pre></div><p>In the example above, the Job controller allows for one restart for each of the indexes. When the total number of failed indexes exceeds 5, then the entire Job is terminated.</p><p>Once the job is finished, the Job status looks as follows:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yaml</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">job</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">job-backoff-limit-per-index-example</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yaml</span><span style="color:#24292E;"> </span><span style="color:#032F62;">job</span><span style="color:#24292E;"> </span><span style="color:#032F62;">job-backoff-limit-per-index-example</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">status</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">completedIndexes</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">1,3,5,7,9</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">failedIndexes</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">0,2,4,6,8</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">succeeded</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;"># 1 succeeded pod for each of 5 succeeded indexes</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">failed</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;"># 2 failed pods (1 retry) for each of 5 failed indexes</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">conditions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">message</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job has failed indexes</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">reason</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">FailedIndexes</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">status</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;True&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Failed</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">status</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">completedIndexes</span><span style="color:#24292E;">: </span><span style="color:#032F62;">1,3,5,7,9</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">failedIndexes</span><span style="color:#24292E;">: </span><span style="color:#032F62;">0,2,4,6,8</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">succeeded</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">          </span><span style="color:#6A737D;"># 1 succeeded pod for each of 5 succeeded indexes</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">failed</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 2 failed pods (1 retry) for each of 5 failed indexes</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">conditions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">message</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job has failed indexes</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">reason</span><span style="color:#24292E;">: </span><span style="color:#032F62;">FailedIndexes</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">status</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;True&quot;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Failed</span></span></code></pre></div><p>Additionally, you may want to use the per-index backoff along with a <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-failure-policy" target="_blank" rel="noreferrer">pod failure policy</a>. When using per-index backoff, there is a new <code>FailIndex</code> action available which allows you to avoid unnecessary retries within an index.</p><h3 id="pod-failure-policy" tabindex="-1">Pod failure policy <a class="header-anchor" href="#pod-failure-policy" aria-label="Permalink to &quot;Pod failure policy&quot;">​</a></h3><p><em>FEATURE STATE</em>: <code>Kubernetes v1.26 [beta]</code></p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>You can only configure a Pod failure policy for a Job if you have the <code>JobPodFailurePolicy</code> <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/" target="_blank" rel="noreferrer">feature gate</a> enabled in your cluster. Additionally, it is recommended to enable the PodDisruptionConditions feature gate in order to be able to detect and handle Pod disruption conditions in the Pod failure policy (see also: <a href="https://kubernetes.io/docs/concepts/workloads/pods/disruptions#pod-disruption-conditions" target="_blank" rel="noreferrer">Pod disruption conditions</a>). Both feature gates are available in Kubernetes 1.28.</p></div><p>A Pod failure policy, defined with the <code>.spec.podFailurePolicy</code> field, enables your cluster to handle Pod failures based on the container exit codes and the Pod conditions.</p><p>In some situations, you may want to have a better control when handling Pod failures than the control provided by the <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy" target="_blank" rel="noreferrer">Pod backoff failure policy</a>, which is based on the Job&#39;s <code>.spec.backoffLimit</code>. These are some examples of use cases:</p><ul><li>To optimize costs of running workloads by avoiding unnecessary Pod restarts, you can terminate a Job as soon as one of its Pods fails with an exit code indicating a software bug.</li><li>To guarantee that your Job finishes even if there are disruptions, you can ignore Pod failures caused by disruptions (such as preemption, API-initiated eviction or taint-based eviction) so that they don&#39;t count towards the <code>.spec.backoffLimit</code> limit of retries.</li></ul><p>You can configure a Pod failure policy, in the <code>.spec.podFailurePolicy</code> field, to meet the above use cases. This policy can handle Pod failures based on the container exit codes and the Pod conditions.</p><p>Here is a manifest for a Job that defines a <code>podFailurePolicy</code>:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">/controllers/job-pod-failure-policy-example.yaml</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">job-pod-failure-policy-example</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">completions</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">12</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">parallelism</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Never</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">main</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">docker.io/library/bash:5</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;bash&quot;</span><span style="color:#E1E4E8;">]        </span><span style="color:#6A737D;"># example command simulating a bug which triggers the FailJob action</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">args</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">-c</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">echo &quot;Hello world!&quot; &amp;&amp; sleep 5 &amp;&amp; exit 42</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">backoffLimit</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">6</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">podFailurePolicy</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">rules</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">action</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">FailJob</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">onExitCodes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">containerName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">main</span><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># optional</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">operator</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">In</span><span style="color:#E1E4E8;">             </span><span style="color:#6A737D;"># one of: In, NotIn</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">values</span><span style="color:#E1E4E8;">: [</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    - </span><span style="color:#85E89D;">action</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Ignore</span><span style="color:#E1E4E8;">             </span><span style="color:#6A737D;"># one of: Ignore, FailJob, Count</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">onPodConditions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">DisruptionTarget</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># indicates Pod disruption</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">/controllers/job-pod-failure-policy-example.yaml</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">job-pod-failure-policy-example</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">completions</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">12</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">parallelism</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Never</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">main</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">docker.io/library/bash:5</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;bash&quot;</span><span style="color:#24292E;">]        </span><span style="color:#6A737D;"># example command simulating a bug which triggers the FailJob action</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">args</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">-c</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#032F62;">echo &quot;Hello world!&quot; &amp;&amp; sleep 5 &amp;&amp; exit 42</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">backoffLimit</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">podFailurePolicy</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">rules</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">action</span><span style="color:#24292E;">: </span><span style="color:#032F62;">FailJob</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">onExitCodes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">containerName</span><span style="color:#24292E;">: </span><span style="color:#032F62;">main</span><span style="color:#24292E;">      </span><span style="color:#6A737D;"># optional</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">operator</span><span style="color:#24292E;">: </span><span style="color:#032F62;">In</span><span style="color:#24292E;">             </span><span style="color:#6A737D;"># one of: In, NotIn</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">values</span><span style="color:#24292E;">: [</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    - </span><span style="color:#22863A;">action</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Ignore</span><span style="color:#24292E;">             </span><span style="color:#6A737D;"># one of: Ignore, FailJob, Count</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">onPodConditions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">DisruptionTarget</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># indicates Pod disruption</span></span></code></pre></div><p>In the example above, the first rule of the Pod failure policy specifies that the Job should be marked failed if the <code>main</code> container fails with the 42 exit code. The following are the rules for the <code>main</code> container specifically:</p><ul><li>an exit code of 0 means that the container succeeded</li><li>an exit code of 42 means that the entire Job failed</li><li>any other exit code represents that the container failed, and hence the entire Pod. The Pod will be re-created if the total number of restarts is below <code>backoffLimit</code>. If the <code>backoffLimit</code> is reached the entire Job failed.</li></ul><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Because the Pod template specifies a <code>restartPolicy: Never</code>, the kubelet does not restart the <code>main</code> container in that particular Pod.</p></div><p>The second rule of the Pod failure policy, specifying the <code>Ignore</code> action for failed Pods with condition <code>DisruptionTarget</code> excludes Pod disruptions from being counted towards the <code>.spec.backoffLimit</code> limit of retries.</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>If the Job failed, either by the Pod failure policy or Pod backoff failure policy, and the Job is running multiple Pods, Kubernetes terminates all the Pods in that Job that are still Pending or Running.</p></div><p>These are some requirements and semantics of the API:</p><ul><li><p>if you want to use a <code>.spec.podFailurePolicy</code> field for a Job, you must also define that Job&#39;s pod template with <code>.spec.restartPolicy</code> set to <code>Never</code>.</p></li><li><p>the Pod failure policy rules you specify under <code>spec.podFailurePolicy.rules</code> are evaluated in order. Once a rule matches a Pod failure, the remaining rules are ignored. When no rule matches the Pod failure, the default handling applies.</p></li><li><p>you may want to restrict a rule to a specific container by specifying its name <code>inspec.podFailurePolicy.rules[*].containerName</code>. When not specified the rule applies to all containers. When specified, it should match one the container or <code>initContainer</code> names in the Pod template.</p></li><li><p>you may specify the action taken when a Pod failure policy is matched by <code>spec.podFailurePolicy.rules[*].action</code>. Possible values are:</p><ul><li><code>FailJob</code>: use to indicate that the Pod&#39;s job should be marked as Failed and all running Pods should be terminated.</li><li><code>Ignore</code>: use to indicate that the counter towards the <code>.spec.backoffLimit</code> should not be incremented and a replacement Pod should be created.</li><li><code>Count</code>: use to indicate that the Pod should be handled in the default way. The counter towards the <code>.spec.backoffLimit</code> should be incremented.</li><li><code>FailIndex</code>: use this action along with <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#backoff-limit-per-index" target="_blank" rel="noreferrer">backoff limit per index</a> to avoid unnecessary retries within the index of a failed pod.</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>When you use a <code>podFailurePolicy</code>, the job controller only matches Pods in the <code>Failed</code> phase. Pods with a deletion timestamp that are not in a terminal phase (<code>Failed</code> or <code>Succeeded</code>) are considered still terminating. This implies that terminating pods retain a <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#job-tracking-with-finalizers" target="_blank" rel="noreferrer">tracking finalizer</a> until they reach a terminal phase. Since Kubernetes 1.27, Kubelet transitions deleted pods to a terminal phase (see: <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase" target="_blank" rel="noreferrer">Pod Phase</a>). This ensures that deleted pods have their finalizers removed by the Job controller.</p></div><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Starting with Kubernetes v1.28, when Pod failure policy is used, the Job controller recreates terminating Pods only once these Pods reach the terminal Failed phase. This behavior is similar to <code>podReplacementPolicy: Failed</code>. For more information, see <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-replacement-policy" target="_blank" rel="noreferrer">Pod replacement policy</a>.</p></div><h2 id="job-termination-and-cleanup" tabindex="-1">Job termination and cleanup <a class="header-anchor" href="#job-termination-and-cleanup" aria-label="Permalink to &quot;Job termination and cleanup&quot;">​</a></h2><p>When a Job completes, no more Pods are created, but the Pods are <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy" target="_blank" rel="noreferrer">usually</a> not deleted either. Keeping them around allows you to still view the logs of completed pods to check for errors, warnings, or other diagnostic output. The job object also remains after it is completed so that you can view its status. It is up to the user to delete old jobs after noting their status. Delete the job with <code>kubectl</code> (e.g. <code>kubectl delete jobs/pi</code> or <code>kubectl delete -f ./job.yaml</code>). When you delete the job using <code>kubectl</code>, all the pods it created are deleted too.</p><p>By default, a Job will run uninterrupted unless a Pod fails (<code>restartPolicy=Never</code>) or a Container exits in error (<code>restartPolicy=OnFailure</code>), at which point the Job defers to the <code>.spec.backoffLimit</code> described above. Once <code>.spec.backoffLimit</code> has been reached the Job will be marked as failed and any running Pods will be terminated.</p><p>Another way to terminate a Job is by setting an active deadline. Do this by setting the <code>.spec.activeDeadlineSeconds</code> field of the Job to a number of seconds. The <code>activeDeadlineSeconds</code> applies to the duration of the job, no matter how many Pods are created. Once a Job reaches <code>activeDeadlineSeconds</code>, all of its running Pods are terminated and the Job status will become type: Failed with <code>reason: DeadlineExceeded</code>.</p><p>Note that a Job&#39;s <code>.spec.activeDeadlineSeconds</code> takes precedence over its <code>.spec.backoffLimit</code>. Therefore, a Job that is retrying one or more failed Pods will not deploy additional Pods once it reaches the time limit specified by <code>activeDeadlineSeconds</code>, even if the <code>backoffLimit</code> is not yet reached.</p><p>Example:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pi-with-timeout</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">backoffLimit</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">activeDeadlineSeconds</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pi</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">perl:5.34.0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;perl&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-Mbignum=bpi&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-wle&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;print bpi(2000)&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Never</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pi-with-timeout</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">backoffLimit</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">activeDeadlineSeconds</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pi</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">perl:5.34.0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;perl&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-Mbignum=bpi&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-wle&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;print bpi(2000)&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Never</span></span></code></pre></div><p>Note that both the Job spec and the <a href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/#detailed-behavior" target="_blank" rel="noreferrer">Pod template spec</a> within the Job have an <code>activeDeadlineSeconds</code> field. Ensure that you set this field at the proper level.</p><p>Keep in mind that the <code>restartPolicy</code> applies to the Pod, and not to the Job itself: there is no automatic Job restart once the Job status is <code>type: Failed</code>. That is, the Job termination mechanisms activated with <code>.spec.activeDeadlineSeconds</code> and <code>.spec.backoffLimit</code> result in a permanent Job failure that requires manual intervention to resolve.</p><h2 id="clean-up-finished-jobs-automatically" tabindex="-1">Clean up finished jobs automatically <a class="header-anchor" href="#clean-up-finished-jobs-automatically" aria-label="Permalink to &quot;Clean up finished jobs automatically&quot;">​</a></h2><p>Finished Jobs are usually no longer needed in the system. Keeping them around in the system will put pressure on the API server. If the Jobs are managed directly by a higher level controller, such as <a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/" target="_blank" rel="noreferrer">CronJobs</a>, the Jobs can be cleaned up by CronJobs based on the specified capacity-based cleanup policy.</p><h3 id="ttl-mechanism-for-finished-jobs" tabindex="-1">TTL mechanism for finished Jobs <a class="header-anchor" href="#ttl-mechanism-for-finished-jobs" aria-label="Permalink to &quot;TTL mechanism for finished Jobs&quot;">​</a></h3><p><em>FEATURE STATE</em>: <code>Kubernetes v1.23 [stable]</code></p><p>Another way to clean up finished Jobs (either <code>Complete</code> or <code>Failed</code>) automatically is to use a TTL mechanism provided by a <a href="https://kubernetes.io/docs/concepts/workloads/controllers/ttlafterfinished/" target="_blank" rel="noreferrer">TTL controller</a> for finished resources, by specifying the <code>.spec.ttlSecondsAfterFinished</code> field of the Job.</p><p>When the TTL controller cleans up the Job, it will delete the Job cascadingly, i.e. delete its dependent objects, such as Pods, together with the Job. Note that when the Job is deleted, its lifecycle guarantees, such as finalizers, will be honored.</p><p>For example:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pi-with-ttl</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">ttlSecondsAfterFinished</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">pi</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">perl:5.34.0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">command</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;perl&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-Mbignum=bpi&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-wle&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;print bpi(2000)&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">restartPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Never</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pi-with-ttl</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">ttlSecondsAfterFinished</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">pi</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">perl:5.34.0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">command</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;perl&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-Mbignum=bpi&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-wle&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;print bpi(2000)&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">restartPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Never</span></span></code></pre></div><p>The Job <code>pi-with-ttl</code> will be eligible to be automatically deleted, <code>100</code> seconds after it finishes.</p><p>If the field is set to <code>0</code>, the Job will be eligible to be automatically deleted immediately after it finishes. If the field is unset, this Job won&#39;t be cleaned up by the TTL controller after it finishes.</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>It is recommended to set <code>ttlSecondsAfterFinished</code> field because unmanaged jobs (Jobs that you created directly, and not indirectly through other workload APIs such as CronJob) have a default deletion policy of <code>orphanDependents</code> causing Pods created by an unmanaged Job to be left around after that Job is fully deleted. Even though the control plane eventually <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-garbage-collection" target="_blank" rel="noreferrer">garbage collects</a> the Pods from a deleted Job after they either fail or complete, sometimes those lingering pods may cause cluster performance degradation or in worst case cause the cluster to go offline due to this degradation.</p><p>You can use <a href="https://kubernetes.io/docs/concepts/policy/limit-range/" target="_blank" rel="noreferrer">LimitRanges</a> and <a href="https://kubernetes.io/docs/concepts/policy/resource-quotas/" target="_blank" rel="noreferrer">ResourceQuotas</a> to place a cap on the amount of resources that a particular namespace can consume.</p></div><h2 id="job-patterns" tabindex="-1">Job patterns <a class="header-anchor" href="#job-patterns" aria-label="Permalink to &quot;Job patterns&quot;">​</a></h2><p>The Job object can be used to support reliable parallel execution of Pods. The Job object is not designed to support closely-communicating parallel processes, as commonly found in scientific computing. It does support parallel processing of a set of independent but related work items. These might be emails to be sent, frames to be rendered, files to be transcoded, ranges of keys in a NoSQL database to scan, and so on.</p><p>In a complex system, there may be multiple different sets of work items. Here we are just considering one set of work items that the user wants to manage together — a batch job.</p><p>There are several different patterns for parallel computation, each with strengths and weaknesses. The tradeoffs are:</p><ul><li>One Job object for each work item, vs. a single Job object for all work items. The latter is better for large numbers of work items. The former creates some overhead for the user and for the system to manage large numbers of Job objects.</li><li>Number of pods created equals number of work items, vs. each Pod can process multiple work items. The former typically requires less modification to existing code and containers. The latter is better for large numbers of work items, for similar reasons to the previous bullet.</li><li>Several approaches use a work queue. This requires running a queue service, and modifications to the existing program or container to make it use the work queue. Other approaches are easier to adapt to an existing containerised application. The tradeoffs are summarized here, with columns 2 to 4 corresponding to the above tradeoffs. The pattern names are also links to examples and more detailed description.</li></ul><table><thead><tr><th>Pattern</th><th>Single Job object</th><th>Fewer pods than work items?</th><th>Use app unmodified?</th></tr></thead><tbody><tr><td><a href="https://kubernetes.io/docs/tasks/job/coarse-parallel-processing-work-queue/" target="_blank" rel="noreferrer">Queue with Pod Per Work Item </a></td><td>✓</td><td></td><td>sometimes</td></tr><tr><td><a href="https://kubernetes.io/docs/tasks/job/fine-parallel-processing-work-queue/" target="_blank" rel="noreferrer">Queue with Variable Pod Count</a></td><td>✓</td><td>✓</td><td></td></tr><tr><td><a href="https://kubernetes.io/docs/tasks/job/indexed-parallel-processing-static/" target="_blank" rel="noreferrer">Indexed Job with Static Work Assignment</a></td><td>✓</td><td></td><td>✓</td></tr><tr><td><a href="https://kubernetes.io/docs/tasks/job/parallel-processing-expansion/" target="_blank" rel="noreferrer">Job Template Expansion</a></td><td></td><td></td><td>✓</td></tr><tr><td><a href="https://kubernetes.io/docs/tasks/job/job-with-pod-to-pod-communication/" target="_blank" rel="noreferrer">Job with Pod-to-Pod Communication</a></td><td>✓</td><td>sometimes</td><td>sometimes</td></tr></tbody></table><p>When you specify completions with <code>.spec.completions</code>, each Pod created by the Job controller has an identical <code>spec</code>. This means that all pods for a task will have the same command line and the same image, the same volumes, and (almost) the same environment variables. These patterns are different ways to arrange for pods to work on different things.</p><p>This table shows the required settings for <code>.spec.parallelism</code> and <code>.spec.completions</code> for each of the patterns. Here, W is the number of work items.</p><table><thead><tr><th>Pattern</th><th>.spec.completions</th><th>.spec.parallelism</th></tr></thead><tbody><tr><td><a href="https://kubernetes.io/docs/tasks/job/coarse-parallel-processing-work-queue/" target="_blank" rel="noreferrer">Queue with Pod Per Work Item </a></td><td>W</td><td>any</td></tr><tr><td><a href="https://kubernetes.io/docs/tasks/job/fine-parallel-processing-work-queue/" target="_blank" rel="noreferrer">Queue with Variable Pod Count</a></td><td>null</td><td>any</td></tr><tr><td><a href="https://kubernetes.io/docs/tasks/job/indexed-parallel-processing-static/" target="_blank" rel="noreferrer">Indexed Job with Static Work Assignment</a></td><td>W</td><td>any</td></tr><tr><td><a href="https://kubernetes.io/docs/tasks/job/parallel-processing-expansion/" target="_blank" rel="noreferrer">Job Template Expansion</a></td><td>1</td><td>should be 1</td></tr><tr><td>J<a href="https://kubernetes.io/docs/tasks/job/job-with-pod-to-pod-communication/" target="_blank" rel="noreferrer">ob with Pod-to-Pod Communication</a></td><td>W</td><td>W</td></tr></tbody></table><h2 id="advanced-usage" tabindex="-1">Advanced usage <a class="header-anchor" href="#advanced-usage" aria-label="Permalink to &quot;Advanced usage&quot;">​</a></h2><h3 id="suspending-a-job" tabindex="-1">Suspending a Job <a class="header-anchor" href="#suspending-a-job" aria-label="Permalink to &quot;Suspending a Job&quot;">​</a></h3><p><em>FEATURE STATE</em>: <code>Kubernetes v1.24 [stable]</code></p><p>When a Job is created, the Job controller will immediately begin creating Pods to satisfy the Job&#39;s requirements and will continue to do so until the Job is complete. However, you may want to temporarily suspend a Job&#39;s execution and resume it later, or start Jobs in suspended state and have a custom controller decide later when to start them.</p><p>To suspend a Job, you can update the <code>.spec.suspend</code> field of the Job to true; later, when you want to resume it again, update it to false. Creating a Job with <code>.spec.suspend</code> set to true will create it in the suspended state.</p><p>When a Job is resumed from suspension, its <code>.status.startTime</code> field will be reset to the current time. This means that the <code>.spec.activeDeadlineSeconds</code> timer will be stopped and reset when a Job is suspended and resumed.</p><p>When you suspend a Job, any running Pods that don&#39;t have a status of <code>Completed</code> will be <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination" target="_blank" rel="noreferrer">terminated</a>. with a SIGTERM signal. The Pod&#39;s graceful termination period will be honored and your Pod must handle this signal in this period. This may involve saving progress for later or undoing changes. Pods terminated this way will not count towards the Job&#39;s <code>completions</code> count.</p><p>An example Job definition in the suspended state can be like so:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">job</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">myjob</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">job</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myjob</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yaml</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">myjob</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">suspend</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">parallelism</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">completions</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">myjob</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">suspend</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">parallelism</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">completions</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">...</span></span></code></pre></div><p>You can also toggle Job suspension by patching the Job using the command line.</p><p>Suspend an active Job:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">patch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">job/myjob</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--type=strategic</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--patch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;{&quot;spec&quot;:{&quot;suspend&quot;:true}}&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">patch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">job/myjob</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--type=strategic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--patch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;{&quot;spec&quot;:{&quot;suspend&quot;:true}}&#39;</span></span></code></pre></div><p>Resume a suspended Job:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">patch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">job/myjob</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--type=strategic</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--patch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;{&quot;spec&quot;:{&quot;suspend&quot;:false}}&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">patch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">job/myjob</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--type=strategic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--patch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;{&quot;spec&quot;:{&quot;suspend&quot;:false}}&#39;</span></span></code></pre></div><p>The Job&#39;s status can be used to determine if a Job is suspended or has been suspended in the past:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jobs/myjob</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jobs/myjob</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yaml</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#6A737D;"># .metadata and .spec omitted</span></span>
<span class="line"><span style="color:#85E89D;">status</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">conditions</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">lastProbeTime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2021-02-05T13:14:33Z&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">lastTransitionTime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2021-02-05T13:14:33Z&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">status</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;True&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Suspended</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">startTime</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2021-02-05T13:13:48Z&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#6A737D;"># .metadata and .spec omitted</span></span>
<span class="line"><span style="color:#22863A;">status</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">conditions</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">lastProbeTime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2021-02-05T13:14:33Z&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">lastTransitionTime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2021-02-05T13:14:33Z&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">status</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;True&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Suspended</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">startTime</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2021-02-05T13:13:48Z&quot;</span></span></code></pre></div><p>The Job condition of type &quot;Suspended&quot; with status &quot;True&quot; means the Job is suspended; the <code>lastTransitionTime</code> field can be used to determine how long the Job has been suspended for. If the status of that condition is &quot;False&quot;, then the Job was previously suspended and is now running. If such a condition does not exist in the Job&#39;s status, the Job has never been stopped.</p><p>Events are also created when the Job is suspended and resumed:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">describe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jobs/myjob</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">describe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jobs/myjob</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Name:           myjob</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span>
<span class="line"><span style="color:#e1e4e8;">Events:</span></span>
<span class="line"><span style="color:#e1e4e8;">  Type    Reason            Age   From            Message</span></span>
<span class="line"><span style="color:#e1e4e8;">  ----    ------            ----  ----            -------</span></span>
<span class="line"><span style="color:#e1e4e8;">  Normal  SuccessfulCreate  12m   job-controller  Created pod: myjob-hlrpl</span></span>
<span class="line"><span style="color:#e1e4e8;">  Normal  SuccessfulDelete  11m   job-controller  Deleted pod: myjob-hlrpl</span></span>
<span class="line"><span style="color:#e1e4e8;">  Normal  Suspended         11m   job-controller  Job suspended</span></span>
<span class="line"><span style="color:#e1e4e8;">  Normal  SuccessfulCreate  3s    job-controller  Created pod: myjob-jvb44</span></span>
<span class="line"><span style="color:#e1e4e8;">  Normal  Resumed           3s    job-controller  Job resumed</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Name:           myjob</span></span>
<span class="line"><span style="color:#24292e;">...</span></span>
<span class="line"><span style="color:#24292e;">Events:</span></span>
<span class="line"><span style="color:#24292e;">  Type    Reason            Age   From            Message</span></span>
<span class="line"><span style="color:#24292e;">  ----    ------            ----  ----            -------</span></span>
<span class="line"><span style="color:#24292e;">  Normal  SuccessfulCreate  12m   job-controller  Created pod: myjob-hlrpl</span></span>
<span class="line"><span style="color:#24292e;">  Normal  SuccessfulDelete  11m   job-controller  Deleted pod: myjob-hlrpl</span></span>
<span class="line"><span style="color:#24292e;">  Normal  Suspended         11m   job-controller  Job suspended</span></span>
<span class="line"><span style="color:#24292e;">  Normal  SuccessfulCreate  3s    job-controller  Created pod: myjob-jvb44</span></span>
<span class="line"><span style="color:#24292e;">  Normal  Resumed           3s    job-controller  Job resumed</span></span></code></pre></div><p>The last four events, particularly the &quot;Suspended&quot; and &quot;Resumed&quot; events, are directly a result of toggling the <code>.spec.suspend</code> field. In the time between these two events, we see that no Pods were created, but Pod creation restarted as soon as the Job was resumed.</p><h3 id="mutable-scheduling-directives" tabindex="-1">Mutable Scheduling Directives <a class="header-anchor" href="#mutable-scheduling-directives" aria-label="Permalink to &quot;Mutable Scheduling Directives&quot;">​</a></h3><p><em>FEATURE STATE</em>: <code>Kubernetes v1.27 [stable]</code></p><p>In most cases, a parallel job will want the pods to run with constraints, like all in the same zone, or all either on GPU model x or y but not a mix of both.</p><p>The <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#suspending-a-job" target="_blank" rel="noreferrer">suspend</a> field is the first step towards achieving those semantics. Suspend allows a custom queue controller to decide when a job should start; However, once a job is unsuspended, a custom queue controller has no influence on where the pods of a job will actually land.</p><p>This feature allows updating a Job&#39;s scheduling directives before it starts, which gives custom queue controllers the ability to influence pod placement while at the same time offloading actual pod-to-node assignment to kube-scheduler. This is allowed only for suspended Jobs that have never been unsuspended before.</p><p>The fields in a Job&#39;s pod template that can be updated are node affinity, node selector, tolerations, labels, annotations and <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/pod-scheduling-readiness/" target="_blank" rel="noreferrer">scheduling gates</a>.</p><h3 id="specifying-your-own-pod-selector" tabindex="-1">Specifying your own Pod selector <a class="header-anchor" href="#specifying-your-own-pod-selector" aria-label="Permalink to &quot;Specifying your own Pod selector&quot;">​</a></h3><p>Normally, when you create a Job object, you do not specify <code>.spec.selector</code>. The system defaulting logic adds this field when the Job is created. It picks a selector value that will not overlap with any other jobs.</p><p>However, in some cases, you might need to override this automatically set selector. To do this, you can specify the <code>.spec.selector</code> of the Job.</p><p>Be very careful when doing this. If you specify a label selector which is not unique to the pods of that Job, and which matches unrelated Pods, then pods of the unrelated job may be deleted, or this Job may count other Pods as completing it, or one or both Jobs may refuse to create Pods or run to completion. If a non-unique selector is chosen, then other controllers (e.g. ReplicationController) and their Pods may behave in unpredictable ways too. Kubernetes will not stop you from making a mistake when specifying <code>.spec.selector</code>.</p><p>Here is an example of a case when you might want to use this feature.</p><p>Say Job <code>old</code> is already running. You want existing Pods to keep running, but you want the rest of the Pods it creates to use a different pod template and for the Job to have a new name. You cannot update the Job because these fields are not updatable. Therefore, you delete Job old but leave its pods running, using <code>kubectl delete jobs/old --cascade=orphan</code>. Before deleting it, you make a note of what selector it uses:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">job</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">old</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">job</span><span style="color:#24292E;"> </span><span style="color:#032F62;">old</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yaml</span></span></code></pre></div><p>The output is similar to this:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">old</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">selector</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">matchLabels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">batch.kubernetes.io/controller-uid</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">a8f3d00d-c6d2-11e5-9f87-42010af00002</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">old</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">selector</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">matchLabels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">batch.kubernetes.io/controller-uid</span><span style="color:#24292E;">: </span><span style="color:#032F62;">a8f3d00d-c6d2-11e5-9f87-42010af00002</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span></code></pre></div><p>Then you create a new Job with name <code>new</code> and you explicitly specify the same selector. Since the existing Pods have label <code>batch.kubernetes.io/controller-uid=a8f3d00d-c6d2-11e5-9f87-42010af00002</code>, they are controlled by Job new as well.</p><p>You need to specify <code>manualSelector: true</code> in the new Job since you are not using the selector that the system normally generates for you automatically.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">new</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">manualSelector</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">selector</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">matchLabels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">batch.kubernetes.io/controller-uid</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">a8f3d00d-c6d2-11e5-9f87-42010af00002</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">new</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">manualSelector</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">selector</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">matchLabels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">batch.kubernetes.io/controller-uid</span><span style="color:#24292E;">: </span><span style="color:#032F62;">a8f3d00d-c6d2-11e5-9f87-42010af00002</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span></code></pre></div><p>The new Job itself will have a different uid from <code>a8f3d00d-c6d2-11e5-9f87-42010af00002</code>. Setting <code>manualSelector: true</code> tells the system that you know what you are doing and to allow this mismatch.</p><h3 id="job-tracking-with-finalizers" tabindex="-1">Job tracking with finalizers <a class="header-anchor" href="#job-tracking-with-finalizers" aria-label="Permalink to &quot;Job tracking with finalizers&quot;">​</a></h3><p><em>FEATURE STATE</em>: <code>Kubernetes v1.26 [stable]</code></p><p>The control plane keeps track of the Pods that belong to any Job and notices if any such Pod is removed from the API server. To do that, the Job controller creates Pods with the finalizer <code>batch.kubernetes.io/job-tracking</code>. The controller removes the finalizer only after the Pod has been accounted for in the Job status, allowing the Pod to be removed by other controllers or users.</p><h3 id="elastic-indexed-jobs" tabindex="-1">Elastic Indexed Jobs <a class="header-anchor" href="#elastic-indexed-jobs" aria-label="Permalink to &quot;Elastic Indexed Jobs&quot;">​</a></h3><p><em>FEATURE STATE</em>: <code>Kubernetes v1.27 [beta]</code></p><p>You can scale Indexed Jobs up or down by mutating both <code>.spec.parallelism</code> and <code>.spec.completions</code> together such that <code>.spec.parallelism == .spec.completions</code>. When the <code>ElasticIndexedJob</code> <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/" target="_blank" rel="noreferrer">feature gate</a> on the <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/" target="_blank" rel="noreferrer">API server</a> is disabled, <code>.spec.completions</code> is immutable.</p><p>Use cases for elastic Indexed Jobs include batch workloads which require scaling an indexed Job, such as MPI, Horovord, Ray, and PyTorch training jobs.</p><h3 id="delayed-creation-of-replacement-pods" tabindex="-1">Delayed creation of replacement pods <a class="header-anchor" href="#delayed-creation-of-replacement-pods" aria-label="Permalink to &quot;Delayed creation of replacement pods&quot;">​</a></h3><p><em>FEATURE STATE</em>: <code>Kubernetes v1.28 [alpha]</code></p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>You can only set <code>podReplacementPolicy</code> on Jobs if you enable the <code>JobPodReplacementPolicy</code> <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/" target="_blank" rel="noreferrer">feature gate</a>.</p></div><p>By default, the Job controller recreates Pods as soon they either fail or are terminating (have a deletion timestamp). This means that, at a given time, when some of the Pods are terminating, the number of running Pods for a Job can be greater than <code>parallelism</code> or greater than one Pod per index (if you are using an Indexed Job).</p><p>You may choose to create replacement Pods only when the terminating Pod is fully terminal (has <code>status.phase: Failed</code>). To do this, set the <code>.spec.podReplacementPolicy: Failed</code>. The default replacement policy depends on whether the Job has a <code>podFailurePolicy</code> set. With no Pod failure policy defined for a Job, omitting the <code>podReplacementPolicy</code> field selects the <code>TerminatingOrFailed</code> replacement policy: the control plane creates replacement Pods immediately upon Pod deletion (as soon as the control plane sees that a Pod for this Job has <code>deletionTimestamp</code> set). For Jobs with a Pod failure policy set, the default <code>podReplacementPolicy</code> is <code>Failed</code>, and no other value is permitted. See <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-failure-policy" target="_blank" rel="noreferrer">Pod failure policy</a> to learn more about Pod failure policies for Jobs.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">new</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">podReplacementPolicy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Failed</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">new</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">podReplacementPolicy</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Failed</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">...</span></span></code></pre></div><p>Provided your cluster has the feature gate enabled, you can inspect the <code>.status.terminating</code> field of a Job. The value of the field is the number of Pods owned by the Job that are currently terminating.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">jobs/myjob</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-o</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">jobs/myjob</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yaml</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Job</span></span>
<span class="line"><span style="color:#6A737D;"># .metadata and .spec omitted</span></span>
<span class="line"><span style="color:#85E89D;">status</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">terminating</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># three Pods are terminating and have not yet reached the Failed phase</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Job</span></span>
<span class="line"><span style="color:#6A737D;"># .metadata and .spec omitted</span></span>
<span class="line"><span style="color:#22863A;">status</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">terminating</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># three Pods are terminating and have not yet reached the Failed phase</span></span></code></pre></div><h2 id="alternatives" tabindex="-1">Alternatives <a class="header-anchor" href="#alternatives" aria-label="Permalink to &quot;Alternatives&quot;">​</a></h2><h3 id="bare-pods" tabindex="-1">Bare Pods <a class="header-anchor" href="#bare-pods" aria-label="Permalink to &quot;Bare Pods&quot;">​</a></h3><p>When the node that a Pod is running on reboots or fails, the pod is terminated and will not be restarted. However, a Job will create new Pods to replace terminated ones. For this reason, we recommend that you use a Job rather than a bare Pod, even if your application requires only a single Pod.</p><h3 id="replication-controller" tabindex="-1">Replication Controller <a class="header-anchor" href="#replication-controller" aria-label="Permalink to &quot;Replication Controller&quot;">​</a></h3><p>Jobs are complementary to <a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/" target="_blank" rel="noreferrer">Replication Controllers</a>. A Replication Controller manages Pods which are not expected to terminate (e.g. web servers), and a Job manages Pods that are expected to terminate (e.g. batch tasks).</p><p>As discussed in <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/" target="_blank" rel="noreferrer">Pod Lifecycle</a>, <code>Job</code> is only appropriate for pods with <code>RestartPolicy</code> equal to <code>OnFailure</code> or <code>Never</code>. (Note: If <code>RestartPolicy</code> is not set, the default value is <code>Always</code>.)</p><h3 id="single-job-starts-controller-pod" tabindex="-1">Single Job starts controller Pod <a class="header-anchor" href="#single-job-starts-controller-pod" aria-label="Permalink to &quot;Single Job starts controller Pod&quot;">​</a></h3><p>Another pattern is for a single Job to create a Pod which then creates other Pods, acting as a sort of custom controller for those Pods. This allows the most flexibility, but may be somewhat complicated to get started with and offers less integration with Kubernetes.</p><p>One example of this pattern would be a Job which starts a Pod which runs a script that in turn starts a Spark master controller (see <a href="https://github.com/kubernetes/examples/tree/master/staging/spark/README.md" target="_blank" rel="noreferrer">spark example</a>), runs a spark driver, and then cleans up.</p><p>An advantage of this approach is that the overall process gets the completion guarantee of a Job object, but maintains complete control over what Pods are created and how work is assigned to them.</p><h2 id="what-s-next" tabindex="-1">What&#39;s next <a class="header-anchor" href="#what-s-next" aria-label="Permalink to &quot;What&#39;s next&quot;">​</a></h2><ul><li><p>Learn about <a href="https://kubernetes.io/docs/concepts/workloads/pods" target="_blank" rel="noreferrer">Pods</a>.</p></li><li><p>Read about different ways of running Jobs:</p><ul><li><a href="https://kubernetes.io/docs/tasks/job/coarse-parallel-processing-work-queue/" target="_blank" rel="noreferrer">Coarse Parallel Processing Using a Work Queue</a></li><li><a href="https://kubernetes.io/docs/tasks/job/fine-parallel-processing-work-queue/" target="_blank" rel="noreferrer">Fine Parallel Processing Using a Work Queue</a></li><li>Use an <a href="https://kubernetes.io/docs/tasks/job/indexed-parallel-processing-static/" target="_blank" rel="noreferrer">indexed Job for parallel processing with static work assignment</a></li><li>Create multiple Jobs based on a template: <a href="https://kubernetes.io/docs/tasks/job/parallel-processing-expansion/" target="_blank" rel="noreferrer">Parallel Processing using Expansions</a></li></ul></li><li><p>Follow the links within <a href="https://kubernetes.io/docs/concepts/workloads/controllers/job/#clean-up-finished-jobs-automatically" target="_blank" rel="noreferrer">Clean up finished jobs automatically</a> to learn more about how your cluster can clean up completed and / or failed tasks.</p></li><li><p><code>Job</code> is part of the Kubernetes REST API. Read the <a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/" target="_blank" rel="noreferrer">Job</a> object definition to understand the API for jobs.</p></li><li><p>Read about <a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/" target="_blank" rel="noreferrer">CronJob</a>, which you can use to define a series of Jobs that will run based on a schedule, similar to the UNIX tool <code>cron</code>.</p></li><li><p>Practice how to configure handling of retriable and non-retriable pod failures using <code>podFailurePolicy</code>, based on the step-by-step <a href="https://kubernetes.io/docs/tasks/job/pod-failure-policy/" target="_blank" rel="noreferrer">examples</a>.</p></li></ul>`,201),p=[l];function t(c,r,i,d,y,h){return e(),a("div",null,p)}const b=s(o,[["render",t]]);export{E as __pageData,b as default};
