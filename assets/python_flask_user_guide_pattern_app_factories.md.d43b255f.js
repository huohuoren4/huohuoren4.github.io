import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.01af844e.js";const u=JSON.parse('{"title":"Application Factories","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/pattern/app_factories.md","filePath":"python/flask/user_guide/pattern/app_factories.md","lastUpdated":1693404008000}'),e={name:"python/flask/user_guide/pattern/app_factories.md"},o=p(`<h1 id="application-factories" tabindex="-1">Application Factories <a class="header-anchor" href="#application-factories" aria-label="Permalink to &quot;Application Factories {#application-factories}&quot;">​</a></h1><p>If you are already using packages and blueprints for your application (<a href="/python/flask/user_guide/blueprint#modular-applications-with-blueprints">Modular Applications with Blueprints</a>) there are a couple of really nice ways to further improve the experience. A common pattern is creating the application object when the blueprint is imported. But if you move the creation of this object into a function, you can then create multiple instances of this app later.</p><p>So why would you want to do this?</p><ol><li><p>Testing. You can have instances of the application with different settings to test every case.</p></li><li><p>Multiple instances. Imagine you want to run different versions of the same application. Of course you could have multiple instances with different configs set up in your webserver, but if you use factories, you can have multiple instances of the same application running in the same application process which can be handy.</p></li></ol><p>So how would you then actually implement that?</p><h2 id="basic-factories" tabindex="-1">Basic Factories <a class="header-anchor" href="#basic-factories" aria-label="Permalink to &quot;Basic Factories {#basic-factories}&quot;">​</a></h2><p>The idea is to set up the application in a function. Like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create_app</span><span style="color:#E1E4E8;">(config_filename):</span></span>
<span class="line"><span style="color:#E1E4E8;">    app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.config.from_pyfile(config_filename)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> yourapplication.model </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> db</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.init_app(app)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> yourapplication.views.admin </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> admin</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> yourapplication.views.frontend </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> frontend</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.register_blueprint(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.register_blueprint(frontend)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> app</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_app</span><span style="color:#24292E;">(config_filename):</span></span>
<span class="line"><span style="color:#24292E;">    app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    app.config.from_pyfile(config_filename)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> yourapplication.model </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> db</span></span>
<span class="line"><span style="color:#24292E;">    db.init_app(app)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> yourapplication.views.admin </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> admin</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> yourapplication.views.frontend </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> frontend</span></span>
<span class="line"><span style="color:#24292E;">    app.register_blueprint(admin)</span></span>
<span class="line"><span style="color:#24292E;">    app.register_blueprint(frontend)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> app</span></span></code></pre></div><p>The downside is that you cannot use the application object in the blueprints at import time. You can however use it from within a request. How do you get access to the application with the config? Use <code>current_app</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> current_app, Blueprint, render_template</span></span>
<span class="line"><span style="color:#E1E4E8;">admin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Blueprint(</span><span style="color:#9ECBFF;">&#39;admin&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">url_prefix</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;/admin&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@admin.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(current_app.config[</span><span style="color:#9ECBFF;">&#39;INDEX_TEMPLATE&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> current_app, Blueprint, render_template</span></span>
<span class="line"><span style="color:#24292E;">admin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Blueprint(</span><span style="color:#032F62;">&#39;admin&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">, </span><span style="color:#E36209;">url_prefix</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;/admin&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@admin.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(current_app.config[</span><span style="color:#032F62;">&#39;INDEX_TEMPLATE&#39;</span><span style="color:#24292E;">])</span></span></code></pre></div><p>Here we look up the name of a template in the config.</p><h2 id="factories-extensions" tabindex="-1">Factories &amp; Extensions <a class="header-anchor" href="#factories-extensions" aria-label="Permalink to &quot;Factories &amp; Extensions {#factories-extensions}&quot;">​</a></h2><p>It’s preferable to create your extensions and app factories so that the extension object does not initially get bound to the application.</p><p>Using <a href="https://flask-sqlalchemy.palletsprojects.com/" target="_blank" rel="noreferrer">Flask-SQLAlchemy</a>, as an example, you should not do something along those lines:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create_app</span><span style="color:#E1E4E8;">(config_filename):</span></span>
<span class="line"><span style="color:#E1E4E8;">    app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.config.from_pyfile(config_filename)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SQLAlchemy(app)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_app</span><span style="color:#24292E;">(config_filename):</span></span>
<span class="line"><span style="color:#24292E;">    app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    app.config.from_pyfile(config_filename)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SQLAlchemy(app)</span></span></code></pre></div><p>But, rather, in <code>model.py</code> (or equivalent):</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> SQLAlchemy()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SQLAlchemy()</span></span></code></pre></div><p>and in your <code>application.py</code> (or equivalent):</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create_app</span><span style="color:#E1E4E8;">(config_filename):</span></span>
<span class="line"><span style="color:#E1E4E8;">    app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.config.from_pyfile(config_filename)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> yourapplication.model </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> db</span></span>
<span class="line"><span style="color:#E1E4E8;">    db.init_app(app)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_app</span><span style="color:#24292E;">(config_filename):</span></span>
<span class="line"><span style="color:#24292E;">    app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    app.config.from_pyfile(config_filename)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> yourapplication.model </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> db</span></span>
<span class="line"><span style="color:#24292E;">    db.init_app(app)</span></span></code></pre></div><p>Using this design pattern, no application-specific state is stored on the extension object, so one extension object can be used for multiple apps. For more information about the design of extensions refer to <a href="/python/flask/additional_note/flask_extension#flask-extension-development">Flask Extension Development</a>.</p><h2 id="using-applications" tabindex="-1">Using Applications <a class="header-anchor" href="#using-applications" aria-label="Permalink to &quot;Using Applications {#using-applications}&quot;">​</a></h2><p>To run such an application, you can use the flask command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flask</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--app</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flask</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--app</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span></span></code></pre></div><p>Flask will automatically detect the factory if it is named <code>create_app</code> or <code>make_app</code> in <code>hello</code>. You can also pass arguments to the factory like this:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flask</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--app</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello:create_app</span><span style="color:#E1E4E8;">(local_auth</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">True</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">run</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flask</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--app</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello:create_app</span><span style="color:#24292E;">(local_auth</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">True</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">run</span></span></code></pre></div><p>Then the <code>create_app</code> factory in <code>myapp</code> is called with the keyword argument <code>local_auth=True</code>. See <a href="/python/flask/user_guide/cmd_interface#command-line-interface">Command Line Interface</a> for more detail.</p><h2 id="factory-improvements" tabindex="-1">Factory Improvements <a class="header-anchor" href="#factory-improvements" aria-label="Permalink to &quot;Factory Improvements {#factory-improvements}&quot;">​</a></h2><p>The factory function above is not very clever, but you can improve it. The following changes are straightforward to implement:</p><ol><li><p>Make it possible to pass in configuration values for unit tests so that you don’t have to create config files on the filesystem.</p></li><li><p>Call a function from a blueprint when the application is setting up so that you have a place to modify attributes of the application (like hooking in before/after request handlers etc.)</p></li><li><p>Add in WSGI middlewares when the application is being created if necessary.</p></li></ol>`,29),l=[o];function t(c,r,i,y,E,d){return a(),n("div",null,l)}const f=s(e,[["render",t]]);export{u as __pageData,f as default};
