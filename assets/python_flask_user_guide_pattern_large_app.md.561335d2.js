import{_ as s,o as a,c as n,V as l}from"./chunks/framework.48c56699.js";const F=JSON.parse('{"title":"Large Applications as Packages","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/pattern/large_app.md","filePath":"python/flask/user_guide/pattern/large_app.md"}'),e={name:"python/flask/user_guide/pattern/large_app.md"},p=l(`<h1 id="large-applications-as-packages" tabindex="-1">Large Applications as Packages <a class="header-anchor" href="#large-applications-as-packages" aria-label="Permalink to &quot;Large Applications as Packages&quot;">​</a></h1><p>Imagine a simple flask application structure that looks like this:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">/yourapplication</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">yourapplication.py</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">/static</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">style.css</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">/templates</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">layout.html</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">index.html</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">login.html</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">...</span></span></code></pre></div><p>While this is fine for small applications, for larger applications it’s a good idea to use a package instead of a module. The <a href="https://flask.palletsprojects.com/en/2.3.x/tutorial/" target="_blank" rel="noreferrer">Tutorial</a> is structured to use the package pattern, see the <a href="https://github.com/pallets/flask/tree/main/examples/tutorial" target="_blank" rel="noreferrer">example code</a>.</p><h2 id="simple-packages" tabindex="-1">Simple Packages <a class="header-anchor" href="#simple-packages" aria-label="Permalink to &quot;Simple Packages&quot;">​</a></h2><p>To convert that into a larger one, just create a new folder <code>yourapplication</code> inside the existing one and move everything below it. Then rename <code>yourapplication.py</code> to <code>__init__.py</code>. (Make sure to delete all <code>.pyc</code> files first, otherwise things would most likely break)</p><p>You should then end up with something like that:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">/yourapplication</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">/yourapplication</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">__init__.py</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">/static</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">style.css</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">/templates</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">layout.html</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">index.html</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">login.html</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">...</span></span></code></pre></div><p>But how do you run your application now? The naive <code>python yourapplication/__init__.py</code> will not work. Let’s just say that Python does not want modules in packages to be the startup file. But that is not a big problem, just add a new file called <code>pyproject.toml</code> next to the inner <code>yourapplication</code> folder with the following contents:</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">project</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">yourapplication</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">dependencies </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">flask</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">build-system</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">requires </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">flit_core&lt;4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">build-backend </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">flit_core.buildapi</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>Install your application so it is importable:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span></code></pre></div><p>To use the <code>flask</code> command and run your application you need to set the <code>--app</code> option that tells Flask where to find the application instance:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">flask</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--app</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yourapplication</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span></span></code></pre></div><p>What did we gain from this? Now we can restructure the application a bit into multiple modules. The only thing you have to remember is the following quick checklist:</p><ol><li><p>the Flask application object creation has to be in the <code>__init__.py</code> file. That way each module can import it safely and the <code>__name__</code> variable will resolve to the correct package.</p></li><li><p>all the view functions (the ones with a <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask.route" target="_blank" rel="noreferrer">route()</a> decorator on top) have to be imported in the <code>__init__.py</code> file. Not the object itself, but the module it is in. Import the view module after the application object is created.</p></li></ol><p>Here’s an example <code>__init__.py</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> flask </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Flask</span></span>
<span class="line"><span style="color:#A6ACCD;">app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Flask</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">__name__</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> yourapplication</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">views</span></span></code></pre></div><p>And this is what <code>views.py</code> would look like:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> yourapplication </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">index</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>You should then end up with something like that:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">/yourapplication</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">pyproject.toml</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">/yourapplication</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">__init__.py</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">views.py</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">/static</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">style.css</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">/templates</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">layout.html</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">index.html</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">login.html</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">...</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Circular Imports</p><p>Every Python programmer hates them, and yet we just added some: circular imports (That’s when two modules depend on each other. In this case <code>views.py</code> depends on <code>__init__.py</code>). Be advised that this is a bad idea in general but here it is actually fine. The reason for this is that we are not actually using the views in <code>__init__.py</code> and just ensuring the module is imported and we are doing that at the bottom of the file.</p></div><h2 id="working-with-blueprints" tabindex="-1">Working with Blueprints <a class="header-anchor" href="#working-with-blueprints" aria-label="Permalink to &quot;Working with Blueprints&quot;">​</a></h2><p>If you have larger applications it’s recommended to divide them into smaller groups where each group is implemented with the help of a blueprint. For a gentle introduction into this topic refer to the <a href="https://flask.palletsprojects.com/en/2.3.x/blueprints/" target="_blank" rel="noreferrer">Modular Applications with Blueprints</a> chapter of the documentation.</p>`,25),o=[p];function t(c,i,r,y,h,C){return a(),n("div",null,o)}const D=s(e,[["render",t]]);export{F as __pageData,D as default};
