import{_ as e,o as t,c as s,V as n}from"./chunks/framework.d3b95951.js";const y=JSON.parse('{"title":"How to install and use plugins","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/use_plugin.md","filePath":"python/pytest/how_to_guides/use_plugin.md"}'),a={name:"python/pytest/how_to_guides/use_plugin.md"},i=n(`<h1 id="how-to-install-and-use-plugins" tabindex="-1">How to install and use plugins <a class="header-anchor" href="#how-to-install-and-use-plugins" aria-label="Permalink to &quot;How to install and use plugins&quot;">​</a></h1><p>This section talks about installing and using third party plugins. For writing your own plugins, please refer to Writing plugins.</p><p>Installing a third party plugin can be easily done with <code>pip</code>:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-NAME</span></span>
<span class="line"><span style="color:#FFCB6B;">pip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">uninstall</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-NAME</span></span></code></pre></div><p>If a plugin is installed, <code>pytest</code> automatically finds and integrates it, there is no need to activate it.</p><p>Here is a little annotated list for some popular plugins:</p><ul><li><p>pytest-django: write tests for django apps, using pytest integration.</p></li><li><p>pytest-twisted: write tests for twisted apps, starting a reactor and processing deferreds from test functions.</p></li><li><p>pytest-cov: coverage reporting, compatible with distributed testing</p></li><li><p>pytest-xdist: to distribute tests to CPUs and remote hosts, to run in boxed mode which allows to survive segmentation faults, to run in looponfailing mode, automatically re-running failing tests on file changes.</p></li><li><p>pytest-instafail: to report failures while the test run is happening.</p></li><li><p>pytest-bdd: to write tests using behaviour-driven testing.</p></li><li><p>pytest-timeout: to timeout tests based on function marks or global definitions.</p></li><li><p>pytest-pep8: a --pep8 option to enable PEP8 compliance checking.</p></li><li><p>pytest-flakes: check source code with pyflakes.</p></li><li><p>allure-pytest: report test results via allure-framework.</p></li></ul><p>To see a complete list of all plugins with their latest testing status against different pytest and Python versions, please visit Plugin List.</p><p>You may also discover more plugins through a pytest- pypi.org search.</p><h2 id="requiring-loading-plugins-in-a-test-module-or-conftest-file" tabindex="-1">Requiring/Loading plugins in a test module or conftest file <a class="header-anchor" href="#requiring-loading-plugins-in-a-test-module-or-conftest-file" aria-label="Permalink to &quot;Requiring/Loading plugins in a test module or conftest file&quot;">​</a></h2><p>You can require plugins in a test module or a conftest file using pytest_plugins:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pytest_plugins </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myapp.testsupport.myplugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,)</span></span></code></pre></div><p>When the test module or conftest plugin is loaded the specified plugins will be loaded as well.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Requiring plugins using a <code>pytest_plugins</code> variable in non-root <code>conftest.py</code> files is deprecated. See full explanation in the Writing plugins section.</p></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The name <code>pytest_plugins</code> is reserved and should not be used as a name for a custom plugin module.</p></div><h2 id="finding-out-which-plugins-are-active" tabindex="-1">Finding out which plugins are active <a class="header-anchor" href="#finding-out-which-plugins-are-active" aria-label="Permalink to &quot;Finding out which plugins are active&quot;">​</a></h2><p>If you want to find out which plugins are active in your environment you can type:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--trace-config</span></span></code></pre></div><p>and will get an extended test header which shows activated plugins and their names. It will also print local plugins aka conftest.py files when they are loaded.</p><h2 id="deactivating-unregistering-a-plugin-by-name" tabindex="-1">Deactivating / unregistering a plugin by name <a class="header-anchor" href="#deactivating-unregistering-a-plugin-by-name" aria-label="Permalink to &quot;Deactivating / unregistering a plugin by name&quot;">​</a></h2><p>You can prevent plugins from loading or unregister them:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">no:NAME</span></span></code></pre></div><p>This means that any subsequent try to activate/load the named plugin will not work.</p><p>If you want to unconditionally disable a plugin for a project, you can add this option to your <code>pytest.ini</code> file:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">addopts</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> -p no:NAME</span></span></code></pre></div><p>Alternatively to disable it only in certain environments (for example in a CI server), you can set <code>PYTEST_ADDOPTS</code> environment variable to <code>-p no:name</code>.</p><p>See Finding out which plugins are active for how to obtain the name of a plugin.</p>`,27),l=[i];function o(p,r,c,u,d,g){return t(),s("div",null,l)}const m=e(a,[["render",o]]);export{y as __pageData,m as default};
