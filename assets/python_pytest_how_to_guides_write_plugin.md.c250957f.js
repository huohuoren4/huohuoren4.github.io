import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"Writing plugins","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/write_plugin.md","filePath":"python/pytest/how_to_guides/write_plugin.md","lastUpdated":1692720083000}'),o={name:"python/pytest/how_to_guides/write_plugin.md"},l=e(`<h1 id="writing-plugins" tabindex="-1">Writing plugins <a class="header-anchor" href="#writing-plugins" aria-label="Permalink to &quot;Writing plugins {#writing-plugins}&quot;">​</a></h1><p>It is easy to implement <a href="/python/pytest/how_to_guides/write_plugin#conftest-py-local-per-directory-plugins">local conftest plugins</a> for your own project or <a href="/python/pytest/how_to_guides/write_plugin#making-your-plugin-installable-by-others">pip-installable plugins</a> that can be used throughout many projects, including third party projects. Please refer to <a href="/python/pytest/how_to_guides/use_plugin#how-to-install-and-use-plugins">How to install and use plugins</a> if you only want to use but not write plugins.</p><p>A plugin contains one or multiple hook functions. <a href="/python/pytest/how_to_guides/hook_func#writing-hook-functions">Writing hooks</a> explains the basics and details of how you can write a hook function yourself. <code>pytest</code> implements all aspects of configuration, collection, running and reporting by calling well specified hooks of the following plugins:</p><ul><li><p>builtin plugins: loaded from pytest’s internal <code>_pytest</code> directory.</p></li><li><p><a href="/python/pytest/how_to_guides/use_plugin#how-to-install-and-use-plugins">external plugins</a>: modules discovered through <a href="/python/pytest/how_to_guides/write_plugin#making-your-plugin-installable-by-others">setuptools entry points</a></p></li><li><p><a href="/python/pytest/how_to_guides/write_plugin#conftest-py-local-per-directory-plugins">conftest.py plugins</a>: modules auto-discovered in test directories</p></li></ul><p>In principle, each hook call is a <code>1:N</code> Python function call where N is the number of registered implementation functions for a given specification. All specifications and implementations follow the <code>pytest_</code> prefix naming convention, making them easy to distinguish and find.</p><h2 id="plugin-discovery-order-at-tool-startup" tabindex="-1">Plugin discovery order at tool startup <a class="header-anchor" href="#plugin-discovery-order-at-tool-startup" aria-label="Permalink to &quot;Plugin discovery order at tool startup {#plugin-discovery-order-at-tool-startup}&quot;">​</a></h2><p><code>pytest</code> loads plugin modules at tool startup in the following way:</p><ol><li><p>by scanning the command line for the <code>-p no:name</code> option and blocking that plugin from being loaded (even builtin plugins can be blocked this way). This happens before normal command-line parsing.</p></li><li><p>by loading all builtin plugins.</p></li><li><p>by scanning the command line for the <code>-p name</code> option and loading the specified plugin. This happens before normal command-line parsing.</p></li><li><p>by loading all plugins registered through <a href="/python/pytest/how_to_guides/write_plugin#making-your-plugin-installable-by-others">setuptools entry points</a>.</p></li><li><p>by loading all plugins specified through the <code>PYTEST_PLUGINS</code> environment variable.</p></li><li><p>by loading all <code>conftest.py</code> files as inferred by the command line invocation:</p><ul><li><p>if no test paths are specified, use the current dir as a test path</p></li><li><p>if exists, load <code>conftest.py</code> and <code>test*/conftest.py</code> relative to the directory part of the first test path. After the <code>conftest.py</code> file is loaded, load all plugins specified in its <code>pytest_plugins</code> variable if present.</p></li></ul><p>Note that pytest does not find <code>conftest.py</code> files in deeper nested sub directories at tool startup. It is usually a good idea to keep your <code>conftest.py</code> file in the top level test or project root directory.</p></li><li><p>by recursively loading all plugins specified by the <code>pytest_plugins</code> variable in <code>conftest.py</code> files.</p></li></ol><h2 id="conftest-py-local-per-directory-plugins" tabindex="-1">conftest.py: local per-directory plugins <a class="header-anchor" href="#conftest-py-local-per-directory-plugins" aria-label="Permalink to &quot;conftest.py: local per-directory plugins {#conftest-py-local-per-directory-plugins}&quot;">​</a></h2><p>Local <code>conftest.py</code> plugins contain directory-specific hook implementations. Hook Session and test running activities will invoke all hooks defined in <code>conftest.py</code> files closer to the root of the filesystem. Example of implementing the <code>pytest_runtest_setup</code> hook so that is called for tests in the a sub directory but not for other directories:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">a/conftest.py:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest_runtest_setup</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># called for running each test in &#39;a&#39; directory</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&quot;setting up&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">a/test_sub.py:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_sub</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_flat.py:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_flat</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">a/conftest.py:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest_runtest_setup</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">item</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># called for running each test in &#39;a&#39; directory</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&quot;setting up&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">a/test_sub.py:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_sub</span><span style="color:#24292E;">()</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_flat.py:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_flat</span><span style="color:#24292E;">()</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">pass</span></span></code></pre></div><p>Here is how you might run it:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_flat.py</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--capture=no</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># will not show &quot;setting up&quot;</span></span>
<span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a/test_sub.py</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--capture=no</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># will show &quot;setting up&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_flat.py</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--capture=no</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># will not show &quot;setting up&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a/test_sub.py</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--capture=no</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># will show &quot;setting up&quot;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>If you have <code>conftest.py</code> files which do not reside in a python package directory (i.e. one containing an <code>__init__.py</code>) then “import conftest” can be ambiguous because there might be other <code>conftest.py</code> files as well on your <code>PYTHONPATH</code> or <code>sys.path</code>. It is thus good practice for projects to either put <code>conftest.py</code> under a package scope or to never import anything from a <code>conftest.py</code> file.</p><p>See also: <a href="/python/pytest/explanation/import_mechanism#pytest-import-mechanisms-and-sys-path-pythonpath">pytest import mechanisms and sys.path/PYTHONPATH</a>.</p></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Some hooks should be implemented only in plugins or <code>conftest.py</code> files situated at the tests root directory due to how pytest discovers plugins during startup, see the documentation of each hook for details.</p></div><h2 id="writing-your-own-plugin" tabindex="-1">Writing your own plugin <a class="header-anchor" href="#writing-your-own-plugin" aria-label="Permalink to &quot;Writing your own plugin {#writing-your-own-plugin}&quot;">​</a></h2><p>If you want to write a plugin, there are many real-life examples you can copy from:</p><ul><li><p>a custom collection example plugin: <a href="/python/pytest/further_topics/example_trick/work#a-basic-example-for-specifying-tests-in-yaml-files">A basic example for specifying tests in Yaml files</a></p></li><li><p>builtin plugins which provide pytest’s own functionality</p></li><li><p>many <a href="/python/pytest/reference_guides/plugin_list#plugin-list">external plugins</a> providing additional features</p></li></ul><p>All of these plugins implement hooks and/or <a href="/python/pytest/reference_guides/fixture_reference#fixtures-reference">fixtures</a> to extend and add functionality.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Make sure to check out the excellent <a href="https://github.com/pytest-dev/cookiecutter-pytest-plugin" target="_blank" rel="noreferrer">cookiecutter-pytest-plugin</a> project, which is a <a href="https://github.com/audreyr/cookiecutter" target="_blank" rel="noreferrer">cookiecutter template</a> for authoring plugins.</p><p>The template provides an excellent starting point with a working plugin, tests running with tox, a comprehensive README file as well as a pre-configured entry-point.</p></div><p>Also consider <a href="/python/pytest/further_topics/contribution#submitting-plugins-to-pytest-dev">contributing your plugin to pytest-dev</a> once it has some happy users other than yourself.</p><h2 id="making-your-plugin-installable-by-others" tabindex="-1">Making your plugin installable by others <a class="header-anchor" href="#making-your-plugin-installable-by-others" aria-label="Permalink to &quot;Making your plugin installable by others {#making-your-plugin-installable-by-others}&quot;">​</a></h2><p>If you want to make your plugin externally available, you may define a so-called entry point for your distribution so that <code>pytest</code> finds your plugin module. Entry points are a feature that is provided by <a href="https://setuptools.pypa.io/en/stable/index.html" target="_blank" rel="noreferrer">setuptools</a>.</p><p>pytest looks up the <code>pytest11</code> entrypoint to discover its plugins, thus you can make your plugin available by defining it in your <code>pyproject.toml</code> file.</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># sample ./pyproject.toml file</span></span>
<span class="line"><span style="color:#B392F0;">[build-system]</span></span>
<span class="line"><span style="color:#F97583;">requires</span><span style="color:#E1E4E8;"> = [</span><span style="color:#9ECBFF;">&quot;hatchling&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">build-backend</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&quot;hatchling.build&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">[project]</span></span>
<span class="line"><span style="color:#F97583;">name</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&quot;myproject&quot;</span></span>
<span class="line"><span style="color:#F97583;">classifiers</span><span style="color:#E1E4E8;"> = [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Framework :: Pytest&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">[project.entry-points.pytest11]</span></span>
<span class="line"><span style="color:#F97583;">myproject</span><span style="color:#E1E4E8;"> = </span><span style="color:#9ECBFF;">&quot;myproject.pluginmodule&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># sample ./pyproject.toml file</span></span>
<span class="line"><span style="color:#6F42C1;">[build-system]</span></span>
<span class="line"><span style="color:#D73A49;">requires</span><span style="color:#24292E;"> = [</span><span style="color:#032F62;">&quot;hatchling&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">build-backend</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&quot;hatchling.build&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">[project]</span></span>
<span class="line"><span style="color:#D73A49;">name</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&quot;myproject&quot;</span></span>
<span class="line"><span style="color:#D73A49;">classifiers</span><span style="color:#24292E;"> = [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Framework :: Pytest&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">[project.entry-points.pytest11]</span></span>
<span class="line"><span style="color:#D73A49;">myproject</span><span style="color:#24292E;"> = </span><span style="color:#032F62;">&quot;myproject.pluginmodule&quot;</span></span></code></pre></div><p>If a package is installed this way, <code>pytest</code> will load <code>myproject.pluginmodule</code> as a plugin which can define hooks. Confirm registration with <code>pytest --trace-config</code></p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Make sure to include <code>Framework :: Pytest</code> in your list of <a href="https://pypi.org/classifiers/" target="_blank" rel="noreferrer">PyPI classifiers</a> to make it easy for users to find your plugin.</p></div><h2 id="assertion-rewriting" tabindex="-1">Assertion Rewriting <a class="header-anchor" href="#assertion-rewriting" aria-label="Permalink to &quot;Assertion Rewriting {#assertion-rewriting}&quot;">​</a></h2><p>One of the main features of <code>pytest</code> is the use of plain assert statements and the detailed introspection of expressions upon assertion failures. This is provided by “assertion rewriting” which modifies the parsed AST before it gets compiled to bytecode. This is done via a <a href="https://peps.python.org/pep-0302/" target="_blank" rel="noreferrer">PEP 302</a> import hook which gets installed early on when <code>pytest</code> starts up and will perform this rewriting when modules get imported. However, since we do not want to test different bytecode from what you will run in production, this hook only rewrites test modules themselves (as defined by the <code>python_files</code> configuration option), and any modules which are part of plugins. Any other imported module will not be rewritten and normal assertion behaviour will happen.</p><p>If you have assertion helpers in other modules where you would need assertion rewriting to be enabled you need to ask <code>pytest</code> explicitly to rewrite this module before it gets imported.</p><ul><li><p><strong>register_assert_rewrite</strong>(<code>*names</code>)</p><p>Register one or more module names to be rewritten on import.</p><p>This function will make sure that this module or all modules inside the package will get their assert statements rewritten. Thus you should make sure to call this before the module is actually imported, usually in your <code>__init__.py</code> if you are a plugin using a package.</p><p><em>Parameters</em>:</p><ul><li><code>names (str)</code> – The module names to register.</li></ul></li></ul><p>This is especially important when you write a pytest plugin which is created using a package. The import hook only treats <code>conftest.py</code> files and any modules which are listed in the <code>pytest11</code> entrypoint as plugins. As an example consider the following package:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest_foo</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">.py</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest_foo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">plugin.py</span></span>
<span class="line"><span style="color:#E1E4E8;">pytest_foo</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">helper.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest_foo</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">.py</span></span>
<span class="line"><span style="color:#24292E;">pytest_foo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">plugin.py</span></span>
<span class="line"><span style="color:#24292E;">pytest_foo</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">helper.py</span></span></code></pre></div><p>With the following typical <code>setup.py</code> extract:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">setup(...,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">entry_points={&quot;pytest11&quot;:</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;foo = pytest_foo.plugin&quot;</span><span style="color:#E1E4E8;">]}, ...)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setup(...,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">entry_points={&quot;pytest11&quot;:</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;foo = pytest_foo.plugin&quot;</span><span style="color:#24292E;">]}, ...)</span></span></code></pre></div><p>In this case only <code>pytest_foo/plugin.py</code> will be rewritten. If the helper module also contains assert statements which need to be rewritten it needs to be marked as such, before it gets imported. This is easiest by marking it for rewriting inside the <code>__init__.py</code> module, which will always be imported first when a module inside a package is imported. This way <code>plugin.py</code> can still import <code>helper.py</code> normally. The contents of <code>pytest_foo/__init__.py</code> will then need to look like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pytest.register_assert_rewrite(</span><span style="color:#9ECBFF;">&quot;pytest_foo.helper&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pytest.register_assert_rewrite(</span><span style="color:#032F62;">&quot;pytest_foo.helper&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="requiring-loading-plugins-in-a-test-module-or-conftest-file" tabindex="-1">Requiring/Loading plugins in a test module or conftest file <a class="header-anchor" href="#requiring-loading-plugins-in-a-test-module-or-conftest-file" aria-label="Permalink to &quot;Requiring/Loading plugins in a test module or conftest file {#requiring-loading-plugins-in-a-test-module-or-conftest-file}&quot;">​</a></h2><p>You can require plugins in a test module or a <code>conftest.py</code> file using <code>pytest_plugins</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest_plugins </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;name1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;name2&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest_plugins </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;name1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;name2&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>When the test module or conftest plugin is loaded the specified plugins will be loaded as well. Any module can be blessed as a plugin, including internal application modules:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pytest_plugins </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;myapp.testsupport.myplugin&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pytest_plugins </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;myapp.testsupport.myplugin&quot;</span></span></code></pre></div><p><code>pytest_plugins</code> are processed recursively, so note that in the example above if <code>myapp.testsupport.myplugin</code> also declares <code>pytest_plugins</code>, the contents of the variable will also be loaded as plugins, and so on.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Requiring plugins using <code>pytest_plugins</code> variable in non-root <code>conftest.py</code> files is deprecated.</p><p>This is important because <code>conftest.py</code> files implement per-directory hook implementations, but once a plugin is imported, it will affect the entire directory tree. In order to avoid confusion, defining <code>pytest_plugins</code> in any <code>conftest.py</code> file which is not located in the tests root directory is deprecated, and will raise a warning.</p></div><p>This mechanism makes it easy to share fixtures within applications or even external applications without the need to create external plugins using the <code>setuptools</code>’s entry point technique.</p><p>Plugins imported by <code>pytest_plugins</code> will also automatically be marked for assertion rewriting (see <code>pytest.register_assert_rewrite()</code>). However for this to have any effect the module must not be imported already; if it was already imported at the time the <code>pytest_plugins</code> statement is processed, a warning will result and assertions inside the plugin will not be rewritten. To fix this you can either call <code>pytest.register_assert_rewrite()</code> yourself before the module is imported, or you can arrange the code to delay the importing until after the plugin is registered.</p><h2 id="accessing-another-plugin-by-name" tabindex="-1">Accessing another plugin by name <a class="header-anchor" href="#accessing-another-plugin-by-name" aria-label="Permalink to &quot;Accessing another plugin by name {#accessing-another-plugin-by-name}&quot;">​</a></h2><p>If a plugin wants to collaborate with code from another plugin it can obtain a reference through the plugin manager like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">plugin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.pluginmanager.get_plugin(</span><span style="color:#9ECBFF;">&quot;name_of_plugin&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">plugin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.pluginmanager.get_plugin(</span><span style="color:#032F62;">&quot;name_of_plugin&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>If you want to look at the names of existing plugins, use the <code>--trace-config</code> option.</p><h2 id="registering-custom-markers" tabindex="-1">Registering custom markers <a class="header-anchor" href="#registering-custom-markers" aria-label="Permalink to &quot;Registering custom markers {#registering-custom-markers}&quot;">​</a></h2><p>If your plugin uses any markers, you should register them so that they appear in pytest’s help text and do not cause spurious warnings. For example, the following plugin would register <code>cool_marker</code> and <code>mark_with</code> for all users:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_configure</span><span style="color:#E1E4E8;">(config):</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.addinivalue_line(</span><span style="color:#9ECBFF;">&quot;markers&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;cool_marker: this one is for cool tests.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.addinivalue_line(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;markers&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;mark_with(arg, arg2): this marker takes arguments.&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_configure</span><span style="color:#24292E;">(config):</span></span>
<span class="line"><span style="color:#24292E;">    config.addinivalue_line(</span><span style="color:#032F62;">&quot;markers&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;cool_marker: this one is for cool tests.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    config.addinivalue_line(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;markers&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;mark_with(arg, arg2): this marker takes arguments.&quot;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span></code></pre></div><h2 id="testing-plugins" tabindex="-1">Testing plugins <a class="header-anchor" href="#testing-plugins" aria-label="Permalink to &quot;Testing plugins {#testing-plugins}&quot;">​</a></h2><p>pytest comes with a plugin named <code>pytester</code> that helps you write tests for your plugin code. The plugin is disabled by default, so you will have to enable it before you can use it.</p><p>You can do so by adding the following line to a <code>conftest.py</code> file in your testing directory:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pytest_plugins </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;pytester&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pytest_plugins </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;pytester&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>Alternatively you can invoke pytest with the <code>-p pytester</code> command line option.</p><p>This will allow you to use the <code>pytester</code> fixture for testing your plugin code.</p><p>Let’s demonstrate what you can do with the plugin with an example. Imagine we developed a plugin that provides a fixture <code>hello</code> which yields a function and we can invoke this function with one optional parameter. It will return a string value of <code>Hello World!</code> if we do not supply a value or <code>Hello {value}!</code> if we do supply a string value.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_addoption</span><span style="color:#E1E4E8;">(parser):</span></span>
<span class="line"><span style="color:#E1E4E8;">    group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.getgroup(</span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    group.addoption(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;--name&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">dest</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">default</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;World&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Default &quot;name&quot; for hello().&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.config.getoption(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_hello</span><span style="color:#E1E4E8;">(name</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> name:</span></span>
<span class="line"><span style="color:#E1E4E8;">            name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.config.getoption(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Hello </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">name</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _hello</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_addoption</span><span style="color:#24292E;">(parser):</span></span>
<span class="line"><span style="color:#24292E;">    group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.getgroup(</span><span style="color:#032F62;">&quot;helloworld&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    group.addoption(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;--name&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">dest</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">default</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Default &quot;name&quot; for hello().&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.config.getoption(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_hello</span><span style="color:#24292E;">(name</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> name:</span></span>
<span class="line"><span style="color:#24292E;">            name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.config.getoption(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Hello </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">name</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _hello</span></span></code></pre></div><p>Now the <code>pytester</code> fixture provides a convenient API for creating temporary <code>conftest.py</code> files and test files. It also allows us to run the tests and return a result object, with which we can assert the tests’ outcomes.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_hello</span><span style="color:#E1E4E8;">(pytester):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Make sure that our plugin works.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># create a temporary conftest.py file</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytester.makeconftest(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        import pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">        @pytest.fixture(params=[</span></span>
<span class="line"><span style="color:#9ECBFF;">            &quot;Brianna&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">            &quot;Andreas&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">            &quot;Floris&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">        ])</span></span>
<span class="line"><span style="color:#9ECBFF;">        def name(request):</span></span>
<span class="line"><span style="color:#9ECBFF;">            return request.param</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># create a temporary pytest test file</span></span>
<span class="line"><span style="color:#E1E4E8;">    pytester.makepyfile(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">        def test_hello_default(hello):</span></span>
<span class="line"><span style="color:#9ECBFF;">            assert hello() == &quot;Hello World!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">        def test_hello_name(hello, name):</span></span>
<span class="line"><span style="color:#9ECBFF;">            assert hello(name) == &quot;Hello </span><span style="color:#79B8FF;">{0}</span><span style="color:#9ECBFF;">!&quot;.format(name)</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># run all tests with pytest</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pytester.runpytest()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># check that all 4 tests passed</span></span>
<span class="line"><span style="color:#E1E4E8;">    result.assert_outcomes(</span><span style="color:#FFAB70;">passed</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_hello</span><span style="color:#24292E;">(pytester):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Make sure that our plugin works.&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># create a temporary conftest.py file</span></span>
<span class="line"><span style="color:#24292E;">    pytester.makeconftest(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        import pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">        @pytest.fixture(params=[</span></span>
<span class="line"><span style="color:#032F62;">            &quot;Brianna&quot;,</span></span>
<span class="line"><span style="color:#032F62;">            &quot;Andreas&quot;,</span></span>
<span class="line"><span style="color:#032F62;">            &quot;Floris&quot;,</span></span>
<span class="line"><span style="color:#032F62;">        ])</span></span>
<span class="line"><span style="color:#032F62;">        def name(request):</span></span>
<span class="line"><span style="color:#032F62;">            return request.param</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># create a temporary pytest test file</span></span>
<span class="line"><span style="color:#24292E;">    pytester.makepyfile(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">        def test_hello_default(hello):</span></span>
<span class="line"><span style="color:#032F62;">            assert hello() == &quot;Hello World!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">        def test_hello_name(hello, name):</span></span>
<span class="line"><span style="color:#032F62;">            assert hello(name) == &quot;Hello </span><span style="color:#005CC5;">{0}</span><span style="color:#032F62;">!&quot;.format(name)</span></span>
<span class="line"><span style="color:#032F62;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># run all tests with pytest</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pytester.runpytest()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># check that all 4 tests passed</span></span>
<span class="line"><span style="color:#24292E;">    result.assert_outcomes(</span><span style="color:#E36209;">passed</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span></code></pre></div><p>Additionally it is possible to copy examples to the <code>pytester’s</code> isolated environment before running pytest on it. This way we can abstract the tested logic to separate files, which is especially useful for longer tests and/or longer <code>conftest.py</code> files.</p><p>Note that for <code>pytester.copy_example</code> to work we need to set <code>pytester_example_dir</code> in our <code>pytest.ini</code> to tell pytest where to look for example files.</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">pytester_example_dir</span><span style="color:#E1E4E8;"> = .</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">pytester_example_dir</span><span style="color:#24292E;"> = .</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_example.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">pytester</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">pytester.copy_example(</span><span style="color:#B392F0;">&quot;test_example.py&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">pytester.runpytest(</span><span style="color:#B392F0;">&quot;-k&quot;</span><span style="color:#B392F0;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;test_example&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_example</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_example.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_plugin</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">pytester</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">pytester.copy_example(</span><span style="color:#6F42C1;">&quot;test_example.py&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">pytester.runpytest(</span><span style="color:#6F42C1;">&quot;-k&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;test_example&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_example</span><span style="color:#24292E;">()</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">pass</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">configfile:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_example.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">..</span><span style="color:#E1E4E8;">                                                   [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">============================ </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">configfile:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_example.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">..</span><span style="color:#24292E;">                                                   [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">============================ </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span></code></pre></div><p>For more information about the result object that <code>runpytest()</code> returns, and the methods that it provides please check out the <code>RunResult</code> documentation.</p>`,69),p=[l];function t(c,r,i,y,u,d){return n(),a("div",null,p)}const g=s(o,[["render",t]]);export{h as __pageData,g as default};
