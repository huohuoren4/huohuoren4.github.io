import{_ as s,o as e,c as a,Q as o}from"./chunks/framework.01af844e.js";const E=JSON.parse('{"title":"Security Considerations","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/security.md","filePath":"python/flask/user_guide/security.md","lastUpdated":1693404008000}'),t={name:"python/flask/user_guide/security.md"},n=o(`<h1 id="security-considerations" tabindex="-1">Security Considerations <a class="header-anchor" href="#security-considerations" aria-label="Permalink to &quot;Security Considerations {#security-considerations}&quot;">​</a></h1><p>Web applications usually face all kinds of security problems and it’s very hard to get everything right. Flask tries to solve a few of these things for you, but there are a couple more you have to take care of yourself.</p><h2 id="cross-site-scripting-xss" tabindex="-1">Cross-Site Scripting (XSS) <a class="header-anchor" href="#cross-site-scripting-xss" aria-label="Permalink to &quot;Cross-Site Scripting (XSS) {#cross-site-scripting-xss}&quot;">​</a></h2><p>Cross site scripting is the concept of injecting arbitrary HTML (and with it JavaScript) into the context of a website. To remedy this, developers have to properly escape text so that it cannot include arbitrary HTML tags. For more information on that have a look at the Wikipedia article on <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noreferrer">Cross-Site Scripting</a>.</p><p>Flask configures Jinja2 to automatically escape all values unless explicitly told otherwise. This should rule out all XSS problems caused in templates, but there are still other places where you have to be careful:</p><ul><li><p>generating HTML without the help of Jinja2</p></li><li><p>calling <code>Markup</code> on data submitted by users</p></li><li><p>sending out HTML from uploaded files, never do that, use the <code>Content-Disposition: attachment</code> header to prevent that problem.</p></li><li><p>sending out textfiles from uploaded files. Some browsers are using content-type guessing based on the first few bytes so users could trick a browser to execute HTML.</p></li></ul><p>Another thing that is very important are unquoted attributes. While Jinja2 can protect you from XSS issues by escaping HTML, there is one thing it cannot protect you from: XSS by attribute injection. To counter this possible attack vector, be sure to always quote your attributes with either double or single quotes when using Jinja expressions in them:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{{ value }}&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{{ value }}&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>Why is this necessary? Because if you would not be doing that, an attacker could easily inject custom JavaScript handlers. For example an attacker could inject this piece of HTML+JavaScript:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">onmouseover</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">alert(document.cookie)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">onmouseover</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">alert(document.cookie)</span></span></code></pre></div><p>When the user would then move with the mouse over the input, the cookie would be presented to the user in an alert window. But instead of showing the cookie to the user, a good attacker might also execute any other JavaScript code. In combination with CSS injections the attacker might even make the element fill out the entire page so that the user would just have to have the mouse anywhere on the page to trigger the attack.</p><p>There is one class of XSS issues that Jinja’s escaping does not protect against. The <code>a</code> tag’s <code>href</code> attribute can contain a <code>javascript</code>: URI, which the browser will execute when clicked if not secured properly.</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{{ value }}&quot;</span><span style="color:#E1E4E8;">&gt;click here&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;javascript:alert(&#39;unsafe&#39;);&quot;</span><span style="color:#E1E4E8;">&gt;click here&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{{ value }}&quot;</span><span style="color:#24292E;">&gt;click here&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;javascript:alert(&#39;unsafe&#39;);&quot;</span><span style="color:#24292E;">&gt;click here&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>To prevent this, you’ll need to set the <a href="/python/flask/user_guide/security#content-security-policy-csp">Content Security Policy (CSP)</a> response header.</p><h2 id="cross-site-request-forgery-csrf" tabindex="-1">Cross-Site Request Forgery (CSRF) <a class="header-anchor" href="#cross-site-request-forgery-csrf" aria-label="Permalink to &quot;Cross-Site Request Forgery (CSRF) {#cross-site-request-forgery-csrf}&quot;">​</a></h2><p>Another big problem is CSRF. This is a very complex topic and I won’t outline it here in detail just mention what it is and how to theoretically prevent it.</p><p>If your authentication information is stored in cookies, you have implicit state management. The state of “being logged in” is controlled by a cookie, and that cookie is sent with each request to a page. Unfortunately that includes requests triggered by 3rd party sites. If you don’t keep that in mind, some people might be able to trick your application’s users with social engineering to do stupid things without them knowing.</p><p>Say you have a specific URL that, when you sent <code>POST</code> requests to will delete a user’s profile (say <code>http://example.com/user/delete</code>). If an attacker now creates a page that sends a post request to that page with some JavaScript they just have to trick some users to load that page and their profiles will end up being deleted.</p><p>Imagine you were to run Facebook with millions of concurrent users and someone would send out links to images of little kittens. When users would go to that page, their profiles would get deleted while they are looking at images of fluffy cats.</p><p>How can you prevent that? Basically for each request that modifies content on the server you would have to either use a one-time token and store that in the cookie and also transmit it with the form data. After receiving the data on the server again, you would then have to compare the two tokens and ensure they are equal.</p><p>Why does Flask not do that for you? The ideal place for this to happen is the form validation framework, which does not exist in Flask.</p><h2 id="json-security" tabindex="-1">JSON Security <a class="header-anchor" href="#json-security" aria-label="Permalink to &quot;JSON Security {#json-security}&quot;">​</a></h2><p>In Flask 0.10 and lower, <code>jsonify()</code> did not serialize top-level arrays to JSON. This was because of a security vulnerability in ECMAScript 4.</p><p>ECMAScript 5 closed this vulnerability, so only extremely old browsers are still vulnerable. All of these browsers have <a href="https://github.com/pallets/flask/issues/248#issuecomment-59934857" target="_blank" rel="noreferrer">other more serious vulnerabilities</a>, so this behavior was changed and <code>jsonify()</code> now supports serializing arrays.</p><h2 id="security-headers" tabindex="-1">Security Headers <a class="header-anchor" href="#security-headers" aria-label="Permalink to &quot;Security Headers {#security-headers}&quot;">​</a></h2><p>Browsers recognize various response headers in order to control security. We recommend reviewing each of the headers below for use in your application. The <a href="https://github.com/GoogleCloudPlatform/flask-talisman" target="_blank" rel="noreferrer">Flask-Talisman</a> extension can be used to manage HTTPS and the security headers for you.</p><h3 id="http-strict-transport-security-hsts" tabindex="-1">HTTP Strict Transport Security (HSTS) <a class="header-anchor" href="#http-strict-transport-security-hsts" aria-label="Permalink to &quot;HTTP Strict Transport Security (HSTS) {#http-strict-transport-security-hsts}&quot;">​</a></h3><p>Tells the browser to convert all HTTP requests to HTTPS, preventing man-in-the-middle (MITM) attacks.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">response.headers[</span><span style="color:#9ECBFF;">&#39;Strict-Transport-Security&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;max-age=31536000; includeSubDomains&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">response.headers[</span><span style="color:#032F62;">&#39;Strict-Transport-Security&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;max-age=31536000; includeSubDomains&#39;</span></span></code></pre></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security</a></li></ul><h3 id="content-security-policy-csp" tabindex="-1">Content Security Policy (CSP) <a class="header-anchor" href="#content-security-policy-csp" aria-label="Permalink to &quot;Content Security Policy (CSP) {#content-security-policy-csp}&quot;">​</a></h3><p>Tell the browser where it can load various types of resource from. This header should be used whenever possible, but requires some work to define the correct policy for your site. A very strict policy would be:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">response.headers[</span><span style="color:#9ECBFF;">&#39;Content-Security-Policy&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;default-src &#39;self&#39;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">response.headers[</span><span style="color:#032F62;">&#39;Content-Security-Policy&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default-src &#39;self&#39;&quot;</span></span></code></pre></div><ul><li><p><a href="https://csp.withgoogle.com/docs/index.html" target="_blank" rel="noreferrer">https://csp.withgoogle.com/docs/index.html</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></p></li></ul><h3 id="x-content-type-options" tabindex="-1">X-Content-Type-Options <a class="header-anchor" href="#x-content-type-options" aria-label="Permalink to &quot;X-Content-Type-Options {#x-content-type-options}&quot;">​</a></h3><p>Forces the browser to honor the response content type instead of trying to detect it, which can be abused to generate a cross-site scripting (XSS) attack.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">response.headers[</span><span style="color:#9ECBFF;">&#39;X-Content-Type-Options&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;nosniff&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">response.headers[</span><span style="color:#032F62;">&#39;X-Content-Type-Options&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;nosniff&#39;</span></span></code></pre></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options</a></li></ul><h3 id="x-frame-options" tabindex="-1">X-Frame-Options <a class="header-anchor" href="#x-frame-options" aria-label="Permalink to &quot;X-Frame-Options {#x-frame-options}&quot;">​</a></h3><p>Prevents external sites from embedding your site in an <code>iframe</code>. This prevents a class of attacks where clicks in the outer frame can be translated invisibly to clicks on your page’s elements. This is also known as “clickjacking”.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">response.headers[</span><span style="color:#9ECBFF;">&#39;X-Frame-Options&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;SAMEORIGIN&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">response.headers[</span><span style="color:#032F62;">&#39;X-Frame-Options&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;SAMEORIGIN&#39;</span></span></code></pre></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options</a></li></ul><h3 id="set-cookie-options" tabindex="-1">Set-Cookie options <a class="header-anchor" href="#set-cookie-options" aria-label="Permalink to &quot;Set-Cookie options {#set-cookie-options}&quot;">​</a></h3><p>These options can be added to a <code>Set-Cookie</code> header to improve their security. Flask has configuration options to set these on the session cookie. They can be set on other cookies too.</p><ul><li><p><code>Secure</code> limits cookies to HTTPS traffic only.</p></li><li><p><code>HttpOnly</code> protects the contents of cookies from being read with JavaScript.</p></li><li><p><code>SameSite</code> restricts how cookies are sent with requests from external sites. Can be set to <code>&#39;Lax&#39;</code> (recommended) or <code>&#39;Strict&#39;</code>. <code>Lax</code> prevents sending cookies with CSRF-prone requests from external sites, such as submitting a form. <code>Strict</code> prevents sending cookies with all external requests, including following regular links.</p></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.config.update(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">SESSION_COOKIE_SECURE</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">SESSION_COOKIE_HTTPONLY</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">SESSION_COOKIE_SAMESITE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Lax&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">response.set_cookie(</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;flask&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">secure</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">httponly</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">samesite</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Lax&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.config.update(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">SESSION_COOKIE_SECURE</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">SESSION_COOKIE_HTTPONLY</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">SESSION_COOKIE_SAMESITE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Lax&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">response.set_cookie(</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;flask&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">secure</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">httponly</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">, </span><span style="color:#E36209;">samesite</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Lax&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>Specifying <code>Expires</code> or <code>Max-Age</code> options, will remove the cookie after the given time, or the current time plus the age, respectively. If neither option is set, the cookie will be removed when the browser is closed.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># cookie expires after 10 minutes</span></span>
<span class="line"><span style="color:#E1E4E8;">response.set_cookie(</span><span style="color:#9ECBFF;">&#39;snakes&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">max_age</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">600</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># cookie expires after 10 minutes</span></span>
<span class="line"><span style="color:#24292E;">response.set_cookie(</span><span style="color:#032F62;">&#39;snakes&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;3&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">max_age</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">600</span><span style="color:#24292E;">)</span></span></code></pre></div><p>For the session cookie, if <code>session.permanent</code> is set, then <code>PERMANENT_SESSION_LIFETIME</code> is used to set the expiration. Flask’s default cookie implementation validates that the cryptographic signature is not older than this value. Lowering this value may help mitigate replay attacks, where intercepted cookies can be sent at a later time.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.config.update(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">PERMANENT_SESSION_LIFETIME</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">600</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/login&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">methods</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    session.clear()</span></span>
<span class="line"><span style="color:#E1E4E8;">    session[</span><span style="color:#9ECBFF;">&#39;user_id&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.id</span></span>
<span class="line"><span style="color:#E1E4E8;">    session.permanent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.config.update(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">PERMANENT_SESSION_LIFETIME</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">600</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/login&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">methods</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#24292E;">    session.clear()</span></span>
<span class="line"><span style="color:#24292E;">    session[</span><span style="color:#032F62;">&#39;user_id&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.id</span></span>
<span class="line"><span style="color:#24292E;">    session.permanent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">...</span></span></code></pre></div><p>Use <code>itsdangerous.TimedSerializer</code> to sign and validate other cookie values (or any values that need secure signatures).</p><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie</a></p></li></ul><h3 id="http-public-key-pinning-hpkp" tabindex="-1">HTTP Public Key Pinning (HPKP) <a class="header-anchor" href="#http-public-key-pinning-hpkp" aria-label="Permalink to &quot;HTTP Public Key Pinning (HPKP) {#http-public-key-pinning-hpkp}&quot;">​</a></h3><p>This tells the browser to authenticate with the server using only the specific certificate key to prevent MITM attacks.</p><div class="tip custom-block"><p class="custom-block-title">Warning</p><p>Be careful when enabling this, as it is very difficult to undo if you set up or upgrade your key incorrectly.</p></div><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning</a></li></ul><h2 id="copy-paste-to-terminal" tabindex="-1">Copy/Paste to Terminal <a class="header-anchor" href="#copy-paste-to-terminal" aria-label="Permalink to &quot;Copy/Paste to Terminal {#copy-paste-to-terminal}&quot;">​</a></h2><p>Hidden characters such as the backspace character (<code>\\b</code>, <code>^H</code>) can cause text to render differently in HTML than how it is interpreted if <a href="https://security.stackexchange.com/q/39118" target="_blank" rel="noreferrer">pasted into a terminal</a>.</p><p>For example, <code>import y\\bose\\bm\\bi\\bt\\be\\b</code> renders as <code>import yosemite</code> in HTML, but the backspaces are applied when pasted into a terminal, and it becomes <code>import os</code>.</p><p>If you expect users to copy and paste untrusted code from your site, such as from comments posted by users on a technical blog, consider applying extra filtering, such as replacing all \\b characters.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> body.replace(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\b</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> body.replace(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\b</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>Most modern terminals will warn about and remove hidden characters when pasting, so this isn’t strictly necessary. It’s also possible to craft dangerous commands in other ways that aren’t possible to filter. Depending on your site’s use case, it may be good to show a warning about copying code in general.</p>`,62),l=[n];function p(r,c,i,y,d,h){return e(),a("div",null,l)}const g=s(t,[["render",p]]);export{E as __pageData,g as default};
