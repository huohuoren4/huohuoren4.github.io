import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.01af844e.js";const q=JSON.parse('{"title":"Subclassing Flask","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/pattern/subclass_flask.md","filePath":"python/flask/user_guide/pattern/subclass_flask.md","lastUpdated":1693404008000}'),e={name:"python/flask/user_guide/pattern/subclass_flask.md"},o=n(`<h1 id="subclassing-flask" tabindex="-1">Subclassing Flask <a class="header-anchor" href="#subclassing-flask" aria-label="Permalink to &quot;Subclassing Flask {#subclassing-flask}&quot;">​</a></h1><p>The <code>Flask</code> class is designed for subclassing.</p><p>For example, you may want to override how request parameters are handled to preserve their order:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Flask, Request</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> werkzeug.datastructures </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ImmutableOrderedMultiDict</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Request</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Request subclass to override request parameter storage&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    parameter_storage_class </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ImmutableOrderedMultiDict</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyFlask</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Flask</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Flask subclass using the custom request class&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    request_class </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> MyRequest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Flask, Request</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> werkzeug.datastructures </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ImmutableOrderedMultiDict</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRequest</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Request</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Request subclass to override request parameter storage&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    parameter_storage_class </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ImmutableOrderedMultiDict</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyFlask</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Flask</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Flask subclass using the custom request class&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    request_class </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MyRequest</span></span></code></pre></div><p>This is the recommended approach for overriding or augmenting Flask’s internal functionality.</p>`,5),t=[o];function p(r,c,u,i,y,E){return a(),l("div",null,t)}const _=s(e,[["render",p]]);export{q as __pageData,_ as default};
