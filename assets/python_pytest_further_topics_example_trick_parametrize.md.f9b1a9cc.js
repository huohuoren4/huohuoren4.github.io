import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.01af844e.js";const u=JSON.parse('{"title":"Parametrizing tests","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/further_topics/example_trick/parametrize.md","filePath":"python/pytest/further_topics/example_trick/parametrize.md","lastUpdated":1692807718000}'),l={name:"python/pytest/further_topics/example_trick/parametrize.md"},o=p(`<h1 id="parametrizing-tests" tabindex="-1">Parametrizing tests <a class="header-anchor" href="#parametrizing-tests" aria-label="Permalink to &quot;Parametrizing tests {#parametrizing-tests}&quot;">​</a></h1><p><code>pytest</code> allows to easily parametrize test functions. For basic docs, see <a href="/python/pytest/how_to_guides/params_fixture#how-to-parametrize-fixtures-and-test-functions">How to parametrize fixtures and test functions</a>.</p><p>In the following we provide some examples using the builtin mechanisms.</p><h2 id="generating-parameters-combinations-depending-on-command-line" tabindex="-1">Generating parameters combinations, depending on command line <a class="header-anchor" href="#generating-parameters-combinations-depending-on-command-line" aria-label="Permalink to &quot;Generating parameters combinations, depending on command line {#generating-parameters-combinations-depending-on-command-line}&quot;">​</a></h2><p>Let’s say we want to execute a test with different computation parameters and the parameter range shall be determined by a command line argument. Let’s first write a simple (do-nothing) computation test:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_compute.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_compute</span><span style="color:#E1E4E8;">(param1):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> param1 </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_compute.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_compute</span><span style="color:#24292E;">(param1):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> param1 </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span></code></pre></div><p>Now we add a test configuration like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_addoption</span><span style="color:#E1E4E8;">(parser):</span></span>
<span class="line"><span style="color:#E1E4E8;">    parser.addoption(</span><span style="color:#9ECBFF;">&quot;--all&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;store_true&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">help</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;run all combinations&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_generate_tests</span><span style="color:#E1E4E8;">(metafunc):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;param1&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> metafunc.fixturenames:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> metafunc.config.getoption(</span><span style="color:#9ECBFF;">&quot;all&quot;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">            end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">        metafunc.parametrize(</span><span style="color:#9ECBFF;">&quot;param1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">range</span><span style="color:#E1E4E8;">(end))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_addoption</span><span style="color:#24292E;">(parser):</span></span>
<span class="line"><span style="color:#24292E;">    parser.addoption(</span><span style="color:#032F62;">&quot;--all&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;store_true&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">help</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;run all combinations&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_generate_tests</span><span style="color:#24292E;">(metafunc):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;param1&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> metafunc.fixturenames:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> metafunc.config.getoption(</span><span style="color:#032F62;">&quot;all&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">            end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">        metafunc.parametrize(</span><span style="color:#032F62;">&quot;param1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(end))</span></span></code></pre></div><p>This means that we only run 2 tests if we do not pass <code>--all</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_compute.py</span></span>
<span class="line"><span style="color:#79B8FF;">..</span><span style="color:#E1E4E8;">                                                                   [100%]</span></span>
<span class="line"><span style="color:#B392F0;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_compute.py</span></span>
<span class="line"><span style="color:#005CC5;">..</span><span style="color:#24292E;">                                                                   [100%]</span></span>
<span class="line"><span style="color:#6F42C1;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><p>We run only two computations, so we see two dots. let’s run the full monty:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--all</span></span>
<span class="line"><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;">.F                                                                [100%]</span></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">_____________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_compute[</span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">param1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_compute</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">param1</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">       assert param1 </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> 4</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_compute.py:4:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AssertionError</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_compute.py::test_compute[</span><span style="color:#79B8FF;">4</span><span style="color:#9ECBFF;">]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--all</span></span>
<span class="line"><span style="color:#005CC5;">...</span><span style="color:#24292E;">.F                                                                [100%]</span></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">_____________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_compute[</span><span style="color:#005CC5;">4</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">______________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">param1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_compute</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">param1</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">       assert param1 </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> 4</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_compute.py:4:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AssertionError</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_compute.py::test_compute[</span><span style="color:#005CC5;">4</span><span style="color:#032F62;">]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><p>As expected when running the full range of <code>param1</code> values we’ll get an error on the last one.</p><h2 id="different-options-for-test-ids" tabindex="-1">Different options for test IDs <a class="header-anchor" href="#different-options-for-test-ids" aria-label="Permalink to &quot;Different options for test IDs {#different-options-for-test-ids}&quot;">​</a></h2><p>pytest will build a string that is the test ID for each set of values in a parametrized test. These IDs can be used with <code>-k</code> to select specific cases to run, and they will also identify the specific case when one is failing. Running pytest with <code>--collect-only</code> will show the generated IDs.</p><p>Numbers, strings, booleans and None will have their usual string representation used in the test ID. For other objects, pytest will make a string based on the argument name:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_time.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> datetime </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> datetime, timedelta</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">testdata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    (datetime(</span><span style="color:#79B8FF;">2001</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">), datetime(</span><span style="color:#79B8FF;">2001</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">), timedelta(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">    (datetime(</span><span style="color:#79B8FF;">2001</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">), datetime(</span><span style="color:#79B8FF;">2001</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">), timedelta(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a,b,expected&quot;</span><span style="color:#E1E4E8;">, testdata)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_timedistance_v0</span><span style="color:#E1E4E8;">(a, b, expected):</span></span>
<span class="line"><span style="color:#E1E4E8;">    diff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> diff </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> expected</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a,b,expected&quot;</span><span style="color:#E1E4E8;">, testdata, </span><span style="color:#FFAB70;">ids</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;forward&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;backward&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_timedistance_v1</span><span style="color:#E1E4E8;">(a, b, expected):</span></span>
<span class="line"><span style="color:#E1E4E8;">    diff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> diff </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> expected</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">idfn</span><span style="color:#E1E4E8;">(val):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(val, (datetime,)):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># note this wouldn&#39;t show any hours/minutes/seconds</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> val.strftime(</span><span style="color:#9ECBFF;">&quot;%Y%m</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a,b,expected&quot;</span><span style="color:#E1E4E8;">, testdata, </span><span style="color:#FFAB70;">ids</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">idfn)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_timedistance_v2</span><span style="color:#E1E4E8;">(a, b, expected):</span></span>
<span class="line"><span style="color:#E1E4E8;">    diff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> diff </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> expected</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;a,b,expected&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">        pytest.param(</span></span>
<span class="line"><span style="color:#E1E4E8;">            datetime(</span><span style="color:#79B8FF;">2001</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">), datetime(</span><span style="color:#79B8FF;">2001</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">), timedelta(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;forward&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ),</span></span>
<span class="line"><span style="color:#E1E4E8;">        pytest.param(</span></span>
<span class="line"><span style="color:#E1E4E8;">            datetime(</span><span style="color:#79B8FF;">2001</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">), datetime(</span><span style="color:#79B8FF;">2001</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">), timedelta(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;backward&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_timedistance_v3</span><span style="color:#E1E4E8;">(a, b, expected):</span></span>
<span class="line"><span style="color:#E1E4E8;">    diff </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> b</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> diff </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> expected</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_time.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> datetime </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> datetime, timedelta</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">testdata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    (datetime(</span><span style="color:#005CC5;">2001</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">), datetime(</span><span style="color:#005CC5;">2001</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">), timedelta(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">    (datetime(</span><span style="color:#005CC5;">2001</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">), datetime(</span><span style="color:#005CC5;">2001</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">), timedelta(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a,b,expected&quot;</span><span style="color:#24292E;">, testdata)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_timedistance_v0</span><span style="color:#24292E;">(a, b, expected):</span></span>
<span class="line"><span style="color:#24292E;">    diff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> diff </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> expected</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a,b,expected&quot;</span><span style="color:#24292E;">, testdata, </span><span style="color:#E36209;">ids</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;forward&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;backward&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_timedistance_v1</span><span style="color:#24292E;">(a, b, expected):</span></span>
<span class="line"><span style="color:#24292E;">    diff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> diff </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> expected</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">idfn</span><span style="color:#24292E;">(val):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(val, (datetime,)):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># note this wouldn&#39;t show any hours/minutes/seconds</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> val.strftime(</span><span style="color:#032F62;">&quot;%Y%m</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a,b,expected&quot;</span><span style="color:#24292E;">, testdata, </span><span style="color:#E36209;">ids</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">idfn)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_timedistance_v2</span><span style="color:#24292E;">(a, b, expected):</span></span>
<span class="line"><span style="color:#24292E;">    diff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> diff </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> expected</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;a,b,expected&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">        pytest.param(</span></span>
<span class="line"><span style="color:#24292E;">            datetime(</span><span style="color:#005CC5;">2001</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">), datetime(</span><span style="color:#005CC5;">2001</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">), timedelta(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;forward&quot;</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">        pytest.param(</span></span>
<span class="line"><span style="color:#24292E;">            datetime(</span><span style="color:#005CC5;">2001</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">), datetime(</span><span style="color:#005CC5;">2001</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">), timedelta(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;backward&quot;</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_timedistance_v3</span><span style="color:#24292E;">(a, b, expected):</span></span>
<span class="line"><span style="color:#24292E;">    diff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> diff </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> expected</span></span></code></pre></div><p>In <code>test_timedistance_v0</code>, we let pytest generate the test IDs.</p><p>In <code>test_timedistance_v1</code>, we specified <code>ids</code> as a list of strings which were used as the test IDs. These are succinct, but can be a pain to maintain.</p><p>In <code>test_timedistance_v2</code>, we specified <code>ids</code> as a function that can generate a string representation to make part of the test ID. So our <code>datetime</code> values use the label generated by <code>idfn</code>, but because we didn’t generate a label for <code>timedelta</code> objects, they are still using the default pytest representation:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_time.py</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--collect-only</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Module test_time.py</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_timedistance_v0[a0-b0-expected0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_timedistance_v0[a1-b1-expected1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_timedistance_v1[forward</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_timedistance_v1[backward</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_timedistance_v2[</span><span style="color:#79B8FF;">20011212</span><span style="color:#9ECBFF;">-20011211-expected0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_timedistance_v2[</span><span style="color:#79B8FF;">20011211</span><span style="color:#9ECBFF;">-20011212-expected1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_timedistance_v3[forward</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_timedistance_v3[backward</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">======================== </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_time.py</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--collect-only</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Module test_time.py</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_timedistance_v0[a0-b0-expected0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_timedistance_v0[a1-b1-expected1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_timedistance_v1[forward</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_timedistance_v1[backward</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_timedistance_v2[</span><span style="color:#005CC5;">20011212</span><span style="color:#032F62;">-20011211-expected0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_timedistance_v2[</span><span style="color:#005CC5;">20011211</span><span style="color:#032F62;">-20011212-expected1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_timedistance_v3[forward</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_timedistance_v3[backward</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">======================== </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">========================</span></span></code></pre></div><p>In <code>test_timedistance_v3</code>, we used <code>pytest.param</code> to specify the test IDs together with the actual data, instead of listing them separately.</p><h2 id="a-quick-port-of-testscenarios" tabindex="-1">A quick port of “testscenarios” <a class="header-anchor" href="#a-quick-port-of-testscenarios" aria-label="Permalink to &quot;A quick port of “testscenarios” {#a-quick-port-of-testscenarios}&quot;">​</a></h2><p>Here is a quick port to run tests configured with <a href="https://pypi.org/project/testscenarios/" target="_blank" rel="noreferrer">testscenarios</a>, an add-on from Robert Collins for the standard unittest framework. We only have to work a bit to construct the correct arguments for pytest’s <code>Metafunc.parametrize()</code>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_scenarios.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_generate_tests</span><span style="color:#E1E4E8;">(metafunc):</span></span>
<span class="line"><span style="color:#E1E4E8;">    idlist </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    argvalues </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> scenario </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> metafunc.cls.scenarios:</span></span>
<span class="line"><span style="color:#E1E4E8;">        idlist.append(scenario[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">        items </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> scenario[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].items()</span></span>
<span class="line"><span style="color:#E1E4E8;">        argnames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [x[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items]</span></span>
<span class="line"><span style="color:#E1E4E8;">        argvalues.append([x[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items])</span></span>
<span class="line"><span style="color:#E1E4E8;">    metafunc.parametrize(argnames, argvalues, </span><span style="color:#FFAB70;">ids</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">idlist, </span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;class&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">scenario1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;basic&quot;</span><span style="color:#E1E4E8;">, {</span><span style="color:#9ECBFF;">&quot;attribute&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">scenario2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;advanced&quot;</span><span style="color:#E1E4E8;">, {</span><span style="color:#9ECBFF;">&quot;attribute&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;value2&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestSampleWithScenarios</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    scenarios </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [scenario1, scenario2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_demo1</span><span style="color:#E1E4E8;">(self, attribute):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(attribute, </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_demo2</span><span style="color:#E1E4E8;">(self, attribute):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(attribute, </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_scenarios.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_generate_tests</span><span style="color:#24292E;">(metafunc):</span></span>
<span class="line"><span style="color:#24292E;">    idlist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    argvalues </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> scenario </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> metafunc.cls.scenarios:</span></span>
<span class="line"><span style="color:#24292E;">        idlist.append(scenario[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">        items </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scenario[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].items()</span></span>
<span class="line"><span style="color:#24292E;">        argnames </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [x[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> items]</span></span>
<span class="line"><span style="color:#24292E;">        argvalues.append([x[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> items])</span></span>
<span class="line"><span style="color:#24292E;">    metafunc.parametrize(argnames, argvalues, </span><span style="color:#E36209;">ids</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">idlist, </span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;class&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">scenario1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;basic&quot;</span><span style="color:#24292E;">, {</span><span style="color:#032F62;">&quot;attribute&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">scenario2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&quot;advanced&quot;</span><span style="color:#24292E;">, {</span><span style="color:#032F62;">&quot;attribute&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;value2&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSampleWithScenarios</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    scenarios </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [scenario1, scenario2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_demo1</span><span style="color:#24292E;">(self, attribute):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(attribute, </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_demo2</span><span style="color:#24292E;">(self, attribute):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(attribute, </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">)</span></span></code></pre></div><p>this is a fully self-contained example which you can run with:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_scenarios.py</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_scenarios.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">....</span><span style="color:#E1E4E8;">                                               [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">============================ </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_scenarios.py</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_scenarios.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">....</span><span style="color:#24292E;">                                               [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">============================ </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span></code></pre></div><p>If you just collect tests you’ll also nicely see ‘advanced’ and ‘basic’ as variants for the test function:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--collect-only</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_scenarios.py</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Module test_scenarios.py</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TestSampleWithScenario</span><span style="color:#E1E4E8;">s</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_demo1[basic</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_demo2[basic</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_demo1[advanced</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_demo2[advanced</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">======================== </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--collect-only</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_scenarios.py</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Module test_scenarios.py</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TestSampleWithScenario</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_demo1[basic</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_demo2[basic</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_demo1[advanced</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_demo2[advanced</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">======================== </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">========================</span></span></code></pre></div><p>Note that we told <code>metafunc.parametrize()</code> that your scenario values should be considered class-scoped. With <code>pytest-2.3</code> this leads to a resource-based ordering.</p><h2 id="deferring-the-setup-of-parametrized-resources" tabindex="-1">Deferring the setup of parametrized resources <a class="header-anchor" href="#deferring-the-setup-of-parametrized-resources" aria-label="Permalink to &quot;Deferring the setup of parametrized resources {#deferring-the-setup-of-parametrized-resources}&quot;">​</a></h2><p>The parametrization of test functions happens at collection time. It is a good idea to setup expensive resources like DB connections or subprocess only when the actual test is run. Here is a simple example how you can achieve that. This test requires a <code>db</code> object fixture:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_backends.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_db_initialized</span><span style="color:#E1E4E8;">(db):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># a dummy test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> db.</span><span style="color:#79B8FF;">__class__</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;DB2&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        pytest.fail(</span><span style="color:#9ECBFF;">&quot;deliberately failing for demo purposes&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_backends.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_db_initialized</span><span style="color:#24292E;">(db):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># a dummy test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> db.</span><span style="color:#005CC5;">__class__</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;DB2&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        pytest.fail(</span><span style="color:#032F62;">&quot;deliberately failing for demo purposes&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>We can now add a test configuration that generates two invocations of the <code>test_db_initialized</code> function and also implements a factory that creates a database object for the actual test invocations:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pytest_generate_tests</span><span style="color:#E1E4E8;">(metafunc):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;db&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> metafunc.fixturenames:</span></span>
<span class="line"><span style="color:#E1E4E8;">        metafunc.parametrize(</span><span style="color:#9ECBFF;">&quot;db&quot;</span><span style="color:#E1E4E8;">, [</span><span style="color:#9ECBFF;">&quot;d1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;d2&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">indirect</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DB1</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;one database object&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DB2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;alternative database object&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> request.param </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;d1&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DB1()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">elif</span><span style="color:#E1E4E8;"> request.param </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;d2&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DB2()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ValueError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;invalid internal test config&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pytest_generate_tests</span><span style="color:#24292E;">(metafunc):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;db&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> metafunc.fixturenames:</span></span>
<span class="line"><span style="color:#24292E;">        metafunc.parametrize(</span><span style="color:#032F62;">&quot;db&quot;</span><span style="color:#24292E;">, [</span><span style="color:#032F62;">&quot;d1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;d2&quot;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">indirect</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DB1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;one database object&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DB2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;alternative database object&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> request.param </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;d1&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DB1()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">elif</span><span style="color:#24292E;"> request.param </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;d2&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DB2()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ValueError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;invalid internal test config&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>Let’s first see how it looks like at collection time:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_backends.py</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--collect-only</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Module test_backends.py</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_db_initialized[d1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_db_initialized[d2</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">======================== </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_backends.py</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--collect-only</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Module test_backends.py</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_db_initialized[d1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_db_initialized[d2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">======================== </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">========================</span></span></code></pre></div><p>And then when we run the test:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_backends.py</span></span>
<span class="line"><span style="color:#B392F0;">.F</span><span style="color:#E1E4E8;">                                                                   [100%]</span></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">_________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_db_initialized[d2]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">__________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">conftest.DB2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xdeadbeef000</span><span style="color:#F97583;">1&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_db_initialized</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">db</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># a dummy test</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">db.__class__.__name__</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;DB2&quot;:</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">           pytest.fail(</span><span style="color:#B392F0;">&quot;deliberately failing for demo purposes&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deliberately</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failing</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">demo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">purposes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_backends.py:8:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_backends.py::test_db_initialized[d2]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Failed:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deliberately</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">f...</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_backends.py</span></span>
<span class="line"><span style="color:#6F42C1;">.F</span><span style="color:#24292E;">                                                                   [100%]</span></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">_________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_db_initialized[d2]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">__________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">db</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">conftest.DB2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">object</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xdeadbeef000</span><span style="color:#D73A49;">1&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_db_initialized</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">db</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># a dummy test</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">db.__class__.__name__</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;DB2&quot;:</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">           pytest.fail(</span><span style="color:#6F42C1;">&quot;deliberately failing for demo purposes&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">           </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deliberately</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failing</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">demo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">purposes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_backends.py:8:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_backends.py::test_db_initialized[d2]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Failed:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deliberately</span><span style="color:#24292E;"> </span><span style="color:#032F62;">f...</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><p>The first invocation with <code>db == &quot;DB1&quot;</code> passed while the second with <code>db == &quot;DB2&quot;</code> failed. Our db fixture function has instantiated each of the DB values during the setup phase while the <code>pytest_generate_tests</code> generated two according calls to the <code>test_db_initialized</code> during the collection phase.</p><h2 id="indirect-parametrization" tabindex="-1">Indirect parametrization <a class="header-anchor" href="#indirect-parametrization" aria-label="Permalink to &quot;Indirect parametrization {#indirect-parametrization}&quot;">​</a></h2><p>Using the <code>indirect=True</code> parameter when parametrizing a test allows to parametrize a test with a fixture receiving the values before passing them to a test:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fixt</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> request.param </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;fixt&quot;</span><span style="color:#E1E4E8;">, [</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#FFAB70;">indirect</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_indirect</span><span style="color:#E1E4E8;">(fixt):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(fixt) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fixt</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> request.param </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fixt&quot;</span><span style="color:#24292E;">, [</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">], </span><span style="color:#E36209;">indirect</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_indirect</span><span style="color:#24292E;">(fixt):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(fixt) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span></code></pre></div><p>This can be used, for example, to do more expensive setup at test run time in the fixture, rather than having to run those setup steps at collection time.</p><h2 id="apply-indirect-on-particular-arguments" tabindex="-1">Apply indirect on particular arguments <a class="header-anchor" href="#apply-indirect-on-particular-arguments" aria-label="Permalink to &quot;Apply indirect on particular arguments {#apply-indirect-on-particular-arguments}&quot;">​</a></h2><p>Very often parametrization uses more than one argument name. There is opportunity to apply <code>indirect</code> parameter on particular arguments. It can be done by passing list or tuple of arguments’ names to <code>indirect</code>. In the example below there is a function <code>test_indirect</code> which uses two fixtures: <code>x</code> and <code>y</code>. Here we give to indirect the list, which contains the name of the fixture x. The indirect parameter will be applied to this argument only, and the value a will be passed to respective fixture function:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_indirect_list.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">x</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> request.param </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">y</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> request.param </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;x, y&quot;</span><span style="color:#E1E4E8;">, [(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">)], </span><span style="color:#FFAB70;">indirect</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;x&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_indirect</span><span style="color:#E1E4E8;">(x, y):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;aaa&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;b&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_indirect_list.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">x</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> request.param </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">y</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> request.param </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;x, y&quot;</span><span style="color:#24292E;">, [(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">)], </span><span style="color:#E36209;">indirect</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;x&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_indirect</span><span style="color:#24292E;">(x, y):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;aaa&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;b&quot;</span></span></code></pre></div><p>The result of this test will be successful:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_indirect_list.py</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collecting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_indirect_list.py::test_indirect[a-b]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                     [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">============================ </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=============================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_indirect_list.py</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collecting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_indirect_list.py::test_indirect[a-b]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                     [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">============================ </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=============================</span></span></code></pre></div><h2 id="parametrizing-test-methods-through-per-class-configuration" tabindex="-1">Parametrizing test methods through per-class configuration <a class="header-anchor" href="#parametrizing-test-methods-through-per-class-configuration" aria-label="Permalink to &quot;Parametrizing test methods through per-class configuration {#parametrizing-test-methods-through-per-class-configuration}&quot;">​</a></h2><p>Here is an example <code>pytest_generate_tests</code> function implementing a parametrization scheme similar to Michael Foord’s <a href="https://github.com/testing-cabal/unittest-ext/blob/master/params.py" target="_blank" rel="noreferrer">unittest parametrizer</a> but in a lot less code:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of ./test_parametrize.py</span></span>
<span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest_generate_tests</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">metafunc</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># called once per each test function</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">funcarglist</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">metafunc.cls.params[metafunc.function.__name__]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">argnames</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sorted</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">funcarglist[0]</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">metafunc.parametrize(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">argnames,</span><span style="color:#E1E4E8;"> [[funcargs[name] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> argnames] </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> funcargs </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> funcarglist]</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TestClass:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># a map specifying multiple argument sets for a test method</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">params</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">&quot;test_equals&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> [dict(a=1, </span><span style="color:#9ECBFF;">b=</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), dict(a</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> b</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">&quot;test_zerodivision&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> [dict(a=1, </span><span style="color:#9ECBFF;">b=</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)],</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_equals</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">self,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_zerodivision</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">self,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest.raises</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ZeroDivisionError</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of ./test_parametrize.py</span></span>
<span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest_generate_tests</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">metafunc</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># called once per each test function</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">funcarglist</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">metafunc.cls.params[metafunc.function.__name__]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">argnames</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sorted</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">funcarglist[0]</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">metafunc.parametrize(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">argnames,</span><span style="color:#24292E;"> [[funcargs[name] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> argnames] </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> funcargs </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> funcarglist]</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TestClass:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># a map specifying multiple argument sets for a test method</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">params</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">&quot;test_equals&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> [dict(a=1, </span><span style="color:#032F62;">b=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), dict(a</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> b</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span><span style="color:#032F62;">],</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">&quot;test_zerodivision&quot;</span><span style="color:#005CC5;">:</span><span style="color:#24292E;"> [dict(a=1, </span><span style="color:#032F62;">b=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)],</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_equals</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">self,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_zerodivision</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">self,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest.raises</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ZeroDivisionError</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span></span></code></pre></div><p>Our test generator looks up a class-level definition which specifies which argument sets to use for each test function. Let’s run it:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span></span>
<span class="line"><span style="color:#B392F0;">F..</span><span style="color:#E1E4E8;">                                                                  [100%]</span></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TestClass.test_equals[</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">-2]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">self</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">test_parametrize.TestClass</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xdeadbeef000</span><span style="color:#F97583;">2&gt;</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_equals</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">self,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">b</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">       assert a == b</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_parametrize.py:21:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AssertionError</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_parametrize.py::TestClass::test_equals[</span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">-2]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#B392F0;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span></span>
<span class="line"><span style="color:#6F42C1;">F..</span><span style="color:#24292E;">                                                                  [100%]</span></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TestClass.test_equals[</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">-2]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">self</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">test_parametrize.TestClass</span><span style="color:#24292E;"> </span><span style="color:#032F62;">object</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xdeadbeef000</span><span style="color:#D73A49;">2&gt;</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_equals</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">self,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">b</span><span style="color:#24292E;">)</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">       assert a == b</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_parametrize.py:21:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AssertionError</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_parametrize.py::TestClass::test_equals[</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">-2]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#6F42C1;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><h2 id="parametrization-with-multiple-fixtures" tabindex="-1">Parametrization with multiple fixtures <a class="header-anchor" href="#parametrization-with-multiple-fixtures" aria-label="Permalink to &quot;Parametrization with multiple fixtures {#parametrization-with-multiple-fixtures}&quot;">​</a></h2><p>Here is a stripped down real-life example of using parametrized testing for testing serialization of objects between different python interpreters. We define a <code>test_basic_objects</code> function which is to be run with different sets of arguments for its three arguments:</p><ul><li><p><code>python1</code>: first python interpreter, run to pickle-dump an object to a file</p></li><li><p><code>python2</code>: second interpreter, run to pickle-load an object from a file</p></li><li><p><code>obj</code>: object to be dumped/loaded</p></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;&quot;&quot;Module containing a parametrized tests testing cross-python serialization</span></span>
<span class="line"><span style="color:#9ECBFF;">via the pickle module.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> shutil</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> subprocess</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> textwrap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pythonlist </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;python3.9&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;python3.10&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;python3.11&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">pythonlist)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">python1</span><span style="color:#E1E4E8;">(request, tmp_path):</span></span>
<span class="line"><span style="color:#E1E4E8;">    picklefile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp_path </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;data.pickle&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Python(request.param, picklefile)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">pythonlist)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">python2</span><span style="color:#E1E4E8;">(request, python1):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Python(request.param, python1.picklefile)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Python</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, version, picklefile):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.pythonpath </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> shutil.which(version)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.pythonpath:</span></span>
<span class="line"><span style="color:#E1E4E8;">            pytest.skip(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">version</span><span style="color:#F97583;">!r</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;"> not found&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.picklefile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> picklefile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dumps</span><span style="color:#E1E4E8;">(self, obj):</span></span>
<span class="line"><span style="color:#E1E4E8;">        dumpfile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.picklefile.with_name(</span><span style="color:#9ECBFF;">&quot;dump.py&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        dumpfile.write_text(</span></span>
<span class="line"><span style="color:#E1E4E8;">            textwrap.dedent(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#DBEDFF;">                import pickle</span></span>
<span class="line"><span style="color:#DBEDFF;">                f = open</span><span style="color:#79B8FF;">(</span><span style="color:#DBEDFF;">{!r}, &#39;wb&#39;</span><span style="color:#79B8FF;">)</span></span>
<span class="line"><span style="color:#DBEDFF;">                s = pickle</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">dump</span><span style="color:#79B8FF;">(</span><span style="color:#DBEDFF;">{!r}, f, protocol=2</span><span style="color:#79B8FF;">)</span></span>
<span class="line"><span style="color:#DBEDFF;">                f</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">close</span><span style="color:#79B8FF;">()</span></span>
<span class="line"><span style="color:#DBEDFF;">                </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span><span style="color:#E1E4E8;">.format(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.picklefile), obj</span></span>
<span class="line"><span style="color:#E1E4E8;">                )</span></span>
<span class="line"><span style="color:#E1E4E8;">            )</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">        subprocess.run((</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.pythonpath, </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(dumpfile)), </span><span style="color:#FFAB70;">check</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">load_and_is_true</span><span style="color:#E1E4E8;">(self, expression):</span></span>
<span class="line"><span style="color:#E1E4E8;">        loadfile </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.picklefile.with_name(</span><span style="color:#9ECBFF;">&quot;load.py&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        loadfile.write_text(</span></span>
<span class="line"><span style="color:#E1E4E8;">            textwrap.dedent(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">r</span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#DBEDFF;">                import pickle</span></span>
<span class="line"><span style="color:#DBEDFF;">                f = open</span><span style="color:#79B8FF;">(</span><span style="color:#DBEDFF;">{!r}, &#39;rb&#39;</span><span style="color:#79B8FF;">)</span></span>
<span class="line"><span style="color:#DBEDFF;">                obj = pickle</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">load</span><span style="color:#79B8FF;">(</span><span style="color:#DBEDFF;">f</span><span style="color:#79B8FF;">)</span></span>
<span class="line"><span style="color:#DBEDFF;">                f</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">close</span><span style="color:#79B8FF;">()</span></span>
<span class="line"><span style="color:#DBEDFF;">                res = eval</span><span style="color:#79B8FF;">(</span><span style="color:#DBEDFF;">{!r}</span><span style="color:#79B8FF;">)</span></span>
<span class="line"><span style="color:#DBEDFF;">                if not res:</span></span>
<span class="line"><span style="color:#DBEDFF;">                    raise SystemExit</span><span style="color:#79B8FF;">(</span><span style="color:#DBEDFF;">1</span><span style="color:#79B8FF;">)</span></span>
<span class="line"><span style="color:#DBEDFF;">                </span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span><span style="color:#E1E4E8;">.format(</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.picklefile), expression</span></span>
<span class="line"><span style="color:#E1E4E8;">                )</span></span>
<span class="line"><span style="color:#E1E4E8;">            )</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(loadfile)</span></span>
<span class="line"><span style="color:#E1E4E8;">        subprocess.run((</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.pythonpath, </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(loadfile)), </span><span style="color:#FFAB70;">check</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;obj&quot;</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">, {}, {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_basic_objects</span><span style="color:#E1E4E8;">(python1, python2, obj):</span></span>
<span class="line"><span style="color:#E1E4E8;">    python1.dumps(obj)</span></span>
<span class="line"><span style="color:#E1E4E8;">    python2.load_and_is_true(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;obj == </span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">obj</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;&quot;&quot;Module containing a parametrized tests testing cross-python serialization</span></span>
<span class="line"><span style="color:#032F62;">via the pickle module.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> shutil</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> subprocess</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> textwrap</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pythonlist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;python3.9&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;python3.10&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;python3.11&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pythonlist)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">python1</span><span style="color:#24292E;">(request, tmp_path):</span></span>
<span class="line"><span style="color:#24292E;">    picklefile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp_path </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;data.pickle&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Python(request.param, picklefile)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pythonlist)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">python2</span><span style="color:#24292E;">(request, python1):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Python(request.param, python1.picklefile)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Python</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, version, picklefile):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.pythonpath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> shutil.which(version)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.pythonpath:</span></span>
<span class="line"><span style="color:#24292E;">            pytest.skip(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">version</span><span style="color:#D73A49;">!r</span><span style="color:#005CC5;">}</span><span style="color:#032F62;"> not found&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.picklefile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> picklefile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dumps</span><span style="color:#24292E;">(self, obj):</span></span>
<span class="line"><span style="color:#24292E;">        dumpfile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.picklefile.with_name(</span><span style="color:#032F62;">&quot;dump.py&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        dumpfile.write_text(</span></span>
<span class="line"><span style="color:#24292E;">            textwrap.dedent(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">                import pickle</span></span>
<span class="line"><span style="color:#032F62;">                f = open</span><span style="color:#005CC5;">(</span><span style="color:#032F62;">{!r}, &#39;wb&#39;</span><span style="color:#005CC5;">)</span></span>
<span class="line"><span style="color:#032F62;">                s = pickle</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">dump</span><span style="color:#005CC5;">(</span><span style="color:#032F62;">{!r}, f, protocol=2</span><span style="color:#005CC5;">)</span></span>
<span class="line"><span style="color:#032F62;">                f</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">close</span><span style="color:#005CC5;">()</span></span>
<span class="line"><span style="color:#032F62;">                &quot;&quot;&quot;</span><span style="color:#24292E;">.format(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.picklefile), obj</span></span>
<span class="line"><span style="color:#24292E;">                )</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        subprocess.run((</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.pythonpath, </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(dumpfile)), </span><span style="color:#E36209;">check</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">load_and_is_true</span><span style="color:#24292E;">(self, expression):</span></span>
<span class="line"><span style="color:#24292E;">        loadfile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.picklefile.with_name(</span><span style="color:#032F62;">&quot;load.py&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        loadfile.write_text(</span></span>
<span class="line"><span style="color:#24292E;">            textwrap.dedent(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">r</span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">                import pickle</span></span>
<span class="line"><span style="color:#032F62;">                f = open</span><span style="color:#005CC5;">(</span><span style="color:#032F62;">{!r}, &#39;rb&#39;</span><span style="color:#005CC5;">)</span></span>
<span class="line"><span style="color:#032F62;">                obj = pickle</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">load</span><span style="color:#005CC5;">(</span><span style="color:#032F62;">f</span><span style="color:#005CC5;">)</span></span>
<span class="line"><span style="color:#032F62;">                f</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">close</span><span style="color:#005CC5;">()</span></span>
<span class="line"><span style="color:#032F62;">                res = eval</span><span style="color:#005CC5;">(</span><span style="color:#032F62;">{!r}</span><span style="color:#005CC5;">)</span></span>
<span class="line"><span style="color:#032F62;">                if not res:</span></span>
<span class="line"><span style="color:#032F62;">                    raise SystemExit</span><span style="color:#005CC5;">(</span><span style="color:#032F62;">1</span><span style="color:#005CC5;">)</span></span>
<span class="line"><span style="color:#032F62;">                &quot;&quot;&quot;</span><span style="color:#24292E;">.format(</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.picklefile), expression</span></span>
<span class="line"><span style="color:#24292E;">                )</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(loadfile)</span></span>
<span class="line"><span style="color:#24292E;">        subprocess.run((</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.pythonpath, </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(loadfile)), </span><span style="color:#E36209;">check</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">True</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;obj&quot;</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">42</span><span style="color:#24292E;">, {}, {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_basic_objects</span><span style="color:#24292E;">(python1, python2, obj):</span></span>
<span class="line"><span style="color:#24292E;">    python1.dumps(obj)</span></span>
<span class="line"><span style="color:#24292E;">    python2.load_and_is_true(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;obj == </span><span style="color:#005CC5;">{</span><span style="color:#24292E;">obj</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>Running it results in some skips if we don’t have all the python interpreters installed and otherwise runs all combinations (3 interpreters times 3 interpreters times 3 objects to serialize/deserialize):</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;"> $ </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rs</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">multipython.py</span></span>
<span class="line"><span style="color:#B392F0;">sssssssssssssssssssssssssss</span><span style="color:#E1E4E8;">                                          [100%]</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">SKIPPED</span><span style="color:#E1E4E8;"> [9] multipython.py:69: </span><span style="color:#9ECBFF;">&#39;python3.5&#39;</span><span style="color:#E1E4E8;"> not found</span></span>
<span class="line"><span style="color:#B392F0;">SKIPPED</span><span style="color:#E1E4E8;"> [9] multipython.py:69: </span><span style="color:#9ECBFF;">&#39;python3.6&#39;</span><span style="color:#E1E4E8;"> not found</span></span>
<span class="line"><span style="color:#B392F0;">SKIPPED</span><span style="color:#E1E4E8;"> [9] multipython.py:69: </span><span style="color:#9ECBFF;">&#39;python3.7&#39;</span><span style="color:#E1E4E8;"> not found</span></span>
<span class="line"><span style="color:#B392F0;">27</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">skipped</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">.</span><span style="color:#24292E;"> $ </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rs</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span><span style="color:#24292E;"> </span><span style="color:#032F62;">multipython.py</span></span>
<span class="line"><span style="color:#6F42C1;">sssssssssssssssssssssssssss</span><span style="color:#24292E;">                                          [100%]</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">SKIPPED</span><span style="color:#24292E;"> [9] multipython.py:69: </span><span style="color:#032F62;">&#39;python3.5&#39;</span><span style="color:#24292E;"> not found</span></span>
<span class="line"><span style="color:#6F42C1;">SKIPPED</span><span style="color:#24292E;"> [9] multipython.py:69: </span><span style="color:#032F62;">&#39;python3.6&#39;</span><span style="color:#24292E;"> not found</span></span>
<span class="line"><span style="color:#6F42C1;">SKIPPED</span><span style="color:#24292E;"> [9] multipython.py:69: </span><span style="color:#032F62;">&#39;python3.7&#39;</span><span style="color:#24292E;"> not found</span></span>
<span class="line"><span style="color:#6F42C1;">27</span><span style="color:#24292E;"> </span><span style="color:#032F62;">skipped</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span></span></code></pre></div><h2 id="parametrization-of-optional-implementations-imports" tabindex="-1">Parametrization of optional implementations/imports <a class="header-anchor" href="#parametrization-of-optional-implementations-imports" aria-label="Permalink to &quot;Parametrization of optional implementations/imports {#parametrization-of-optional-implementations-imports}&quot;">​</a></h2><p>If you want to compare the outcomes of several implementations of a given API, you can write test functions that receive the already imported implementations and get skipped in case the implementation is not importable/available. Let’s say we have a “base” implementation and the other (possibly optimized ones) need to provide similar results:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;session&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">basemod</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> pytest.importorskip(</span><span style="color:#9ECBFF;">&quot;base&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">scope</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;session&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&quot;opt1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;opt2&quot;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">optmod</span><span style="color:#E1E4E8;">(request):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> pytest.importorskip(request.param)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;session&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">basemod</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pytest.importorskip(</span><span style="color:#032F62;">&quot;base&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span><span style="color:#24292E;">(</span><span style="color:#E36209;">scope</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;session&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">params</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&quot;opt1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;opt2&quot;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">optmod</span><span style="color:#24292E;">(request):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pytest.importorskip(request.param)</span></span></code></pre></div><p>And then a base implementation of a simple function:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of base.py</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func1</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of base.py</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func1</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><p>And an optimized version:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of opt1.py</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func1</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1.0001</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of opt1.py</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func1</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1.0001</span></span></code></pre></div><p>And finally a little test module:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_module.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_func1</span><span style="color:#E1E4E8;">(basemod, optmod):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">round</span><span style="color:#E1E4E8;">(basemod.func1(), </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">round</span><span style="color:#E1E4E8;">(optmod.func1(), </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_module.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_func1</span><span style="color:#24292E;">(basemod, optmod):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">round</span><span style="color:#24292E;">(basemod.func1(), </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">round</span><span style="color:#24292E;">(optmod.func1(), </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span></code></pre></div><p>If you run this with reporting for skips enabled:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-rs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_module.py</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_module.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.s</span><span style="color:#E1E4E8;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">SKIPPED</span><span style="color:#E1E4E8;"> [1] test_module.py:3: could not import </span><span style="color:#9ECBFF;">&#39;opt2&#39;</span><span style="color:#E1E4E8;">: No module named </span><span style="color:#9ECBFF;">&#39;opt2&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">======================= </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">skipped</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-rs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_module.py</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_module.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.s</span><span style="color:#24292E;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">SKIPPED</span><span style="color:#24292E;"> [1] test_module.py:3: could not import </span><span style="color:#032F62;">&#39;opt2&#39;</span><span style="color:#24292E;">: No module named </span><span style="color:#032F62;">&#39;opt2&#39;</span></span>
<span class="line"><span style="color:#24292E;">======================= </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">skipped</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=======================</span></span></code></pre></div><p>You’ll see that we don’t have an <code>opt2</code> module and thus the second test run of our <code>test_func1</code> was skipped. A few notes:</p><ul><li><p>the fixture functions in the <code>conftest.py</code> file are “session-scoped” because we don’t need to import more than once</p></li><li><p>if you have multiple test functions and a skipped import, you will see the <code>[1]</code> count increasing in the report</p></li><li><p>you can put <code>@pytest.mark.parametrize</code> style parametrization on the test functions to parametrize input/output values as well.</p></li></ul><h2 id="set-marks-or-test-id-for-individual-parametrized-test" tabindex="-1">Set marks or test ID for individual parametrized test <a class="header-anchor" href="#set-marks-or-test-id-for-individual-parametrized-test" aria-label="Permalink to &quot;Set marks or test ID for individual parametrized test {#set-marks-or-test-id-for-individual-parametrized-test}&quot;">​</a></h2><p>Use <code>pytest.param</code> to apply marks or set test ID to individual parametrized test. For example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_pytest_param_example.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;test_input,expected&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#9ECBFF;">&quot;3+5&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        pytest.param(</span><span style="color:#9ECBFF;">&quot;1+7&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">marks</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">pytest.mark.basic),</span></span>
<span class="line"><span style="color:#E1E4E8;">        pytest.param(</span><span style="color:#9ECBFF;">&quot;2+4&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">marks</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">pytest.mark.basic, </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;basic_2+4&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        pytest.param(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;6*9&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">42</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">marks</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[pytest.mark.basic, pytest.mark.xfail], </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;basic_6*9&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_eval</span><span style="color:#E1E4E8;">(test_input, expected):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">eval</span><span style="color:#E1E4E8;">(test_input) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> expected</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_pytest_param_example.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;test_input,expected&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#032F62;">&quot;3+5&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        pytest.param(</span><span style="color:#032F62;">&quot;1+7&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#E36209;">marks</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pytest.mark.basic),</span></span>
<span class="line"><span style="color:#24292E;">        pytest.param(</span><span style="color:#032F62;">&quot;2+4&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#E36209;">marks</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">pytest.mark.basic, </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;basic_2+4&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        pytest.param(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;6*9&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">42</span><span style="color:#24292E;">, </span><span style="color:#E36209;">marks</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[pytest.mark.basic, pytest.mark.xfail], </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;basic_6*9&quot;</span></span>
<span class="line"><span style="color:#24292E;">        ),</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_eval</span><span style="color:#24292E;">(test_input, expected):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">eval</span><span style="color:#24292E;">(test_input) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> expected</span></span></code></pre></div><p>In this example, we have 4 parametrized tests. Except for the first test, we mark the rest three parametrized tests with the custom marker <code>basic</code>, and for the fourth test we also use the built-in mark <code>xfail</code> to indicate this test is expected to fail. For explicitness, we set test ids for some tests.</p><p>Then run <code>pytest</code> with verbose mode and with only the <code>basic</code> marker:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">basic</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> $PYTHON_PREFIX</span><span style="color:#9ECBFF;">/bin/python</span></span>
<span class="line"><span style="color:#B392F0;">cachedir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.pytest_cache</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collecting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">...</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_pytest_param_example.py::test_eval[1+7-8]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">                [ </span><span style="color:#79B8FF;">33</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">test_pytest_param_example.py::test_eval[basic_2+4]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PASSED</span><span style="color:#E1E4E8;">            [ </span><span style="color:#79B8FF;">66</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">test_pytest_param_example.py::test_eval[basic_6*9]</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">XFAIL</span><span style="color:#E1E4E8;">             [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">=============== </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">deselected,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xfailed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">basic</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> $PYTHON_PREFIX</span><span style="color:#032F62;">/bin/python</span></span>
<span class="line"><span style="color:#6F42C1;">cachedir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.pytest_cache</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collecting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">...</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">selected</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_pytest_param_example.py::test_eval[1+7-8]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">                [ </span><span style="color:#005CC5;">33</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">test_pytest_param_example.py::test_eval[basic_2+4]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PASSED</span><span style="color:#24292E;">            [ </span><span style="color:#005CC5;">66</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">test_pytest_param_example.py::test_eval[basic_6*9]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">XFAIL</span><span style="color:#24292E;">             [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">=============== </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">21</span><span style="color:#24292E;"> </span><span style="color:#032F62;">deselected,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xfailed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">================</span></span></code></pre></div><p>As the result:</p><ul><li><p>Four tests were collected</p></li><li><p>One test was deselected because it doesn’t have the <code>basic</code> mark.</p></li><li><p>Three tests with the <code>basic</code> mark was selected.</p></li><li><p>The test <code>test_eval[1+7-8]</code> passed, but the name is autogenerated and confusing.</p></li><li><p>The test <code>test_eval[basic_2+4]</code> passed.</p></li><li><p>The test <code>test_eval[basic_6*9]</code> was expected to fail and did fail.</p></li></ul><h2 id="parametrizing-conditional-raising" tabindex="-1">Parametrizing conditional raising <a class="header-anchor" href="#parametrizing-conditional-raising" aria-label="Permalink to &quot;Parametrizing conditional raising {#parametrizing-conditional-raising}&quot;">​</a></h2><p>Use <code>pytest.raises()</code> with the <code>pytest.mark.parametrize</code> decorator to write parametrized tests in which some tests raise exceptions and others do not.</p><p><code>contextlib.nullcontext</code> can be used to test cases that are not expected to raise exceptions but that should result in some value. The value is given as the <code>enter_result</code> parameter, which will be available as the <code>with</code> statement’s target (<code>e</code> in the example below).</p><p>For example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> contextlib </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> nullcontext</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;example_input,expectation&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, nullcontext(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, nullcontext(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, nullcontext(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">        (</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, pytest.raises(</span><span style="color:#79B8FF;">ZeroDivisionError</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_division</span><span style="color:#E1E4E8;">(example_input, expectation):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Test how much I know division.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> expectation </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> e:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> example_input) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> e</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> contextlib </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> nullcontext</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;example_input,expectation&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, nullcontext(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, nullcontext(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, nullcontext(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, pytest.raises(</span><span style="color:#005CC5;">ZeroDivisionError</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_division</span><span style="color:#24292E;">(example_input, expectation):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Test how much I know division.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> expectation </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> e:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> example_input) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> e</span></span></code></pre></div><p>In the example above, the first three test cases should run without any exceptions, while the fourth should raise a <code>ZeroDivisionError</code> exception, which is expected by pytest.</p>`,87),e=[o];function t(c,r,y,E,i,F){return n(),a("div",null,e)}const C=s(l,[["render",t]]);export{u as __pageData,C as default};
