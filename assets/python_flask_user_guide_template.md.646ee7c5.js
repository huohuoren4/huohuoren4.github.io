import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.01af844e.js";const E=JSON.parse('{"title":"Templates","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/template.md","filePath":"python/flask/user_guide/template.md","lastUpdated":1693328004000}'),t={name:"python/flask/user_guide/template.md"},o=n(`<h1 id="templates" tabindex="-1">Templates <a class="header-anchor" href="#templates" aria-label="Permalink to &quot;Templates {#templates}&quot;">​</a></h1><p>Flask leverages Jinja2 as its template engine. You are obviously free to use a different template engine, but you still have to install Jinja2 to run Flask itself. This requirement is necessary to enable rich extensions. An extension can depend on Jinja2 being present.</p><p>This section only gives a very quick introduction into how Jinja2 is integrated into Flask. If you want information on the template engine’s syntax itself, head over to the <a href="https://jinja.palletsprojects.com/templates/" target="_blank" rel="noreferrer">official Jinja2 Template Documentation</a> for more information.</p><h2 id="jinja-setup" tabindex="-1">Jinja Setup <a class="header-anchor" href="#jinja-setup" aria-label="Permalink to &quot;Jinja Setup {#jinja-setup}&quot;">​</a></h2><p>Unless customized, Jinja2 is configured by Flask as follows:</p><ul><li><p>autoescaping is enabled for all templates ending in <code>.html</code>, <code>.htm</code>, <code>.xml</code>, <code>.xhtml</code>, as well as <code>.svg</code> when using <code>render_template()</code>.</p></li><li><p>autoescaping is enabled for all strings when using <code>render_template_string()</code>.</p></li><li><p>a template has the ability to opt in/out autoescaping with the <code>{% autoescape %}</code> tag.</p></li><li><p>Flask inserts a couple of global functions and helpers into the Jinja2 context, additionally to the values that are present by default.</p></li></ul><h2 id="standard-context" tabindex="-1">Standard Context <a class="header-anchor" href="#standard-context" aria-label="Permalink to &quot;Standard Context {#standard-context}&quot;">​</a></h2><p>The following global variables are available within Jinja2 templates by default:</p><h3 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;config {#config}&quot;">​</a></h3><p>The current configuration object (<code>flask.Flask.config</code>)</p><details class="details custom-block"><summary>Changelog</summary><p>Changed in version 0.10: This is now always available, even in imported templates.</p><p>New in version 0.6.</p></details><h3 id="request" tabindex="-1">request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;request {#request}&quot;">​</a></h3><p>The current request object (<code>flask.request</code>). This variable is unavailable if the template was rendered without an active request context.</p><h3 id="session" tabindex="-1">session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;session {#session}&quot;">​</a></h3><p>The current session object (<code>flask.session</code>). This variable is unavailable if the template was rendered without an active request context.</p><h3 id="g" tabindex="-1">g <a class="header-anchor" href="#g" aria-label="Permalink to &quot;g {#g}&quot;">​</a></h3><p>The request-bound object for global variables (<code>flask.g</code>). This variable is unavailable if the template was rendered without an active request context.</p><h3 id="url-for" tabindex="-1">url_for() <a class="header-anchor" href="#url-for" aria-label="Permalink to &quot;url_for() {#url-for}&quot;">​</a></h3><p>The <code>flask.url_for()</code> function.</p><h3 id="get-flashed-messages" tabindex="-1">get_flashed_messages() <a class="header-anchor" href="#get-flashed-messages" aria-label="Permalink to &quot;get_flashed_messages() {#get-flashed-messages}&quot;">​</a></h3><p>The <code>flask.get_flashed_messages()</code> function.</p><div class="tip custom-block"><p class="custom-block-title">The Jinja Context Behavior</p><p>These variables are added to the context of variables, they are not global variables. The difference is that by default these will not show up in the context of imported templates. This is partially caused by performance considerations, partially to keep things explicit.</p><p>What does this mean for you? If you have a macro you want to import, that needs to access the request object you have two possibilities:</p><ol><li><p>you explicitly pass the request to the macro as parameter, or the attribute of the request object you are interested in.</p></li><li><p>you import the macro “with context”.</p></li></ol><p>Importing with context looks like this:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{% from &#39;_helpers.html&#39; import my_macro with context %}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{% from &#39;_helpers.html&#39; import my_macro with context %}</span></span></code></pre></div></div><h2 id="controlling-autoescaping" tabindex="-1">Controlling Autoescaping <a class="header-anchor" href="#controlling-autoescaping" aria-label="Permalink to &quot;Controlling Autoescaping {#controlling-autoescaping}&quot;">​</a></h2><p>Autoescaping is the concept of automatically escaping special characters for you. Special characters in the sense of HTML (or XML, and thus XHTML) are <code>&amp;</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&quot;</code> as well as <code>&#39;</code>. Because these characters carry specific meanings in documents on their own you have to replace them by so called “entities” if you want to use them for text. Not doing so would not only cause user frustration by the inability to use these characters in text, but can also lead to security problems. (see <a href="/python/flask/user_guide/security#cross-site-scripting-xss">Cross-Site Scripting (XSS)</a></p><p>Sometimes however you will need to disable autoescaping in templates. This can be the case if you want to explicitly inject HTML into pages, for example if they come from a system that generates secure HTML like a markdown to HTML converter.</p><p>There are three ways to accomplish that:</p><ul><li><p>In the Python code, wrap the HTML string in a <code>Markup</code> object before passing it to the template. This is in general the recommended way.</p></li><li><p>Inside the template, use the <code>|safe</code> filter to explicitly mark a string as safe HTML <code>(\\{\\{ myvariable|safe \\}\\})</code></p></li><li><p>Temporarily disable the autoescape system altogether.</p></li></ul><p>To disable the autoescape system in templates, you can use the <code>{% autoescape %}</code> block:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{% autoescape false %}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;autoescaping is disabled here</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;{{ will_not_be_escaped }}</span></span>
<span class="line"><span style="color:#E1E4E8;">{% endautoescape %}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{% autoescape false %}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;autoescaping is disabled here</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;{{ will_not_be_escaped }}</span></span>
<span class="line"><span style="color:#24292E;">{% endautoescape %}</span></span></code></pre></div><p>Whenever you do this, please be very cautious about the variables you are using in this block.</p><h2 id="registering-filters" tabindex="-1">Registering Filters <a class="header-anchor" href="#registering-filters" aria-label="Permalink to &quot;Registering Filters {#registering-filters}&quot;">​</a></h2><p>If you want to register your own filters in Jinja2 you have two ways to do that. You can either put them by hand into the <code>jinja_env</code> of the application or use the <code>template_filter()</code> decorator.</p><p>The two following examples work the same and both reverse an object:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.template_filter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;reverse&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reverse_filter</span><span style="color:#E1E4E8;">(s):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s[::</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reverse_filter</span><span style="color:#E1E4E8;">(s):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> s[::</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">app.jinja_env.filters[</span><span style="color:#9ECBFF;">&#39;reverse&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reverse_filter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.template_filter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;reverse&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reverse_filter</span><span style="color:#24292E;">(s):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s[::</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reverse_filter</span><span style="color:#24292E;">(s):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s[::</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">app.jinja_env.filters[</span><span style="color:#032F62;">&#39;reverse&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reverse_filter</span></span></code></pre></div><p>In case of the decorator the argument is optional if you want to use the function name as name of the filter. Once registered, you can use the filter in your templates in the same way as Jinja2’s builtin filters, for example if you have a Python list in context called mylist:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{% for x in mylist | reverse %}</span></span>
<span class="line"><span style="color:#E1E4E8;">{% endfor %}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{% for x in mylist | reverse %}</span></span>
<span class="line"><span style="color:#24292E;">{% endfor %}</span></span></code></pre></div><h2 id="context-processors" tabindex="-1">Context Processors <a class="header-anchor" href="#context-processors" aria-label="Permalink to &quot;Context Processors {#context-processors}&quot;">​</a></h2><p>To inject new variables automatically into the context of a template, context processors exist in Flask. Context processors run before the template is rendered and have the ability to inject new values into the template context. A context processor is a function that returns a dictionary. The keys and values of this dictionary are then merged with the template context, for all templates in the app:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.context_processor</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">inject_user</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">user</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">g.user)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.context_processor</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inject_user</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">(</span><span style="color:#E36209;">user</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">g.user)</span></span></code></pre></div><p>The context processor above makes a variable called user available in the template with the value of <code>g.user</code>. This example is not very interesting because g is available in templates anyways, but it gives an idea how this works.</p><p>Variables are not limited to values; a context processor can also make functions available to templates (since Python allows passing around functions):</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.context_processor</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">utility_processor</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">format_price</span><span style="color:#E1E4E8;">(amount, currency</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;€&quot;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{</span><span style="color:#E1E4E8;">amount</span><span style="color:#F97583;">:.2f</span><span style="color:#79B8FF;">}{</span><span style="color:#E1E4E8;">currency</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">format_price</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">format_price)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.context_processor</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">utility_processor</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">format_price</span><span style="color:#24292E;">(amount, currency</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;€&quot;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{</span><span style="color:#24292E;">amount</span><span style="color:#D73A49;">:.2f</span><span style="color:#005CC5;">}{</span><span style="color:#24292E;">currency</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">(</span><span style="color:#E36209;">format_price</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">format_price)</span></span></code></pre></div><p>The context processor above makes the <code>format_price</code> function available to all templates:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{{ format_price(0.33) }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{{ format_price(0.33) }}</span></span></code></pre></div><p>You could also build <code>format_price</code> as a template filter (see <a href="/python/flask/user_guide/template#registering-filters">Registering Filters</a>, but this demonstrates how to pass functions in a context processor.</p><h2 id="streaming" tabindex="-1">Streaming <a class="header-anchor" href="#streaming" aria-label="Permalink to &quot;Streaming {#streaming}&quot;">​</a></h2><p>It can be useful to not render the whole template as one complete string, instead render it as a stream, yielding smaller incremental strings. This can be used for streaming HTML in chunks to speed up initial page load, or to save memory when rendering a very large template.</p><p>The Jinja2 template engine supports rendering a template piece by piece, returning an iterator of strings. Flask provides the <code>stream_template()</code> and <code>stream_template_string()</code> functions to make this easier to use.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> stream_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/timeline&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">timeline</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> stream_template(</span><span style="color:#9ECBFF;">&quot;timeline.html&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> stream_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/timeline&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">timeline</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> stream_template(</span><span style="color:#032F62;">&quot;timeline.html&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>These functions automatically apply the <code>stream_with_context()</code> wrapper if a request is active, so that it remains available in the template.</p>`,50),l=[o];function p(r,c,i,d,h,y){return e(),a("div",null,l)}const m=s(t,[["render",p]]);export{E as __pageData,m as default};
