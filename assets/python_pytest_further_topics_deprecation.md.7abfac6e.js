import{_ as s,o as e,c as a,V as n}from"./chunks/framework.48c56699.js";const h=JSON.parse('{"title":"Deprecations and Removals","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/further_topics/deprecation.md","filePath":"python/pytest/further_topics/deprecation.md","lastUpdated":1690389067000}'),o={name:"python/pytest/further_topics/deprecation.md"},t=n(`<h1 id="deprecations-and-removals" tabindex="-1">Deprecations and Removals <a class="header-anchor" href="#deprecations-and-removals" aria-label="Permalink to &quot;Deprecations and Removals&quot;">​</a></h1><p>This page lists all pytest features that are currently deprecated or have been removed in past major releases. The objective is to give users a clear rationale why a certain feature has been removed, and what alternatives should be used instead.</p><h2 id="deprecated-features" tabindex="-1">Deprecated Features <a class="header-anchor" href="#deprecated-features" aria-label="Permalink to &quot;Deprecated Features&quot;">​</a></h2><p>Below is a complete list of all pytest features which are considered deprecated. Using those features will issue <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.PytestWarning" target="_blank" rel="noreferrer">PytestWarning</a> or subclasses, which can be filtered using <a href="https://docs.pytest.org/en/latest/how-to/capture-warnings.html#warnings" target="_blank" rel="noreferrer">standard warning filters</a>.</p><h3 id="support-for-tests-written-for-nose" tabindex="-1">Support for tests written for nose <a class="header-anchor" href="#support-for-tests-written-for-nose" aria-label="Permalink to &quot;Support for tests written for nose&quot;">​</a></h3><p><em>Deprecated since version 7.2.</em></p><p>Support for running tests written for nose is now deprecated.</p><p><code>nose</code> has been in maintenance mode-only for years, and maintaining the plugin is not trivial as it spills over the code base (see <a href="https://github.com/pytest-dev/pytest/issues/9886" target="_blank" rel="noreferrer">issue #9886</a> for more details).</p><h4 id="setup-teardown" tabindex="-1">setup/teardown <a class="header-anchor" href="#setup-teardown" aria-label="Permalink to &quot;setup/teardown&quot;">​</a></h4><p>One thing that might catch users by surprise is that plain <code>setup</code> and <code>teardown</code> methods are not pytest native, they are in fact part of the <code>nose</code> support.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Test</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setup</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">resource</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make_resource</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">teardown</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">resource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_bar</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span></code></pre></div><p>Native pytest support uses <code>setup_method</code> and <code>teardown_method</code> (see <a href="https://docs.pytest.org/en/latest/how-to/xunit_setup.html#xunit-method-setup" target="_blank" rel="noreferrer">Method and function level setup/teardown</a>), so the above should be changed to:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Test</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setup_method</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">resource</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make_resource</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">teardown_method</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">resource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_bar</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        ...</span></span></code></pre></div><p>This is easy to do in an entire code base by doing a simple find/replace.</p><h4 id="with-setup" tabindex="-1">@with_setup <a class="header-anchor" href="#with-setup" aria-label="Permalink to &quot;@with_setup&quot;">​</a></h4><p>Code using <a href="https://docs.pytest.org/en/latest/with-setup-nose" target="_blank" rel="noreferrer">@with_setup</a> such as this:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> nose</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">tools </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> with_setup</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setup_some_resource</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">teardown_some_resource</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">with_setup</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">setup_some_resource</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> teardown_some_resource</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>Will also need to be ported to a supported pytest style. One way to do it is using a fixture:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setup_some_resource</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">teardown_some_resource</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">some_resource</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">setup_some_resource</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">teardown_some_resource</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">some_resource</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><h3 id="the-pytest-instance-collector" tabindex="-1">The pytest.Instance collector <a class="header-anchor" href="#the-pytest-instance-collector" aria-label="Permalink to &quot;The pytest.Instance collector&quot;">​</a></h3><p><em>Removed in version 7.0.</em></p><p>The <code>pytest.Instance</code> collector type has been removed.</p><p>Previously, Python test methods were collected as <code>Class</code> -&gt; <code>Instance</code> -&gt; <code>Function</code>. Now <code>Class</code> collects the test methods directly.</p><p>Most plugins which reference <code>Instance</code> do so in order to ignore or skip it, using a check such as <code>if isinstance(node, Instance): return</code>. Such plugins should simply remove consideration of <code>Instance</code> on pytest&gt;=7. However, to keep such uses working, a dummy type has been instanted in <code>pytest.Instance</code> and <code>_pytest.python.Instance</code>, and importing it emits a deprecation warning. This will be removed in pytest 8.</p><h3 id="fspath-argument-for-node-constructors-replaced-with-pathlib-path" tabindex="-1">fspath argument for Node constructors replaced with pathlib.Path <a class="header-anchor" href="#fspath-argument-for-node-constructors-replaced-with-pathlib-path" aria-label="Permalink to &quot;fspath argument for Node constructors replaced with pathlib.Path&quot;">​</a></h3><p><em>Deprecated since version 7.0.</em></p><p>In order to support the transition from <code>py.path.local</code> to <code>pathlib</code>, the <code>fspath</code> argument to <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.nodes.Node" target="_blank" rel="noreferrer">Node</a> constructors like <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.Function.from_parent" target="_blank" rel="noreferrer">pytest.Function.from_parent()</a> and <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.Class.from_parent" target="_blank" rel="noreferrer">pytest.Class.from_parent()</a> is now deprecated.</p><p>Plugins which construct nodes should pass the <code>path</code> argument, of type <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path" target="_blank" rel="noreferrer">pathlib.Path</a>, instead of the <code>fspath</code> argument.</p><p>Plugins which implement custom items and collectors are encouraged to replace <code>fspath</code> parameters (<code>py.path.local</code>) with path parameters (<code>pathlib.Path</code>), and drop any other usage of the <code>py</code> library if possible.</p><p>If possible, plugins with custom items should use <a href="https://docs.pytest.org/en/latest/deprecations.html#uncooperative-constructors-deprecated" target="_blank" rel="noreferrer">cooperative constructors</a> to avoid hardcoding arguments they only pass on to the superclass.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The name of the <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.nodes.Node" target="_blank" rel="noreferrer">Node</a> arguments and attributes (the new attribute being <code>path</code>) is the opposite of the situation for hooks, <a href="https://docs.pytest.org/en/latest/deprecations.html#legacy-path-hooks-deprecated" target="_blank" rel="noreferrer">outlined below</a> (the old argument being <code>path</code>).</p><p>This is an unfortunate artifact due to historical reasons, which should be resolved in future versions as we slowly get rid of the py dependency (see <a href="https://github.com/pytest-dev/pytest/issues/9283" target="_blank" rel="noreferrer">issue #9283</a> for a longer discussion).</p></div><p>Due to the ongoing migration of methods like <code>reportinfo()</code> which still is expected to return a <code>py.path.local</code> object, nodes still have both <code>fspath</code> (<code>py.path.local</code>) and <code>path</code> (<code>pathlib.Path</code>) attributes, no matter what argument was used in the constructor. We expect to deprecate the <code>fspath</code> attribute in a future release.</p><h3 id="configuring-hook-specs-impls-using-markers" tabindex="-1">Configuring hook specs/impls using markers <a class="header-anchor" href="#configuring-hook-specs-impls-using-markers" aria-label="Permalink to &quot;Configuring hook specs/impls using markers&quot;">​</a></h3><p>Before pluggy, pytest’s plugin library, was its own package and had a clear API, pytest just used <code>pytest.mark</code> to configure hooks.</p><p>The <code>pytest.hookimpl()</code> and <code>pytest.hookspec()</code> decorators have been available since years and should be used instead.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tryfirst</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_runtest_call</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># or</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_runtest_call</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">pytest_runtest_call</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">tryfirst</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">True</span></span></code></pre></div><p>should be changed to:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hookimpl</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">tryfirst</span><span style="color:#89DDFF;">=True)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_runtest_call</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>Changed <code>hookimpl</code> attributes:</p><ul><li><p><code>tryfirst</code></p></li><li><p><code>trylast</code></p></li><li><p><code>optionalhook</code></p></li><li><p><code>hookwrapper</code></p></li></ul><p>Changed <code>hookwrapper</code> attributes:</p><ul><li><p><code>firstresult</code></p></li><li><p><code>historic</code></p></li></ul><h3 id="py-path-local-arguments-for-hooks-replaced-with-pathlib-path" tabindex="-1">py.path.local arguments for hooks replaced with pathlib.Path <a class="header-anchor" href="#py-path-local-arguments-for-hooks-replaced-with-pathlib-path" aria-label="Permalink to &quot;py.path.local arguments for hooks replaced with pathlib.Path&quot;">​</a></h3><p><em>Deprecated since version 7.0.</em></p><p>In order to support the transition from <code>py.path.local</code> to <code>pathlib</code>, the following hooks now receive additional arguments:</p><ul><li><p><a href="https://docs.pytest.org/en/latest/reference/reference.html#std-hook-pytest_ignore_collect" target="_blank" rel="noreferrer">pytest_ignore_collect(collection_path: pathlib.Path)</a> as equivalent to <code>path</code></p></li><li><p><a href="https://docs.pytest.org/en/latest/reference/reference.html#std-hook-pytest_collect_file" target="_blank" rel="noreferrer">pytest_collect_file(file_path: pathlib.Path)</a> as equivalent to <code>path</code></p></li><li><p>[pytest_pycollect_makemodule(module_path: pathlib.Path)](<a href="https://docs.pytest.org/en/latest/reference/reference" target="_blank" rel="noreferrer">https://docs.pytest.org/en/latest/reference/reference</a>. html#std-hook-pytest_pycollect_makemodule) as equivalent to <code>path</code></p></li><li><p><a href="https://docs.pytest.org/en/latest/reference/reference.html#std-hook-pytest_report_header" target="_blank" rel="noreferrer">pytest_report_header(start_path: pathlib.Path)</a> as equivalent to <code>startdir</code></p></li><li><p><a href="https://docs.pytest.org/en/latest/reference/reference.html#std-hook-pytest_report_collectionfinish" target="_blank" rel="noreferrer">pytest_report_collectionfinish(start_path: pathlib.Path)</a> as equivalent to <code>startdir</code></p></li></ul><p>The accompanying <code>py.path.local</code> based paths have been deprecated: plugins which manually invoke those hooks should only pass the new <code>pathlib.Path</code> arguments, and users should change their hook implementations to use the new <code>pathlib.Path</code> arguments.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>The name of the <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.nodes.Node" target="_blank" rel="noreferrer">Node</a> arguments and attributes, <a href="https://docs.pytest.org/en/latest/deprecations.html#node-ctor-fspath-deprecation" target="_blank" rel="noreferrer">outlined above </a>(the new attribute being <code>path</code>) is the opposite of the situation for hooks (the old argument being <code>path</code>).</p><p>This is an unfortunate artifact due to historical reasons, which should be resolved in future versions as we slowly get rid of the <code>py</code> dependency (see <a href="https://github.com/pytest-dev/pytest/issues/9283" target="_blank" rel="noreferrer">issue #9283</a> for a longer discussion).</p></div><h3 id="directly-constructing-internal-classes" tabindex="-1">Directly constructing internal classes <a class="header-anchor" href="#directly-constructing-internal-classes" aria-label="Permalink to &quot;Directly constructing internal classes&quot;">​</a></h3><p><em>Deprecated since version 7.0.</em></p><p>Directly constructing the following classes is now deprecated:</p><ul><li><p><code>_pytest.mark.structures.Mark</code></p></li><li><p><code>_pytest.mark.structures.MarkDecorator</code></p></li><li><p><code>_pytest.mark.structures.MarkGenerator</code></p></li><li><p><code>_pytest.python.Metafunc</code></p></li><li><p><code>_pytest.runner.CallInfo</code></p></li><li><p><code>_pytest._code.ExceptionInfo</code></p></li><li><p><code>_pytest.config.argparsing.Parser</code></p></li><li><p><code>_pytest.config.argparsing.OptionGroup</code></p></li><li><p><code>_pytest.pytester.HookRecorder</code></p></li></ul><p>These constructors have always been considered private, but now issue a deprecation warning, which may become a hard error in pytest 8.</p><h3 id="passing-msg-to-pytest-skip-pytest-fail-or-pytest-exit" tabindex="-1">Passing msg= to pytest.skip, pytest.fail or pytest.exit <a class="header-anchor" href="#passing-msg-to-pytest-skip-pytest-fail-or-pytest-exit" aria-label="Permalink to &quot;Passing msg= to pytest.skip, pytest.fail or pytest.exit&quot;">​</a></h3><p><em>Deprecated since version 7.0.</em></p><p>Passing the keyword argument <code>msg</code> to <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.skip" target="_blank" rel="noreferrer">pytest.skip()</a>, <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.fail" target="_blank" rel="noreferrer">pytest.fail()</a> or <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.exit" target="_blank" rel="noreferrer">pytest.exit()</a> is now deprecated and <code>reason</code> should be used instead. This change is to bring consistency between these functions and the <code>@pytest.mark.skip</code> and <code>@pytest.mark.xfail</code> markers which already accept a <code>reason</code> argument.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_fail_example</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># old</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># new</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_skip_example</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># old</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skip</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># new</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skip</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_exit_example</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># old</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># new</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h3 id="implementing-the-pytest-cmdline-preparse-hook" tabindex="-1">Implementing the pytest_cmdline_preparse hook <a class="header-anchor" href="#implementing-the-pytest-cmdline-preparse-hook" aria-label="Permalink to &quot;Implementing the pytest_cmdline_preparse hook&quot;">​</a></h3><p><em>Deprecated since version 7.0.</em></p><p>Implementing the <a href="https://docs.pytest.org/en/latest/reference/reference.html#std-hook-pytest_cmdline_preparse" target="_blank" rel="noreferrer">pytest_cmdline_preparse</a> hook has been officially deprecated. Implement the <a href="https://docs.pytest.org/en/latest/reference/reference.html#std-hook-pytest_load_initial_conftests" target="_blank" rel="noreferrer">pytest_load_initial_conftests</a> hook instead.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_cmdline_preparse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Config</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># becomes:</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_load_initial_conftests</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">early_config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Config</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">parser</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Parser</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> List</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None:</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><h3 id="diamond-inheritance-between-pytest-collector-and-pytest-item" tabindex="-1">Diamond inheritance between pytest.Collector and pytest.Item <a class="header-anchor" href="#diamond-inheritance-between-pytest-collector-and-pytest-item" aria-label="Permalink to &quot;Diamond inheritance between pytest.Collector and pytest.Item&quot;">​</a></h3><p><em>Deprecated since version 7.0.</em></p><p>Defining a custom pytest node type which is both an <code>pytest.Item</code> and a <code>pytest.Collector</code> (e.g. <code>pytest.File</code>) now issues a warning. It was never sanely supported and triggers hard to debug errors.</p><p>Some plugins providing linting/code analysis have been using this as a hack. Instead, a separate collector node should be used, which collects the item. See <a href="https://docs.pytest.org/en/latest/example/nonpython.html#non-python-tests" target="_blank" rel="noreferrer">Working with non-python tests</a> for an example, as well as an <a href="https://github.com/asmeurer/pytest-flakes/pull/40/files" target="_blank" rel="noreferrer">example pr fixing inheritance</a>.</p><h3 id="constructors-of-custom-pytest-node-subclasses-should-take-kwargs" tabindex="-1">Constructors of custom pytest.Node subclasses should take **kwargs <a class="header-anchor" href="#constructors-of-custom-pytest-node-subclasses-should-take-kwargs" aria-label="Permalink to &quot;Constructors of custom pytest.Node subclasses should take **kwargs&quot;">​</a></h3><p><em>Deprecated since version 7.0.</em></p><p>If custom subclasses of nodes like <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.Item" target="_blank" rel="noreferrer">pytest.Item</a> override the <code>__init__</code> method, they should take <code>**kwargs</code>. Thus,</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomItem</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Item</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">parent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">additional_arg</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">super</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> parent</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">additional_arg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> additional_arg</span></span></code></pre></div><p>should be turned into:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomItem</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Item</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">, </span><span style="color:#A6ACCD;font-style:italic;">additional_arg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;font-style:italic;">kwargs</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">super</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(**</span><span style="color:#82AAFF;">kwargs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">additional_arg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> additional_arg</span></span></code></pre></div><p>to avoid hard-coding the arguments pytest can pass to the superclass. See <a href="https://docs.pytest.org/en/latest/example/nonpython.html#non-python-tests" target="_blank" rel="noreferrer">Working with non-python tests</a> for a full example.</p><p>For cases without conflicts, no deprecation warning is emitted. For cases with conflicts (such as <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.File" target="_blank" rel="noreferrer">pytest.File</a> now taking <code>path</code> instead of <code>fspath</code>, as <a href="https://docs.pytest.org/en/latest/deprecations.html#node-ctor-fspath-deprecation" target="_blank" rel="noreferrer">outlined above</a>), a deprecation warning is now raised.</p><h2 id="applying-a-mark-to-a-fixture-function" tabindex="-1">Applying a mark to a fixture function <a class="header-anchor" href="#applying-a-mark-to-a-fixture-function" aria-label="Permalink to &quot;Applying a mark to a fixture function&quot;">​</a></h2><p><em>Deprecated since version 7.4.</em></p><p>Applying a mark to a fixture function never had any effect, but it is a common user error.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">usefixtures</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">clean_database</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">user</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> User</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>Users expected in this case that the <code>usefixtures</code> mark would have its intended effect of using the <code>clean_database</code> fixture when <code>user</code> was invoked, when in fact it has no effect at all.</p><p>Now pytest will issue a warning when it encounters this problem, and will raise an error in the future versions.</p><h3 id="backward-compatibilities-in-parser-addoption" tabindex="-1">Backward compatibilities in Parser.addoption <a class="header-anchor" href="#backward-compatibilities-in-parser-addoption" aria-label="Permalink to &quot;Backward compatibilities in Parser.addoption&quot;">​</a></h3><p><em>Deprecated since version 2.4.</em></p><p>Several behaviors of <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.Parser.addoption" target="_blank" rel="noreferrer">Parser.addoption</a> are now scheduled for removal in pytest 8 (deprecated since pytest 2.4.0):</p><ul><li><p><code>parser.addoption(..., help=&quot;.. %default ..&quot;)</code> - use <code>%(default)s</code> instead.</p></li><li><p><code>parser.addoption(..., type=&quot;int/string/float/complex&quot;)</code> - use <code>type=int</code> etc. instead.</p></li></ul><h3 id="using-pytest-warns-none" tabindex="-1">Using pytest.warns(None) <a class="header-anchor" href="#using-pytest-warns-none" aria-label="Permalink to &quot;Using pytest.warns(None)&quot;">​</a></h3><p><em>Deprecated since version 7.0.</em></p><p><a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.warns" target="_blank" rel="noreferrer">pytest.warns(None)</a> is now deprecated because it was frequently misused. Its correct usage was checking that the code emits at least one warning of any type - like <code>pytest.warns()</code> or <code>pytest.warns(Warning)</code>.</p><p>See <a href="https://docs.pytest.org/en/latest/how-to/capture-warnings.html#warns-use-cases" target="_blank" rel="noreferrer">Additional use cases of warnings in tests</a> for examples.</p><h3 id="returning-non-none-value-in-test-functions" tabindex="-1">Returning non-None value in test functions <a class="header-anchor" href="#returning-non-none-value-in-test-functions" aria-label="Permalink to &quot;Returning non-None value in test functions&quot;">​</a></h3><p><em>Deprecated since version 7.2.</em></p><p>A <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.PytestReturnNotNoneWarning" target="_blank" rel="noreferrer">pytest.PytestReturnNotNoneWarning</a> is now emitted if a test function returns something other than <code>None</code>.</p><p>This prevents a common mistake among beginners that expect that returning a <code>bool</code> would cause a test to pass or fail, for example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parametrize</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">result</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">result</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> result</span></span></code></pre></div><p>Given that pytest ignores the return value, this might be surprising that it will never fail.</p><p>The proper fix is to change the <code>return</code> to an <code>assert</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parametrize</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">result</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">result</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> result</span></span></code></pre></div><h3 id="the-strict-command-line-option" tabindex="-1">The --strict command-line option <a class="header-anchor" href="#the-strict-command-line-option" aria-label="Permalink to &quot;The --strict command-line option&quot;">​</a></h3><p><em>Deprecated since version 6.2.</em></p><p>The <code>--strict</code> command-line option has been deprecated in favor of <code>--strict-markers</code>, which better conveys what the option does.</p><p>We have plans to maybe in the future to reintroduce <code>--strict</code> and make it an encompassing flag for all strictness related options (<code>--strict-markers</code> and <code>--strict-config</code> at the moment, more might be introduced in the future).</p><h3 id="the-yield-fixture-function-decorator" tabindex="-1">The yield_fixture function/decorator <a class="header-anchor" href="#the-yield-fixture-function-decorator" aria-label="Permalink to &quot;The yield_fixture function/decorator&quot;">​</a></h3><p><em>Deprecated since version 6.2.</em></p><p><code>pytest.yield_fixture</code> is a deprecated alias for <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.fixture" target="_blank" rel="noreferrer">pytest.fixture()</a>.</p><p>It has been so for a very long time, so can be search/replaced safely.</p><h2 id="removed-features-and-breaking-changes" tabindex="-1">Removed Features and Breaking Changes <a class="header-anchor" href="#removed-features-and-breaking-changes" aria-label="Permalink to &quot;Removed Features and Breaking Changes&quot;">​</a></h2><p>As stated in our <a href="https://docs.pytest.org/en/latest/backwards-compatibility.html#backwards-compatibility" target="_blank" rel="noreferrer">Backwards Compatibility Policy</a> policy, deprecated features are removed only in major releases after an appropriate period of deprecation has passed.</p><p>Some breaking changes which could not be deprecated are also listed.</p><h3 id="collecting-init-py-files-no-longer-collects-package" tabindex="-1">Collecting <strong>init</strong>.py files no longer collects package <a class="header-anchor" href="#collecting-init-py-files-no-longer-collects-package" aria-label="Permalink to &quot;Collecting __init__.py files no longer collects package&quot;">​</a></h3><p><em>Removed in version 8.0.</em></p><p>Running <code>pytest pkg/__init__.py</code> now collects the <code>pkg/__init__.py</code> file (module) only. Previously, it collected the entire <code>pkg</code> package, including other test files in the directory, but excluding tests in the<code> __init__.py</code> file itself (unless <a href="https://docs.pytest.org/en/latest/reference/reference.html#confval-python_files" target="_blank" rel="noreferrer">python_files</a> was changed to allow <code>__init__.py</code> file).</p><p>To collect the entire package, specify just the directory: <code>pytest pkg</code>.</p><h3 id="the-pytest-collect-module" tabindex="-1">The pytest.collect module <a class="header-anchor" href="#the-pytest-collect-module" aria-label="Permalink to &quot;The pytest.collect module&quot;">​</a></h3><p><em>Deprecated since version 6.0.</em></p><p><em>Removed in version 7.0.</em></p><p>The <code>pytest.collect</code> module is no longer part of the public API, all its names should now be imported from <code>pytest</code> directly instead.</p><h3 id="the-pytest-warning-captured-hook" tabindex="-1">The pytest_warning_captured hook <a class="header-anchor" href="#the-pytest-warning-captured-hook" aria-label="Permalink to &quot;The pytest_warning_captured hook&quot;">​</a></h3><p><em>Deprecated since version 6.0.</em></p><p><em>Removed in version 7.0.</em></p><p>This hook has an <code>item</code> parameter which cannot be serialized by <code>pytest-xdist</code>.</p><p>Use the <code>pytest_warning_recorded</code> hook instead, which replaces the <code>item</code> parameter by a nodeid parameter.</p><h3 id="the-pytest-fillfuncargs-function" tabindex="-1">The pytest._fillfuncargs function <a class="header-anchor" href="#the-pytest-fillfuncargs-function" aria-label="Permalink to &quot;The pytest._fillfuncargs function&quot;">​</a></h3><p><em>Deprecated since version 6.0.</em></p><p><em>Removed in version 7.0.</em></p><p>This function was kept for backward compatibility with an older plugin.</p><p>It’s functionality is not meant to be used directly, but if you must replace it, use <code>function._request._fillfixtures()</code> instead, though note this is not a public API and may break in the future.</p><h3 id="no-print-logs-command-line-option" tabindex="-1">--no-print-logs command-line option <a class="header-anchor" href="#no-print-logs-command-line-option" aria-label="Permalink to &quot;--no-print-logs command-line option&quot;">​</a></h3><p><em>Deprecated since version 5.4.</em></p><p><em>Removed in version 6.0.</em></p><p>The <code>--no-print-logs</code> option and <code>log_print</code> ini setting are removed. If you used them, please use <code>--show-capture</code> instead.</p><p>A <code>--show-capture</code> command-line option was added in <code>pytest 3.5.0</code> which allows to specify how to display captured output when tests fail: <code>no</code>, <code>stdout</code>, <code>stderr</code>, <code>log</code> or <code>all</code> (the default).</p><h3 id="result-log-result-log" tabindex="-1">Result log (--result-log) <a class="header-anchor" href="#result-log-result-log" aria-label="Permalink to &quot;Result log (--result-log)&quot;">​</a></h3><p><em>Deprecated since version 4.0.</em></p><p><em>Removed in version 6.0.</em></p><p>The <code>--result-log</code> option produces a stream of test reports which can be analysed at runtime, but it uses a custom format which requires users to implement their own parser.</p><p>The <a href="https://github.com/pytest-dev/pytest-reportlog" target="_blank" rel="noreferrer">pytest-reportlog</a> plugin provides a <code>--report-log</code> option, a more standard and extensible alternative, producing one JSON object per-line, and should cover the same use cases. Please try it out and provide feedback.</p><p>The <code>pytest-reportlog</code> plugin might even be merged into the core at some point, depending on the plans for the plugins and number of users using it.</p><h3 id="pytest-collect-directory-hook" tabindex="-1">pytest_collect_directory hook <a class="header-anchor" href="#pytest-collect-directory-hook" aria-label="Permalink to &quot;pytest_collect_directory hook&quot;">​</a></h3><p><em>Removed in version 6.0.</em></p><p>The <code>pytest_collect_directory</code> hook has not worked properly for years (it was called but the results were ignored). Users may consider using <a href="https://docs.pytest.org/en/latest/reference/reference.html#std-hook-pytest_collection_modifyitems" target="_blank" rel="noreferrer">pytest_collection_modifyitems</a> instead.</p><h3 id="terminalreporter-writer" tabindex="-1">TerminalReporter.writer <a class="header-anchor" href="#terminalreporter-writer" aria-label="Permalink to &quot;TerminalReporter.writer&quot;">​</a></h3><p><em>Removed in version 6.0.</em></p><p>The <code>TerminalReporter.writer</code> attribute has been deprecated and should no longer be used. This was inadvertently exposed as part of the public API of that plugin and ties it too much with <code>py.io.TerminalWriter</code>.</p><p>Plugins that used <code>TerminalReporter.writer</code> directly should instead use <code>TerminalReporter</code> methods that provide the same functionality.</p><h3 id="junit-family-default-value-change-to-xunit2" tabindex="-1">junit_family default value change to “xunit2” <a class="header-anchor" href="#junit-family-default-value-change-to-xunit2" aria-label="Permalink to &quot;junit_family default value change to “xunit2”&quot;">​</a></h3><p><em>Changed in version 6.0.</em></p><p>The default value of <code>junit_family</code> option will change to <code>xunit2</code> in pytest 6.0, which is an update of the old <code>xunit1</code> format and is supported by default in modern tools that manipulate this type of file (for example, Jenkins, Azure Pipelines, etc.).</p><p>Users are recommended to try the new <code>xunit2</code> format and see if their tooling that consumes the JUnit XML file supports it.</p><p>To use the new format, update your <code>pytest.ini</code>:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">junit_family</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">xunit2</span></span></code></pre></div><p>If you discover that your tooling does not support the new format, and want to keep using the legacy version, set the option to <code>legacy</code> instead:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">junit_family</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">legacy</span></span></code></pre></div><p>By using <code>legacy</code> you will keep using the legacy/xunit1 format when upgrading to pytest 6.0, where the default format will be <code>xunit2</code>.</p><p>In order to let users know about the transition, pytest will issue a warning in case the <code>--junitxml</code> option is given in the command line but <code>junit_family</code> is not explicitly configured in <code>pytest.ini</code>.</p><p>Services known to support the <code>xunit2</code> format:</p><ul><li><p><a href="https://www.jenkins.io/" target="_blank" rel="noreferrer">Jenkins</a> with the <a href="https://plugins.jenkins.io/junit" target="_blank" rel="noreferrer">JUnit</a> plugin.</p></li><li><p><a href="https://azure.microsoft.com/en-us/services/devops/pipelines" target="_blank" rel="noreferrer">Azure Pipelines</a>.</p></li></ul><h3 id="node-construction-changed-to-node-from-parent" tabindex="-1">Node Construction changed to Node.from_parent <a class="header-anchor" href="#node-construction-changed-to-node-from-parent" aria-label="Permalink to &quot;Node Construction changed to Node.from_parent&quot;">​</a></h3><p><em>Changed in version 6.0.</em></p><p>The construction of nodes now should use the named constructor <code>from_parent</code>. This limitation in api surface intends to enable better/simpler refactoring of the collection tree.</p><p>This means that instead of <code>MyItem(name=&quot;foo&quot;, parent=collector, obj=42)</code> one now has to invoke <code>MyItem.from_parent(collector, name=&quot;foo&quot;)</code>.</p><p>Plugins that wish to support older versions of pytest and suppress the warning can use <code>hasattr</code> to check if <code>from_parent</code> exists in that version:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_pycollect_makeitem</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">collector</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hasattr</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">MyItem</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">from_parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        item </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MyItem</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from_parent</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">collector</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        item</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">obj</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> item</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyItem</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">parent</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">collector</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Note that <code>from_parent</code> should only be called with keyword arguments for the parameters.</p><h3 id="pytest-fixture-arguments-are-keyword-only" tabindex="-1">pytest.fixture arguments are keyword only <a class="header-anchor" href="#pytest-fixture-arguments-are-keyword-only" aria-label="Permalink to &quot;pytest.fixture arguments are keyword only&quot;">​</a></h3><p><em>Removed in version 6.0.</em></p><p>Passing arguments to pytest.fixture() as positional arguments has been removed - pass them by keyword instead.</p><h3 id="funcargnames-alias-for-fixturenames" tabindex="-1">funcargnames alias for fixturenames <a class="header-anchor" href="#funcargnames-alias-for-fixturenames" aria-label="Permalink to &quot;funcargnames alias for fixturenames&quot;">​</a></h3><p><em>Removed in version 6.0.</em></p><p>The <code>FixtureRequest</code>, <code>Metafunc</code>, and <code>Function</code> classes track the names of their associated fixtures, with the aptly-named <code>fixturenames</code> attribute.</p><p>Prior to pytest 2.3, this attribute was named <code>funcargnames</code>, and we have kept that as an alias since. It is finally due for removal, as it is often confusing in places where we or plugin authors must distinguish between fixture names and names supplied by non-fixture things such as <code>pytest.mark.parametrize</code>.</p><h3 id="pytest-config-global" tabindex="-1">pytest.config global <a class="header-anchor" href="#pytest-config-global" aria-label="Permalink to &quot;pytest.config global&quot;">​</a></h3><p><em>Removed in version 5.0.</em></p><p>The <code>pytest.config</code> global object is deprecated. Instead use <code>request.config</code> (via the <code>request</code> fixture) or if you are a plugin author use the <code>pytest_configure(config)</code> hook. Note that many hooks can also access the <code>config</code> object indirectly, through <code>session.config</code> or <code>item.config</code> for example.</p><h3 id="message-parameter-of-pytest-raises" tabindex="-1">&quot;message&quot; parameter of pytest.raises <a class="header-anchor" href="#message-parameter-of-pytest-raises" aria-label="Permalink to &quot;&quot;message&quot; parameter of pytest.raises&quot;">​</a></h3><p><em>Removed in version 5.0.</em></p><p>It is a common mistake to think this parameter will match the exception message, while in fact it only serves to provide a custom message in case the <code>pytest.raises</code> check fails. To prevent users from making this mistake, and because it is believed to be little used, pytest is deprecating it without providing an alternative for the moment.</p><p>If you have a valid use case for this parameter, consider that to obtain the same results you can just call <code>pytest.fail</code> manually at the end of the <code>with</code> statement.</p><p>For example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">raises</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TimeoutError</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Client got unexpected message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">wait_for</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">websocket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">recv</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Becomes:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">raises</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TimeoutError</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">wait_for</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">websocket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">recv</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fail</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Client got unexpected message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>If you still have concerns about this deprecation and future removal, please comment on <a href="https://github.com/pytest-dev/pytest/issues/3974" target="_blank" rel="noreferrer">issue #3974</a>.</p><h3 id="raises-warns-with-a-string-as-the-second-argument" tabindex="-1">raises / warns with a string as the second argument <a class="header-anchor" href="#raises-warns-with-a-string-as-the-second-argument" aria-label="Permalink to &quot;raises / warns with a string as the second argument&quot;">​</a></h3><p><em>Removed in version 5.0.</em></p><p>Use the context manager form of these instead. When necessary, invoke <code>exec</code> directly.</p><p>Example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">raises</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ZeroDivisionError</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1 / 0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">raises</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">SyntaxError</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a $ b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DeprecationWarning</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my_function()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">SyntaxWarning</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">assert(1, 2)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Becomes:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">raises</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ZeroDivisionError</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">raises</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">SyntaxError</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">exec</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a $ b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># exec is required for invalid syntax</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DeprecationWarning</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">my_function</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">SyntaxWarning</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">exec</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">assert(1, 2)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># exec is used to avoid a top-level warning</span></span></code></pre></div><h3 id="using-class-in-custom-collectors" tabindex="-1">Using Class in custom Collectors <a class="header-anchor" href="#using-class-in-custom-collectors" aria-label="Permalink to &quot;Using Class in custom Collectors&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>Using objects named <code>&quot;Class&quot;</code> as a way to customize the type of nodes that are collected in <code>Collector</code> subclasses has been deprecated. Users instead should use <code>pytest_pycollect_makeitem</code> to customize node types during collection.</p><p>This issue should affect only advanced plugins who create new collection types, so if you see this warning message please contact the authors so they can change the code.</p><h3 id="marks-in-pytest-mark-parametrize" tabindex="-1">marks in pytest.mark.parametrize <a class="header-anchor" href="#marks-in-pytest-mark-parametrize" aria-label="Permalink to &quot;marks in pytest.mark.parametrize&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>Applying marks to values of a <code>pytest.mark.parametrize</code> call is now deprecated. For example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parametrize</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a, b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">flaky</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)(</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">36</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">40</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">400</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">500</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>This code applies the <code>pytest.mark.xfail(reason=&quot;flaky&quot;)</code> mark to the <code>(6, 36)</code> value of the above parametrization call.</p><p>This was considered hard to read and understand, and also its implementation presented problems to the code preventing further internal improvements in the marks architecture.</p><p>To update the code, use <code>pytest.param</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parametrize</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a, b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">param</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">36</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">marks</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">flaky</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">40</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">400</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">500</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><h3 id="pytest-funcarg-prefix" tabindex="-1">pytest_funcarg__ prefix <a class="header-anchor" href="#pytest-funcarg-prefix" aria-label="Permalink to &quot;pytest_funcarg__ prefix&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>In very early pytest versions fixtures could be defined using the <code>pytest_funcarg__</code> prefix:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_funcarg__data</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SomeData</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>Switch over to the <code>@pytest.fixture</code> decorator:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SomeData</span><span style="color:#89DDFF;">()</span></span></code></pre></div><h3 id="pytest-section-in-setup-cfg-files" tabindex="-1">[pytest] section in setup.cfg files <a class="header-anchor" href="#pytest-section-in-setup-cfg-files" aria-label="Permalink to &quot;[pytest] section in setup.cfg files&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p><code>[pytest]</code> sections in <code>setup.cfg</code> files should now be named <code>[tool:pytest]</code> to avoid conflicts with other distutils commands.</p><h3 id="metafunc-addcall" tabindex="-1">Metafunc.addcall <a class="header-anchor" href="#metafunc-addcall" aria-label="Permalink to &quot;Metafunc.addcall&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p><code>Metafunc.addcall</code> was a precursor to the current parametrized mechanism. Users should use <a href="https://docs.pytest.org/en/latest/reference/reference.html#pytest.Metafunc.parametrize" target="_blank" rel="noreferrer">pytest.Metafunc.parametrize()</a> instead.</p><p>Example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_generate_tests</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">metafunc</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    metafunc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addcall</span><span style="color:#89DDFF;">({</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">},</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    metafunc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addcall</span><span style="color:#89DDFF;">({</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">},</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Becomes:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_generate_tests</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">metafunc</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    metafunc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parametrize</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">ids</span><span style="color:#89DDFF;">=[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">])</span></span></code></pre></div><h3 id="cached-setup" tabindex="-1">cached_setup <a class="header-anchor" href="#cached-setup" aria-label="Permalink to &quot;cached_setup&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p><code>request.cached_setup</code> was the precursor of the setup/teardown mechanism available to fixtures.</p><p>Example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">db_session</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cached_setup</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#A6ACCD;font-style:italic;">setup</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">Session</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">create</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">teardown</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">lambda</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">session</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">(),</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">scope</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>This should be updated to make use of standard fixture mechanisms:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">scope</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">db_session</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    session </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> session</span></span>
<span class="line"><span style="color:#A6ACCD;">    session</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>You can consult <a href="https://docs.pytest.org/en/latest/funcarg_compare.html" target="_blank" rel="noreferrer">funcarg comparison section in the docs</a> for more information.</p><h3 id="pytest-plugins-in-non-top-level-conftest-files" tabindex="-1">pytest_plugins in non-top-level conftest files <a class="header-anchor" href="#pytest-plugins-in-non-top-level-conftest-files" aria-label="Permalink to &quot;pytest_plugins in non-top-level conftest files&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>Defining <a href="https://docs.pytest.org/en/latest/reference/reference.html#globalvar-pytest_plugins" target="_blank" rel="noreferrer">pytest_plugins</a> is now deprecated in non-top-level <code>conftest.py</code> files because they will activate referenced plugins globally, which is surprising because for all other pytest features <code>conftest.py</code> files are only active for tests at or below it.</p><h3 id="config-warn-and-node-warn" tabindex="-1">Config.warn and Node.warn <a class="header-anchor" href="#config-warn-and-node-warn" aria-label="Permalink to &quot;Config.warn and Node.warn&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>Those methods were part of the internal pytest warnings system, but since 3.8 pytest is using the builtin warning system for its own warnings, so those two functions are now deprecated.</p><p><code>Config.warn</code> should be replaced by calls to the standard <code>warnings.warn</code>, example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">C1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">some warning</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Becomes:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">warnings</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">warn</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">PytestWarning</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">some warning</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span></code></pre></div><p><code>Node.warn</code> now supports two signatures:</p><ul><li><p><code>node.warn(PytestWarning(&quot;some message&quot;))</code>: is now the recommended way to call this function. The warning instance must be a PytestWarning or subclass.</p></li><li><p><code>node.warn(&quot;CI&quot;, &quot;some message&quot;)</code>: this code/message form has been removed and should be converted to the warning instance form above.</p></li></ul><h3 id="record-xml-property" tabindex="-1">record_xml_property <a class="header-anchor" href="#record-xml-property" aria-label="Permalink to &quot;record_xml_property&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>The <code>record_xml_property</code> fixture is now deprecated in favor of the more generic <code>record_property</code>, which can be used by other consumers (for example <code>pytest-html</code>) to obtain custom information about the test run.</p><p>This is just a matter of renaming the fixture as the API is the same:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">record_xml_property</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>Change to:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">record_property</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><h3 id="passing-command-line-string-to-pytest-main" tabindex="-1">Passing command-line string to pytest.main() <a class="header-anchor" href="#passing-command-line-string-to-pytest-main" aria-label="Permalink to &quot;Passing command-line string to pytest.main()&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>Passing a command-line string to <code>pytest.main()</code> is deprecated:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-v -s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Pass a list instead:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-v</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">])</span></span></code></pre></div><p>By passing a string, users expect that pytest will interpret that command-line using the shell rules they are working on (for example <code>bash</code> or <code>Powershell</code>), but this is very hard/impossible to do in a portable way.</p><h3 id="calling-fixtures-directly" tabindex="-1">Calling fixtures directly <a class="header-anchor" href="#calling-fixtures-directly" aria-label="Permalink to &quot;Calling fixtures directly&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>Calling a fixture function directly, as opposed to request them in a test function, is deprecated.</p><p>For example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cell</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">full_cell</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    cell </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cell</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    cell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">make_full</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> cell</span></span></code></pre></div><p>This is a great source of confusion to new users, which will often call the fixture functions and request them from test functions interchangeably, which breaks the fixture resolution model.</p><p>In those cases just request the function directly in the dependent fixture:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cell</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">full_cell</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">cell</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    cell</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">make_full</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> cell</span></span></code></pre></div><p>Alternatively if the fixture function is called multiple times inside a test (making it hard to apply the above pattern) or if you would like to make minimal changes to the code, you can create a fixture which calls the original function together with the name parameter:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cell</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cell</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cell_fixture</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cell</span><span style="color:#89DDFF;">()</span></span></code></pre></div><h3 id="yield-tests" tabindex="-1">yield tests <a class="header-anchor" href="#yield-tests" aria-label="Permalink to &quot;yield tests&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>pytest supported <code>yield</code>-style tests, where a test function actually <code>yield</code> functions and values that are then turned into proper test methods. Example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">check</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> y</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_squared</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> check</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> check</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span></span></code></pre></div><p>This would result into two actual test functions being generated.</p><p>This form of test function doesn’t support fixtures properly, and users should switch to <code>pytest.mark.parametrize</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parametrize</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">x, y</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">[(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">)])</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_squared</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> y</span></span></code></pre></div><h3 id="internal-classes-accessed-through-node" tabindex="-1">Internal classes accessed through Node <a class="header-anchor" href="#internal-classes-accessed-through-node" aria-label="Permalink to &quot;Internal classes accessed through Node&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>Access of <code>Module</code>, <code>Function</code>, <code>Class</code>, <code>Instance</code>, <code>File</code> and <code>Item</code> through <code>Node</code> instances now issue this warning:</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>usage of Function.Module is deprecated, please use pytest.Module instead</p></div><p>Users should just <code>import pytest</code> and access those objects using the <code>pytest</code> module.</p><p>This has been documented as deprecated for years, but only now we are actually emitting deprecation warnings.</p><h3 id="node-get-marker" tabindex="-1">Node.get_marker <a class="header-anchor" href="#node-get-marker" aria-label="Permalink to &quot;Node.get_marker&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>As part of a large Marker revamp and iteration,<code> _pytest.nodes.Node.get_marker</code> is removed. See <a href="https://docs.pytest.org/en/latest/historical-notes.html#update-marker-code" target="_blank" rel="noreferrer">the documentation</a> on tips on how to update your code.</p><h3 id="somefunction-markname" tabindex="-1">somefunction.markname <a class="header-anchor" href="#somefunction-markname" aria-label="Permalink to &quot;somefunction.markname&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>As part of a large <a href="https://docs.pytest.org/en/latest/historical-notes.html#marker-revamp" target="_blank" rel="noreferrer">Marker revamp and iteration</a> we already deprecated using <code>MarkInfo</code> the only correct way to get markers of an element is via <code>node.iter_markers(name)</code>.</p><h3 id="pytest-namespace" tabindex="-1">pytest_namespace <a class="header-anchor" href="#pytest-namespace" aria-label="Permalink to &quot;pytest_namespace&quot;">​</a></h3><p><em>Removed in version 4.0.</em></p><p>This hook is deprecated because it greatly complicates the pytest internals regarding configuration and initialization, making some bug fixes and refactorings impossible.</p><p>Example of usage:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MySymbol</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_namespace</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my_symbol</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MySymbol</span><span style="color:#89DDFF;">()}</span></span></code></pre></div><p>Plugin authors relying on this hook should instead require that users now import the plugin modules directly (with an appropriate public API).</p><p>As a stopgap measure, plugin authors may still inject their names into pytest’s namespace, usually during <code>pytest_configure</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_configure</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">my_symbol</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MySymbol</span><span style="color:#89DDFF;">()</span></span></code></pre></div>`,286),l=[t];function p(r,c,i,y,F,d){return e(),a("div",null,l)}const A=s(o,[["render",p]]);export{h as __pageData,A as default};
