import{_ as e,o as t,c as i,V as r}from"./chunks/framework.48c56699.js";const g=JSON.parse('{"title":"Examples and customization tricks","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/further_topics/example_trick.md","filePath":"python/pytest/further_topics/example_trick.md"}'),s={name:"python/pytest/further_topics/example_trick.md"},a=r('<h1 id="examples-and-customization-tricks" tabindex="-1">Examples and customization tricks <a class="header-anchor" href="#examples-and-customization-tricks" aria-label="Permalink to &quot;Examples and customization tricks&quot;">​</a></h1><p>Here is a (growing) list of examples. Contact us if you need more examples or have questions. Also take a look at the <a href="https://docs.pytest.org/en/latest/contents.html#toc" target="_blank" rel="noreferrer">comprehensive documentation</a> which contains many example snippets as well. Also, <a href="http://stackoverflow.com/search?q=pytest" target="_blank" rel="noreferrer">pytest on stackoverflow.com</a> often comes with example answers.</p><p>For basic examples, see</p><ul><li><p><a href="https://docs.pytest.org/en/latest/getting-started.html#get-started" target="_blank" rel="noreferrer">Get Started</a> for basic introductory examples</p></li><li><p><a href="https://docs.pytest.org/en/latest/how-to/assert.html#assert" target="_blank" rel="noreferrer">How to write and report assertions in tests</a> for basic assertion examples</p></li><li><p><a href="https://docs.pytest.org/en/latest/reference/fixtures.html#fixtures" target="_blank" rel="noreferrer">Fixtures</a> for basic fixture/setup examples</p></li><li><p><a href="https://docs.pytest.org/en/latest/how-to/parametrize.html#parametrize" target="_blank" rel="noreferrer">How to parametrize fixtures and test functions</a> for basic test function parametrization</p></li><li><p><a href="https://docs.pytest.org/en/latest/how-to/unittest.html#unittest" target="_blank" rel="noreferrer">How to use unittest-based tests with pytest</a> for basic unittest integration</p></li><li><p><a href="https://docs.pytest.org/en/latest/how-to/nose.html#noseintegration" target="_blank" rel="noreferrer">How to run tests written for nose</a> for basic nosetests integration</p></li></ul><p>The following examples aim at various use cases you might encounter.</p><ul><li><p><a href="https://docs.pytest.org/en/latest/example/reportingdemo.html" target="_blank" rel="noreferrer">Demo of Python failure reports with pytest</a></p></li><li><p><a href="https://docs.pytest.org/en/latest/example/simple.html" target="_blank" rel="noreferrer">Basic patterns and examples</a></p><ul><li><p><a href="https://docs.pytest.org/en/latest/example/simple.html#how-to-change-command-line-options-defaults" target="_blank" rel="noreferrer">How to change command line options defaults</a></p></li><li><p><a href="https://docs.pytest.org/en/latest/example/simple.html#pass-different-values-to-a-test-function-depending-on-command-line-options" target="_blank" rel="noreferrer">Pass different values to a test function, depending on command line options</a></p></li><li><p><a href="https://docs.pytest.org/en/latest/example/simple.html#dynamically-adding-command-line-options" target="_blank" rel="noreferrer">Dynamically adding command line options</a></p></li><li><p>Control skipping of tests according to command line option</p></li><li><p>Writing well integrated assertion helpers</p></li><li><p>Detect if running from within a pytest run</p></li><li><p>Adding info to test report header</p></li><li><p>Profiling test duration</p></li><li><p>Incremental testing - test steps</p></li><li><p>Package/Directory-level fixtures (setups)</p></li><li><p>Post-process test reports / failures</p></li><li><p>Making test result information available in fixtures</p></li><li><p>PYTEST_CURRENT_TEST environment variable</p></li><li><p>Freezing pytest</p></li></ul></li><li><p>Parametrizing tests</p><ul><li><p>Generating parameters combinations, depending on command line</p></li><li><p>Different options for test IDs</p></li><li><p>A quick port of “testscenarios”</p></li><li><p>Deferring the setup of parametrized resources</p></li><li><p>Indirect parametrization</p></li><li><p>Apply indirect on particular arguments</p></li><li><p>Parametrizing test methods through per-class configuration</p></li><li><p>Parametrization with multiple fixtures</p></li><li><p>Parametrization of optional implementations/imports</p></li><li><p>Set marks or test ID for individual parametrized test</p></li><li><p>Parametrizing conditional raising</p></li></ul></li><li><p>Working with custom markers</p><ul><li><p>Marking test functions and selecting them for a run</p></li><li><p>Selecting tests based on their node ID</p></li><li><p>Using -k expr to select tests based on their name</p></li><li><p>Registering markers</p></li><li><p>Marking whole classes or modules</p></li><li><p>Marking individual tests when using parametrize</p></li><li><p>Custom marker and command line option to control test runs</p></li><li><p>Passing a callable to custom markers</p></li><li><p>Reading markers which were set from multiple places</p></li><li><p>Marking platform specific tests with pytest</p></li><li><p>Automatically adding markers based on test names</p></li></ul></li><li><p>A session-fixture which can look at all collected tests</p></li><li><p>Changing standard (Python) test discovery</p><ul><li><p>Ignore paths during test collection</p></li><li><p>Deselect tests during test collection</p></li><li><p>Keeping duplicate paths specified from command line</p></li><li><p>Changing directory recursion</p></li><li><p>Changing naming conventions</p></li><li><p>Interpreting cmdline arguments as Python packages</p></li><li><p>Finding out what is collected</p></li><li><p>Customizing test collection</p></li></ul></li><li><p>Working with non-python tests</p><ul><li>A basic example for specifying tests in Yaml files</li></ul></li></ul>',6),l=[a];function n(o,p,c,m,d,h){return t(),i("div",null,l)}const u=e(s,[["render",n]]);export{g as __pageData,u as default};
