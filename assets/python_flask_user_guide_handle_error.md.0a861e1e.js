import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"Handling Application Errors","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/handle_error.md","filePath":"python/flask/user_guide/handle_error.md","lastUpdated":1693328004000}'),l={name:"python/flask/user_guide/handle_error.md"},o=e(`<h1 id="handling-application-errors" tabindex="-1">Handling Application Errors <a class="header-anchor" href="#handling-application-errors" aria-label="Permalink to &quot;Handling Application Errors {#handling-application-errors}&quot;">​</a></h1><p>Applications fail, servers fail. Sooner or later you will see an exception in production. Even if your code is 100% correct, you will still see exceptions from time to time. Why? Because everything else involved will fail. Here are some situations where perfectly fine code can lead to server errors:</p><ul><li><p>the client terminated the request early and the application was still reading from the incoming data</p></li><li><p>the database server was overloaded and could not handle the query</p></li><li><p>a filesystem is full</p></li><li><p>a harddrive crashed</p></li><li><p>a backend server overloaded</p></li><li><p>a programming error in a library you are using</p></li><li><p>network connection of the server to another system failed</p></li></ul><p>And that’s just a small sample of issues you could be facing. So how do we deal with that sort of problem? By default if your application runs in production mode, and an exception is raised Flask will display a very simple page for you and log the exception to the <code>logger</code>.</p><p>But there is more you can do, and we will cover some better setups to deal with errors including custom exceptions and 3rd party tools.</p><h2 id="error-logging-tools" tabindex="-1">Error Logging Tools <a class="header-anchor" href="#error-logging-tools" aria-label="Permalink to &quot;Error Logging Tools {#error-logging-tools}&quot;">​</a></h2><p>Sending error mails, even if just for critical ones, can become overwhelming if enough users are hitting the error and log files are typically never looked at. This is why we recommend using <a href="https://sentry.io/" target="_blank" rel="noreferrer">Sentry</a> for dealing with application errors. It’s available as a source-available project <a href="https://github.com/getsentry/sentry" target="_blank" rel="noreferrer">on GitHub</a> and is also available as a hosted version which you can try for free. Sentry aggregates duplicate errors, captures the full stack trace and local variables for debugging, and sends you mails based on new errors or frequency thresholds.</p><p>To use Sentry you need to install the <code>sentry-sdk</code> client with extra <code>flask</code> dependencies.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sentry-sdk[flask]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sentry-sdk[flask]</span></span></code></pre></div><p>And then add this to your Flask app:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sentry_sdk</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> sentry_sdk.integrations.flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> FlaskIntegration</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">sentry_sdk.init(</span><span style="color:#9ECBFF;">&#39;YOUR_DSN_HERE&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">integrations</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[FlaskIntegration()])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sentry_sdk</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> sentry_sdk.integrations.flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> FlaskIntegration</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sentry_sdk.init(</span><span style="color:#032F62;">&#39;YOUR_DSN_HERE&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">integrations</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[FlaskIntegration()])</span></span></code></pre></div><p>The <code>YOUR_DSN_HERE</code> value needs to be replaced with the DSN value you get from your Sentry installation.</p><p>After installation, failures leading to an Internal Server Error are automatically reported to Sentry and from there you can receive error notifications.</p><p>See also:</p><ul><li><p>Sentry also supports catching errors from a worker queue (RQ, Celery, etc.) in a similar fashion. See the <a href="https://docs.sentry.io/platforms/python/" target="_blank" rel="noreferrer">Python SDK docs</a> for more information.</p></li><li><p><a href="https://docs.sentry.io/platforms/python/guides/flask/" target="_blank" rel="noreferrer">Flask-specific documentation</a></p></li></ul><h2 id="error-handlers" tabindex="-1">Error Handlers <a class="header-anchor" href="#error-handlers" aria-label="Permalink to &quot;Error Handlers {#error-handlers}&quot;">​</a></h2><p>When an error occurs in Flask, an appropriate <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" target="_blank" rel="noreferrer">HTTP status code</a> will be returned. 400-499 indicate errors with the client’s request data, or about the data requested. 500-599 indicate errors with the server or application itself.</p><p>You might want to show custom error pages to the user when an error occurs. This can be done by registering error handlers.</p><p>An error handler is a function that returns a response when a type of error is raised, similar to how a view is a function that returns a response when a request URL is matched. It is passed the instance of the error being handled, which is most likely a <code>HTTPException</code>.</p><p>The status code of the response will not be set to the handler’s code. Make sure to provide the appropriate HTTP status code when returning a response from a handler.</p><h3 id="registering" tabindex="-1">Registering <a class="header-anchor" href="#registering" aria-label="Permalink to &quot;Registering {#registering}&quot;">​</a></h3><p>Register handlers by decorating a function with <code>errorhandler()</code>. Or use <code>register_error_handler()</code> to register the function later. Remember to set the error code when returning the response.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">@app.errorhandler</span><span style="color:#E1E4E8;">(werkzeug.exceptions.BadRequest)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle_bad_request</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bad request!&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">400</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># or, without the decorator</span></span>
<span class="line"><span style="color:#E1E4E8;">app.register_error_handler(</span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">, handle_bad_request)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">@app.errorhandler</span><span style="color:#24292E;">(werkzeug.exceptions.BadRequest)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle_bad_request</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bad request!&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">400</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># or, without the decorator</span></span>
<span class="line"><span style="color:#24292E;">app.register_error_handler(</span><span style="color:#005CC5;">400</span><span style="color:#24292E;">, handle_bad_request)</span></span></code></pre></div><p><code>werkzeug.exceptions.HTTPException</code> subclasses like <code>BadRequest</code> and their HTTP codes are interchangeable when registering handlers. (<code>BadRequest.code == 400</code>)</p><p>Non-standard HTTP codes cannot be registered by code because they are not known by Werkzeug. Instead, define a subclass of <code>HTTPException</code> with the appropriate code and register and raise that exception class.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InsufficientStorage</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">werkzeug</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">exceptions</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">HTTPException</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">507</span></span>
<span class="line"><span style="color:#E1E4E8;">    description </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Not enough storage space.&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.register_error_handler(InsufficientStorage, handle_507)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> InsufficientStorage()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InsufficientStorage</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">werkzeug</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">exceptions</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">HTTPException</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">507</span></span>
<span class="line"><span style="color:#24292E;">    description </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Not enough storage space.&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.register_error_handler(InsufficientStorage, handle_507)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> InsufficientStorage()</span></span></code></pre></div><p>Handlers can be registered for any exception class, not just <a href="https://werkzeug.palletsprojects.com/en/2.3.x/exceptions/#werkzeug.exceptions.HTTPException" target="_blank" rel="noreferrer"><code>HTTPException</code></a> subclasses or HTTP status codes. Handlers can be registered for a specific class, or for all subclasses of a parent class.</p><h3 id="handling" tabindex="-1">Handling <a class="header-anchor" href="#handling" aria-label="Permalink to &quot;Handling {#handling}&quot;">​</a></h3><p>When building a Flask application you will run into exceptions. If some part of your code breaks while handling a request (and you have no error handlers registered), a “500 Internal Server Error” (<code>InternalServerError</code>) will be returned by default. Similarly, “404 Not Found” (<code>NotFound</code>) error will occur if a request is sent to an unregistered route. If a route receives an unallowed request method, a “405 Method Not Allowed” (<code>MethodNotAllowed</code>) will be raised. These are all subclasses of <code>HTTPException</code> and are provided by default in Flask.</p><p>Flask gives you the ability to raise any HTTP exception registered by Werkzeug. However, the default HTTP exceptions return simple exception pages. You might want to show custom error pages to the user when an error occurs. This can be done by registering error handlers.</p><p>When Flask catches an exception while handling a request, it is first looked up by code. If no handler is registered for the code, Flask looks up the error by its class hierarchy; the most specific handler is chosen. If no handler is registered, <code>HTTPException</code> subclasses show a generic message about their code, while other exceptions are converted to a generic “500 Internal Server Error”.</p><p>For example, if an instance of <code>ConnectionRefusedError</code> is raised, and a handler is registered for <code>ConnectionError</code> and <code>ConnectionRefusedError</code>, the more specific <code>ConnectionRefusedError</code> handler is called with the exception instance to generate the response.</p><p>Handlers registered on the blueprint take precedence over those registered globally on the application, assuming a blueprint is handling the request that raises the exception. However, the blueprint cannot handle 404 routing errors because the 404 occurs at the routing level before the blueprint can be determined.</p><h3 id="generic-exception-handlers" tabindex="-1">Generic Exception Handlers <a class="header-anchor" href="#generic-exception-handlers" aria-label="Permalink to &quot;Generic Exception Handlers {#generic-exception-handlers}&quot;">​</a></h3><p>It is possible to register error handlers for very generic base classes such as <code>HTTPException</code> or even <code>Exception</code>. However, be aware that these will catch more than you might expect.</p><p>For example, an error handler for <code>HTTPException</code> might be useful for turning the default HTML errors pages into JSON. However, this handler will trigger for things you don’t cause directly, such as 404 and 405 errors during routing. Be sure to craft your handler carefully so you don’t lose information about the HTTP error.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> json</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> werkzeug.exceptions </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> HTTPException</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.errorhandler</span><span style="color:#E1E4E8;">(HTTPException)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle_exception</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;&quot;&quot;Return JSON instead of HTML for HTTP errors.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># start with the correct headers and status code from the error</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e.get_response()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># replace the body with JSON</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> json.dumps({</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;code&quot;</span><span style="color:#E1E4E8;">: e.code,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: e.name,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#E1E4E8;">: e.description,</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.content_type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> json</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> werkzeug.exceptions </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> HTTPException</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.errorhandler</span><span style="color:#24292E;">(HTTPException)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle_exception</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;&quot;&quot;Return JSON instead of HTML for HTTP errors.&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># start with the correct headers and status code from the error</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.get_response()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># replace the body with JSON</span></span>
<span class="line"><span style="color:#24292E;">    response.data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> json.dumps({</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;code&quot;</span><span style="color:#24292E;">: e.code,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">: e.name,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;">: e.description,</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    response.content_type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;application/json&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response</span></span></code></pre></div><p>An error handler for <code>Exception</code> might seem useful for changing how all errors, even unhandled ones, are presented to the user. However, this is similar to doing <code>except Exception</code>: in Python, it will capture all otherwise unhandled errors, including all HTTP status codes.</p><p>In most cases it will be safer to register handlers for more specific exceptions. Since <code>HTTPException</code> instances are valid WSGI responses, you could also pass them through directly.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> werkzeug.exceptions </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> HTTPException</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.errorhandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handle_exception</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># pass through HTTP errors</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isinstance</span><span style="color:#E1E4E8;">(e, HTTPException):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># now you&#39;re handling non-HTTP exceptions only</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;500_generic.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">e), </span><span style="color:#79B8FF;">500</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> werkzeug.exceptions </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> HTTPException</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.errorhandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle_exception</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># pass through HTTP errors</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isinstance</span><span style="color:#24292E;">(e, HTTPException):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># now you&#39;re handling non-HTTP exceptions only</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;500_generic.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">e</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">e), </span><span style="color:#005CC5;">500</span></span></code></pre></div><p>Error handlers still respect the exception class hierarchy. If you register handlers for both <code>HTTPException</code> and <code>Exception</code>, the <code>Exception</code> handler will not handle <code>HTTPException</code> subclasses because the <code>HTTPException</code> handler is more specific.</p><h3 id="unhandled-exceptions" tabindex="-1">Unhandled Exceptions <a class="header-anchor" href="#unhandled-exceptions" aria-label="Permalink to &quot;Unhandled Exceptions {#unhandled-exceptions}&quot;">​</a></h3><p>When there is no error handler registered for an exception, a 500 Internal Server Error will be returned instead. See <code>flask.Flask.handle_exception()</code> for information about this behavior.</p><p>If there is an error handler registered for <code>InternalServerError</code>, this will be invoked. As of Flask 1.1.0, this error handler will always be passed an instance of <code>InternalServerError</code>, not the original unhandled error.</p><p>The original error is available as <code>e.original_exception</code>.</p><p>An error handler for “500 Internal Server Error” will be passed uncaught exceptions in addition to explicit 500 errors. In debug mode, a handler for “500 Internal Server Error” will not be used. Instead, the interactive debugger will be shown.</p><h2 id="custom-error-pages" tabindex="-1">Custom Error Pages <a class="header-anchor" href="#custom-error-pages" aria-label="Permalink to &quot;Custom Error Pages {#custom-error-pages}&quot;">​</a></h2><p>Sometimes when building a Flask application, you might want to raise a <code>HTTPException</code> to signal to the user that something is wrong with the request. Fortunately, Flask comes with a handy <code>abort()</code> function that aborts a request with a HTTP error from werkzeug as desired. It will also provide a plain black and white error page for you with a basic description, but nothing fancy.</p><p>Depending on the error code it is less or more likely for the user to actually see such an error.</p><p>Consider the code below, we might have a user profile route, and if the user fails to pass a username we can raise a “400 Bad Request”. If the user passes a username and we can’t find it, we raise a “404 Not Found”.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> abort, render_template, request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># a username needs to be supplied in the query args</span></span>
<span class="line"><span style="color:#6A737D;"># a successful request would be like /profile?username=jack</span></span>
<span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/profile&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_profile</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.arg.get(</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># if a username isn&#39;t supplied in the request, return a 400 bad request</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> username </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        abort(</span><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_user(</span><span style="color:#FFAB70;">username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">username)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># if a user can&#39;t be found by their username, return 404 not found</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        abort(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;profile.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">user</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> abort, render_template, request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># a username needs to be supplied in the query args</span></span>
<span class="line"><span style="color:#6A737D;"># a successful request would be like /profile?username=jack</span></span>
<span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/profile&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_profile</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.arg.get(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># if a username isn&#39;t supplied in the request, return a 400 bad request</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        abort(</span><span style="color:#005CC5;">400</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_user(</span><span style="color:#E36209;">username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">username)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># if a user can&#39;t be found by their username, return 404 not found</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        abort(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;profile.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">user</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user)</span></span></code></pre></div><p>Here is another example implementation for a “404 Page Not Found” exception:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.errorhandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">page_not_found</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># note that we set the 404 status explicitly</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&#39;404.html&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">404</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.errorhandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">page_not_found</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># note that we set the 404 status explicitly</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&#39;404.html&#39;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">404</span></span></code></pre></div><p>When using Application Factories:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Flask, render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">page_not_found</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&#39;404.html&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">404</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create_app</span><span style="color:#E1E4E8;">(config_filename):</span></span>
<span class="line"><span style="color:#E1E4E8;">    app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.register_error_handler(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">, page_not_found)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> app</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Flask, render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">page_not_found</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&#39;404.html&#39;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">404</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_app</span><span style="color:#24292E;">(config_filename):</span></span>
<span class="line"><span style="color:#24292E;">    app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    app.register_error_handler(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">, page_not_found)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> app</span></span></code></pre></div><p>An example template might be this:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{% extends &quot;layout.html&quot; %}</span></span>
<span class="line"><span style="color:#E1E4E8;">{% block title %}Page Not Found{% endblock %}</span></span>
<span class="line"><span style="color:#E1E4E8;">{% block body %}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;Page Not Found&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;What you were looking for is just not there.</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;&lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{{ url_for(&#39;index&#39;) }}&quot;</span><span style="color:#E1E4E8;">&gt;go somewhere nice&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{% endblock %}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{% extends &quot;layout.html&quot; %}</span></span>
<span class="line"><span style="color:#24292E;">{% block title %}Page Not Found{% endblock %}</span></span>
<span class="line"><span style="color:#24292E;">{% block body %}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;Page Not Found&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;What you were looking for is just not there.</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{{ url_for(&#39;index&#39;) }}&quot;</span><span style="color:#24292E;">&gt;go somewhere nice&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{% endblock %}</span></span></code></pre></div><h3 id="further-examples" tabindex="-1">Further Examples <a class="header-anchor" href="#further-examples" aria-label="Permalink to &quot;Further Examples {#further-examples}&quot;">​</a></h3><p>The above examples wouldn’t actually be an improvement on the default exception pages. We can create a custom 500.html template like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> extends </span><span style="color:#9ECBFF;">&quot;layout.html&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> block title </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">}Internal Server Error{</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> endblock </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> block body </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">h1</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">Internal Server Error</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">h1</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">Oops</span><span style="color:#79B8FF;">...</span><span style="color:#E1E4E8;"> we seem to have made a mistake, sorry!</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;&lt;</span><span style="color:#E1E4E8;">a href</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">{{</span><span style="color:#9ECBFF;"> url_for(&#39;index&#39;) </span><span style="color:#79B8FF;">}}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">Go somewhere nice instead</span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">a</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> endblock </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> extends </span><span style="color:#032F62;">&quot;layout.html&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> block title </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">}Internal Server Error{</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> endblock </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> block body </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">h1</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">Internal Server Error</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">h1</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">Oops</span><span style="color:#005CC5;">...</span><span style="color:#24292E;"> we seem to have made a mistake, sorry!</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;&lt;</span><span style="color:#24292E;">a href</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">{{</span><span style="color:#032F62;"> url_for(&#39;index&#39;) </span><span style="color:#005CC5;">}}</span><span style="color:#032F62;">&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">Go somewhere nice instead</span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> endblock </span><span style="color:#D73A49;">%</span><span style="color:#24292E;">}</span></span></code></pre></div><p>It can be implemented by rendering the template on “500 Internal Server Error”:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.errorhandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal_server_error</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># note that we set the 500 status explicitly</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&#39;500.html&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">500</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.errorhandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal_server_error</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># note that we set the 500 status explicitly</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&#39;500.html&#39;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">500</span></span></code></pre></div><p>When using Application Factories:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Flask, render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal_server_error</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&#39;500.html&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">500</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create_app</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Flask(</span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.register_error_handler(</span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">, internal_server_error)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> app</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Flask, render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal_server_error</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&#39;500.html&#39;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">500</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create_app</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Flask(</span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    app.register_error_handler(</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">, internal_server_error)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> app</span></span></code></pre></div><p>When using Modular Applications with Blueprints:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Blueprint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">blog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Blueprint(</span><span style="color:#9ECBFF;">&#39;blog&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">__name__</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># as a decorator</span></span>
<span class="line"><span style="color:#B392F0;">@blog.errorhandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">internal_server_error</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&#39;500.html&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">500</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># or with register_error_handler</span></span>
<span class="line"><span style="color:#E1E4E8;">blog.register_error_handler(</span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">, internal_server_error)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Blueprint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">blog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Blueprint(</span><span style="color:#032F62;">&#39;blog&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">__name__</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># as a decorator</span></span>
<span class="line"><span style="color:#6F42C1;">@blog.errorhandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">internal_server_error</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&#39;500.html&#39;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">500</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># or with register_error_handler</span></span>
<span class="line"><span style="color:#24292E;">blog.register_error_handler(</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">, internal_server_error)</span></span></code></pre></div><h2 id="blueprint-error-handlers" tabindex="-1">Blueprint Error Handlers <a class="header-anchor" href="#blueprint-error-handlers" aria-label="Permalink to &quot;Blueprint Error Handlers {#blueprint-error-handlers}&quot;">​</a></h2><p>In <a href="/python/flask/user_guide/blueprint#modular-applications-with-blueprints">Modular Applications with Blueprints</a>, most error handlers will work as expected. However, there is a caveat concerning handlers for <code>404</code> and <code>405</code> exceptions. These error handlers are only invoked from an appropriate <code>raise</code> statement or a call to <code>abort</code> in another of the blueprint’s view functions; they are not invoked by, e.g., an invalid URL access.</p><p>This is because the blueprint does not “own” a certain URL space, so the application instance has no way of knowing which blueprint error handler it should run if given an invalid URL. If you would like to execute different handling strategies for these errors based on URL prefixes, they may be defined at the application level using the <code>request</code> proxy object.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jsonify, render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># at the application level</span></span>
<span class="line"><span style="color:#6A737D;"># not the blueprint level</span></span>
<span class="line"><span style="color:#B392F0;">@app.errorhandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">page_not_found</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># if a request is in our blog URL space</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> request.path.startswith(</span><span style="color:#9ECBFF;">&#39;/blog/&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># we return a custom blog 404 page</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;blog/404.html&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">404</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># otherwise we return our generic site-wide 404 page</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;404.html&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">404</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.errorhandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">405</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">method_not_allowed</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># if a request has the wrong method to our API</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> request.path.startswith(</span><span style="color:#9ECBFF;">&#39;/api/&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># we return a json saying so</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify(</span><span style="color:#FFAB70;">message</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Method Not Allowed&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">405</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># otherwise we return a generic site-wide 405 page</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> render_template(</span><span style="color:#9ECBFF;">&quot;405.html&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">405</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jsonify, render_template</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># at the application level</span></span>
<span class="line"><span style="color:#6A737D;"># not the blueprint level</span></span>
<span class="line"><span style="color:#6F42C1;">@app.errorhandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">page_not_found</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># if a request is in our blog URL space</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> request.path.startswith(</span><span style="color:#032F62;">&#39;/blog/&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># we return a custom blog 404 page</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;blog/404.html&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">404</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># otherwise we return our generic site-wide 404 page</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;404.html&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">404</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.errorhandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">405</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method_not_allowed</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># if a request has the wrong method to our API</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> request.path.startswith(</span><span style="color:#032F62;">&#39;/api/&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># we return a json saying so</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify(</span><span style="color:#E36209;">message</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Method Not Allowed&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">405</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;"># otherwise we return a generic site-wide 405 page</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> render_template(</span><span style="color:#032F62;">&quot;405.html&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">405</span></span></code></pre></div><h2 id="returning-api-errors-as-json" tabindex="-1">Returning API Errors as JSON <a class="header-anchor" href="#returning-api-errors-as-json" aria-label="Permalink to &quot;Returning API Errors as JSON {#returning-api-errors-as-json}&quot;">​</a></h2><p>When building APIs in Flask, some developers realise that the built-in exceptions are not expressive enough for APIs and that the content type of <code>text/html</code> they are emitting is not very useful for API consumers.</p><p>Using the same techniques as above and <code>jsonify()</code> we can return JSON responses to API errors. <code>abort()</code> is called with a <code>description</code> parameter. The error handler will use that as the JSON error message, and set the status code to 404.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> abort, jsonify</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.errorhandler</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resource_not_found</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify(</span><span style="color:#FFAB70;">error</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(e)), </span><span style="color:#79B8FF;">404</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/cheese&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_one_cheese</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_resource()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> resource </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        abort(</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">description</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Resource not found&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify(resource)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> abort, jsonify</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.errorhandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resource_not_found</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify(</span><span style="color:#E36209;">error</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(e)), </span><span style="color:#005CC5;">404</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/cheese&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_one_cheese</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_resource()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> resource </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        abort(</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">, </span><span style="color:#E36209;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Resource not found&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify(resource)</span></span></code></pre></div><p>We can also create custom exception classes. For instance, we can introduce a new custom exception for an API that can take a proper human readable message, a status code for the error and some optional payload to give more context for the error.</p><p>This is a simple example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jsonify, request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InvalidAPIUsage</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    status_code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">400</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, message, status_code</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">, payload</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">super</span><span style="color:#E1E4E8;">().</span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> status_code </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.status_code </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> status_code</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.payload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> payload</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to_dict</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        rv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dict</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.payload </span><span style="color:#F97583;">or</span><span style="color:#E1E4E8;"> ())</span></span>
<span class="line"><span style="color:#E1E4E8;">        rv[</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">.message</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> rv</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@app.errorhandler</span><span style="color:#E1E4E8;">(InvalidAPIUsage)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invalid_api_usage</span><span style="color:#E1E4E8;">(e):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify(e.to_dict()), e.status_code</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># an API app route for getting user information</span></span>
<span class="line"><span style="color:#6A737D;"># a correct request might be /api/user?user_id=420</span></span>
<span class="line"><span style="color:#B392F0;">@app.route</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/api/user&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user_api</span><span style="color:#E1E4E8;">(user_id):</span></span>
<span class="line"><span style="color:#E1E4E8;">    user_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> request.arg.get(</span><span style="color:#9ECBFF;">&quot;user_id&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> user_id:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> InvalidAPIUsage(</span><span style="color:#9ECBFF;">&quot;No user id provided!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_user(</span><span style="color:#FFAB70;">user_id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">user_id)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> user:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">raise</span><span style="color:#E1E4E8;"> InvalidAPIUsage(</span><span style="color:#9ECBFF;">&quot;No such user!&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">status_code</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> jsonify(user.to_dict())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jsonify, request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InvalidAPIUsage</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    status_code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">400</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, message, status_code</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">, payload</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">None</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> status_code </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.status_code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> status_code</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.payload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> payload</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to_dict</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        rv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dict</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.payload </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> ())</span></span>
<span class="line"><span style="color:#24292E;">        rv[</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">.message</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rv</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@app.errorhandler</span><span style="color:#24292E;">(InvalidAPIUsage)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invalid_api_usage</span><span style="color:#24292E;">(e):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify(e.to_dict()), e.status_code</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># an API app route for getting user information</span></span>
<span class="line"><span style="color:#6A737D;"># a correct request might be /api/user?user_id=420</span></span>
<span class="line"><span style="color:#6F42C1;">@app.route</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/api/user&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user_api</span><span style="color:#24292E;">(user_id):</span></span>
<span class="line"><span style="color:#24292E;">    user_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.arg.get(</span><span style="color:#032F62;">&quot;user_id&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> user_id:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> InvalidAPIUsage(</span><span style="color:#032F62;">&quot;No user id provided!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_user(</span><span style="color:#E36209;">user_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">user_id)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> user:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">raise</span><span style="color:#24292E;"> InvalidAPIUsage(</span><span style="color:#032F62;">&quot;No such user!&quot;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">status_code</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">404</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jsonify(user.to_dict())</span></span></code></pre></div><p>A view can now raise that exception with an error message. Additionally some extra payload can be provided as a dictionary through the payload parameter.</p><h2 id="logging" tabindex="-1">Logging <a class="header-anchor" href="#logging" aria-label="Permalink to &quot;Logging {#logging}&quot;">​</a></h2><p>See <a href="/python/flask/user_guide/logging#logging">Logging</a> for information about how to log exceptions, such as by emailing them to admins.</p><h2 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging {#debugging}&quot;">​</a></h2><p>See <a href="/python/flask/user_guide/debug_error#debugging-application-errors">Debugging Application Errors</a> for information about how to debug errors in development and production.</p>`,82),p=[o];function r(t,c,i,y,E,d){return n(),a("div",null,p)}const g=s(l,[["render",r]]);export{h as __pageData,g as default};
