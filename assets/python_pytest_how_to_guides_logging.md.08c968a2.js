import{_ as s,o as a,c as o,V as l}from"./chunks/framework.d3b95951.js";const g=JSON.parse('{"title":"How to manage logging","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/logging.md","filePath":"python/pytest/how_to_guides/logging.md"}'),n={name:"python/pytest/how_to_guides/logging.md"},e=l(`<h1 id="how-to-manage-logging" tabindex="-1">How to manage logging <a class="header-anchor" href="#how-to-manage-logging" aria-label="Permalink to &quot;How to manage logging&quot;">​</a></h1><p>pytest captures log messages of level <code>WARNING</code> or above automatically and displays them in their own section for each failed test in the same manner as captured stdout and stderr.</p><p>Running without options:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span></span></code></pre></div><p>Shows failed tests like so:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">-----------------------</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stdlog</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">call</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">----------------------</span></span>
<span class="line"><span style="color:#FFCB6B;">test_reporting.py</span><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">26</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">WARNING</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">going</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">logger</span></span>
<span class="line"><span style="color:#FFCB6B;">-----------------------</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stdout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">call</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">----------------------</span></span>
<span class="line"><span style="color:#FFCB6B;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">going</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stdout</span></span>
<span class="line"><span style="color:#FFCB6B;">-----------------------</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stderr</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">call</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">----------------------</span></span>
<span class="line"><span style="color:#FFCB6B;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">going</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stderr</span></span>
<span class="line"><span style="color:#A6ACCD;">==================== </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.02</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">seconds</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=====================</span></span></code></pre></div><p>By default each captured log message shows the module, line number, log level and message.</p><p>If desired the log and date format can be specified to anything that the logging module supports by passing specific formatting options:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--log-format=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%(asctime)s %(levelname)s %(message)s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C3E88D;">--log-date-format=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%Y-%m-%d %H:%M:%S</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>Shows failed tests like so:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">-----------------------</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stdlog</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">call</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">----------------------</span></span>
<span class="line"><span style="color:#FFCB6B;">2010-04-10</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">14</span><span style="color:#C3E88D;">:48:44</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">WARNING</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">going</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">logger</span></span>
<span class="line"><span style="color:#FFCB6B;">-----------------------</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stdout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">call</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">----------------------</span></span>
<span class="line"><span style="color:#FFCB6B;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">going</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stdout</span></span>
<span class="line"><span style="color:#FFCB6B;">-----------------------</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Captured</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stderr</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">call</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">----------------------</span></span>
<span class="line"><span style="color:#FFCB6B;">text</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">going</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stderr</span></span>
<span class="line"><span style="color:#A6ACCD;">==================== </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.02</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">seconds</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=====================</span></span></code></pre></div><p>These options can also be customized through pytest.ini file:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_format</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> %(asctime)s %(levelname)s %(message)s</span></span>
<span class="line"><span style="color:#F07178;">log_date_format</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> %Y-%m-%d %H:%M:%S</span></span></code></pre></div><p>Specific loggers can be disabled via <code>--log-disable={logger_name}</code>. This argument can be passed multiple times:</p><p>pytest --log-disable=main --log-disable=testing Further it is possible to disable reporting of captured content (stdout, stderr and logs) on failed tests completely with:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--show-capture=no</span></span></code></pre></div><h2 id="caplog-fixture" tabindex="-1">caplog fixture <a class="header-anchor" href="#caplog-fixture" aria-label="Permalink to &quot;caplog fixture&quot;">​</a></h2><p>Inside tests it is possible to change the log level for the captured log messages. This is supported by the <code>caplog</code> fixture:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">caplog</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    caplog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_level</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">logging</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">INFO</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>By default the level is set on the root logger, however as a convenience it is also possible to set the log level of any logger:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">caplog</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    caplog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set_level</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">logging</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">CRITICAL</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">logger</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">root.baz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>The log levels set are restored automatically at the end of the test.</p><p>It is also possible to use a context manager to temporarily change the log level inside a <code>with</code> block:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_bar</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">caplog</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> caplog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">at_level</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">logging</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">INFO</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">pass</span></span></code></pre></div><p>Again, by default the level of the root logger is affected but the level of any logger can be changed instead with:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_bar</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">caplog</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> caplog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">at_level</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">logging</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">CRITICAL</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">logger</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">root.baz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">pass</span></span></code></pre></div><p>Lastly all the logs sent to the logger during the test run are made available on the fixture in the form of both the <code>logging.LogRecord</code> instances and the final log text. This is useful for when you want to assert on the contents of a message:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_baz</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">caplog</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">func_under_test</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> record </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> caplog</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">records</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> record</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">levelname</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CRITICAL</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wally</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> caplog</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">text</span></span></code></pre></div><p>For all the available attributes of the log records see the <code>logging.LogRecord</code> class.</p><p>You can also resort to record_tuples if all you want to do is to ensure, that certain messages have been logged under a given logger name with a given severity and message:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_foo</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">caplog</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    logging</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getLogger</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">boo </span><span style="color:#F78C6C;">%s</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">arg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> caplog</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">record_tuples</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> logging</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">INFO</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">boo arg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span></code></pre></div><p>You can call <code>caplog.clear()</code> to reset the captured log records in a test:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_something_with_clearing_records</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">caplog</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">some_method_that_creates_log_records</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    caplog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">your_test_method</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">rec</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> rec </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> caplog</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">records</span><span style="color:#89DDFF;">]</span></span></code></pre></div><p>The <code>caplog.records</code> attribute contains records from the current stage only, so inside the setup phase it contains only <code>setup</code> logs, same with the <code>call</code> and <code>teardown</code> phases.</p><p>To access logs from other stages, use the <code>caplog.get_records(when)</code> method. As an example, if you want to make sure that tests which use a certain fixture never log any warnings, you can inspect the records for the <code>setup</code> and <code>call</code> stages during teardown like so:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fixture</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">window</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">caplog</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    window </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create_window</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> window</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> when </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">call</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        messages </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> caplog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_records</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">when</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">levelno</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> logging</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">WARNING</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> messages</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fail</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">f</span><span style="color:#C3E88D;">&quot;warning messages encountered during testing: </span><span style="color:#F78C6C;">{</span><span style="color:#82AAFF;">messages</span><span style="color:#F78C6C;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>The full API is available at <a href="/python/pytest/reference_guides/api_reference#caplog">pytest.LogCaptureFixture</a>.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>The <code>caplog</code> fixture adds a handler to the root logger to capture logs. If the root logger is modified during a test, for example with <code>logging.config.dictConfig</code>, this handler may be removed and cause no logs to be captured. To avoid this, ensure that any root logger configuration only adds to the existing handlers.</p></div><h2 id="live-logs" tabindex="-1">Live Logs <a class="header-anchor" href="#live-logs" aria-label="Permalink to &quot;Live Logs&quot;">​</a></h2><p>By setting the <code>log_cli</code> configuration option to <code>true</code>, pytest will output logging records as they are emitted directly into the console.</p><p>You can specify the logging level for which log records with equal or higher level are printed to the console by passing <code>--log-cli-level</code>. This setting accepts the logging level names or numeric values as seen in logging’s documentation.</p><p>Additionally, you can also specify <code>--log-cli-format</code> and <code>--log-cli-date-format</code> which mirror and default to <code>--log-format</code> and <code>--log-date-format</code> if not provided, but are applied only to the console logging handler.</p><p>All of the CLI log options can also be set in the configuration INI file. The option names are:</p><ul><li><p><code>log_cli_level</code></p></li><li><p><code>log_cli_format</code></p></li><li><p><code>log_cli_date_format</code></p></li></ul><p>If you need to record the whole test suite logging calls to a file, you can pass <code>--log-file=/path/to/log/file</code>. This log file is opened in write mode which means that it will be overwritten at each run tests session. Note that relative paths for the log-file location, whether passed on the CLI or declared in a config file, are always resolved relative to the current working directory.</p><p>You can also specify the logging level for the log file by passing <code>--log-file-level</code>. This setting accepts the logging level names or numeric values as seen in logging’s documentation.</p><p>Additionally, you can also specify <code>--log-file-format</code> and <code>--log-file-date-format</code> which are equal to <code>--log-format</code> and <code>--log-date-format</code> but are applied to the log file logging handler.</p><p>All of the log file options can also be set in the configuration INI file. The option names are:</p><ul><li><p><code>log_file</code></p></li><li><p><code>log_file_level</code></p></li><li><p><code>log_file_format</code></p></li><li><p><code>log_file_date_format</code></p></li></ul><p>You can call <code>set_log_path()</code> to customize the log_file path dynamically. This functionality is considered experimental.</p><h2 id="customizing-colors" tabindex="-1">Customizing Colors <a class="header-anchor" href="#customizing-colors" aria-label="Permalink to &quot;Customizing Colors&quot;">​</a></h2><p>Log levels are colored if colored terminal output is enabled. Changing from default colors or putting color on custom log levels is supported through <code>add_color_level()</code>. Example:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hookimpl</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pytest_configure</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">config</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    logging_plugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">pluginmanager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_plugin</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">logging-plugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># Change color on existing log level</span></span>
<span class="line"><span style="color:#A6ACCD;">    logging_plugin</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">log_cli_handler</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">formatter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_color_level</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">logging</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">INFO</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cyan</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># Add color to a custom log level (a custom log level \`SPAM\` is already set up)</span></span>
<span class="line"><span style="color:#A6ACCD;">    logging_plugin</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">log_cli_handler</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">formatter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add_color_level</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">logging</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">SPAM</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">blue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This feature and its API are considered experimental and might change between releases without a deprecation notice.</p></div><h2 id="release-notes" tabindex="-1">Release notes <a class="header-anchor" href="#release-notes" aria-label="Permalink to &quot;Release notes&quot;">​</a></h2><p>This feature was introduced as a drop-in replacement for the pytest-catchlog plugin and they conflict with each other. The backward compatibility API with <code>pytest-capturelog</code> has been dropped when this feature was introduced, so if for that reason you still need <code>pytest-catchlog</code> you can disable the internal feature by adding to your <code>pytest.ini</code>:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">addopts</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">-p no:logging</span></span></code></pre></div><h2 id="incompatible-changes-in-pytest-3-4" tabindex="-1">Incompatible changes in pytest 3.4 <a class="header-anchor" href="#incompatible-changes-in-pytest-3-4" aria-label="Permalink to &quot;Incompatible changes in pytest 3.4&quot;">​</a></h2><p>This feature was introduced in <code>3.3</code> and some incompatible changes have been made in <code>3.4</code> after community feedback:</p><ul><li><p>Log levels are no longer changed unless explicitly requested by the <code>log_level</code> configuration or <code>--log-level</code> command-line options. This allows users to configure logger objects themselves. Setting <code>log_level</code> will set the level that is captured globally so if a specific test requires a lower level than this, use the <code>caplog.set_level()</code> functionality otherwise that test will be prone to failure.</p></li><li><p><a href="/python/pytest/how_to_guides/logging#live-logs">Live Logs</a> is now disabled by default and can be enabled setting the <code>log_cli</code> configuration option to <code>true</code>. When enabled, the verbosity is increased so logging for each test is visible.</p></li><li><p><a href="/python/pytest/how_to_guides/logging#live-logs">Live Logs</a> are now sent to <code>sys.stdout</code> and no longer require the <code>-s</code> command-line option to work.</p></li></ul><p>If you want to partially restore the logging behavior of version <code>3.3</code>, you can add this options to your <code>ini</code> file:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">log_cli</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">true</span></span>
<span class="line"><span style="color:#F07178;">log_level</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">NOTSET</span></span></code></pre></div><p>More details about the discussion that lead to this changes can be read in <a href="https://github.com/pytest-dev/pytest/issues/3013" target="_blank" rel="noreferrer">issue #3013</a>.</p>`,63),p=[e];function t(c,r,i,y,D,F){return a(),o("div",null,p)}const d=s(n,[["render",t]]);export{g as __pageData,d as default};
