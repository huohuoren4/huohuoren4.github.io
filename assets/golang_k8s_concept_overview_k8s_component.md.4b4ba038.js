import{_ as e,o as r,c as t,Q as o}from"./chunks/framework.01af844e.js";const n="/k8s/components-of-kubernetes.png",m=JSON.parse('{"title":"Kubernetes Components","description":"","frontmatter":{},"headers":[],"relativePath":"golang/k8s/concept/overview/k8s_component.md","filePath":"golang/k8s/concept/overview/k8s_component.md","lastUpdated":1693758126000}'),a={name:"golang/k8s/concept/overview/k8s_component.md"},s=o('<h1 id="kubernetes-components" tabindex="-1">Kubernetes Components <a class="header-anchor" href="#kubernetes-components" aria-label="Permalink to &quot;Kubernetes Components&quot;">​</a></h1><p>When you deploy Kubernetes, you get a cluster.</p><p>A Kubernetes cluster consists of a set of worker machines, called <a href="https://kubernetes.io/docs/concepts/architecture/nodes/" target="_blank" rel="noreferrer">nodes</a>, that run containerized applications. Every cluster has at least one worker node.</p><p>The worker node(s) host the <a href="https://kubernetes.io/docs/concepts/workloads/pods/" target="_blank" rel="noreferrer">Pods</a> that are the components of the application workload. The <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-control-plane" target="_blank" rel="noreferrer">control plane</a> manages the worker nodes and the Pods in the cluster. In production environments, the control plane usually runs across multiple computers and a cluster usually runs multiple nodes, providing fault-tolerance and high availability.</p><p>This document outlines the various components you need to have for a complete and working Kubernetes cluster.</p><p><img src="'+n+'" alt="components-of-kubernetes"></p><p>The components of a Kubernetes cluster</p><h2 id="control-plane-components" tabindex="-1">Control Plane Components <a class="header-anchor" href="#control-plane-components" aria-label="Permalink to &quot;Control Plane Components&quot;">​</a></h2><p>The control plane&#39;s components make global decisions about the cluster (for example, scheduling), as well as detecting and responding to cluster events (for example, starting up a new <a href="https://kubernetes.io/docs/concepts/workloads/pods/" target="_blank" rel="noreferrer">pod</a> when a deployment&#39;s <code>replicas</code> field is unsatisfied).</p><p>Control plane components can be run on any machine in the cluster. However, for simplicity, set up scripts typically start all control plane components on the same machine, and do not run user containers on this machine. See <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/" target="_blank" rel="noreferrer">Creating Highly Available clusters with kubeadm</a> for an example control plane setup that runs across multiple machines.</p><h3 id="kube-apiserver" tabindex="-1">kube-apiserver <a class="header-anchor" href="#kube-apiserver" aria-label="Permalink to &quot;kube-apiserver&quot;">​</a></h3><p>The API server is a component of the Kubernetes <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-control-plane" target="_blank" rel="noreferrer">control plane</a> that exposes the Kubernetes API. The API server is the front end for the Kubernetes control plane.</p><p>The main implementation of a Kubernetes API server is <a href="https://kubernetes.io/docs/reference/generated/kube-apiserver/" target="_blank" rel="noreferrer">kube-apiserver</a>. kube-apiserver is designed to scale horizontally—that is, it scales by deploying more instances. You can run several instances of kube-apiserver and balance traffic between those instances.</p><h3 id="etcd" tabindex="-1">etcd <a class="header-anchor" href="#etcd" aria-label="Permalink to &quot;etcd&quot;">​</a></h3><p>Consistent and highly-available key value store used as Kubernetes&#39; backing store for all cluster data.</p><p>If your Kubernetes cluster uses etcd as its backing store, make sure you have a <a href="https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster" target="_blank" rel="noreferrer">back up</a> plan for the data.</p><p>You can find in-depth information about etcd in the official <a href="https://etcd.io/docs/" target="_blank" rel="noreferrer">documentation</a>.</p><h3 id="kube-scheduler" tabindex="-1">kube-scheduler <a class="header-anchor" href="#kube-scheduler" aria-label="Permalink to &quot;kube-scheduler&quot;">​</a></h3><p>Control plane component that watches for newly created <a href="https://kubernetes.io/docs/concepts/workloads/pods/" target="_blank" rel="noreferrer">Pods</a> with no assigned <a href="https://kubernetes.io/docs/concepts/architecture/nodes/" target="_blank" rel="noreferrer">node</a>, and selects a node for them to run on.</p><p>Factors taken into account for scheduling decisions include: individual and collective resource requirements, hardware/software/policy constraints, affinity and anti-affinity specifications, data locality, inter-workload interference, and deadlines.</p><h3 id="kube-controller-manager" tabindex="-1">kube-controller-manager <a class="header-anchor" href="#kube-controller-manager" aria-label="Permalink to &quot;kube-controller-manager&quot;">​</a></h3><p>Control plane component that runs <a href="https://kubernetes.io/docs/concepts/architecture/controller/" target="_blank" rel="noreferrer">controller</a> processes.</p><p>Logically, each <a href="https://kubernetes.io/docs/concepts/architecture/controller/" target="_blank" rel="noreferrer">controller</a> is a separate process, but to reduce complexity, they are all compiled into a single binary and run in a single process.</p><p>There are many different types of controllers. Some examples of them are:</p><ul><li>Node controller: Responsible for noticing and responding when nodes go down.</li><li>Job controller: Watches for Job objects that represent one-off tasks, then creates Pods to run those tasks to completion.</li><li>EndpointSlice controller: Populates EndpointSlice objects (to provide a link between Services and Pods).</li><li>ServiceAccount controller: Create default ServiceAccounts for new namespaces.</li></ul><p>The above is not an exhaustive list.</p><h3 id="cloud-controller-manager" tabindex="-1">cloud-controller-manager <a class="header-anchor" href="#cloud-controller-manager" aria-label="Permalink to &quot;cloud-controller-manager&quot;">​</a></h3><p>A Kubernetes <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-control-plane" target="_blank" rel="noreferrer">control plane</a> component that embeds cloud-specific control logic. The cloud controller manager lets you link your cluster into your cloud provider&#39;s API, and separates out the components that interact with that cloud platform from components that only interact with your cluster. The cloud-controller-manager only runs controllers that are specific to your cloud provider. If you are running Kubernetes on your own premises, or in a learning environment inside your own PC, the cluster does not have a cloud controller manager.</p><p>As with the kube-controller-manager, the cloud-controller-manager combines several logically independent control loops into a single binary that you run as a single process. You can scale horizontally (run more than one copy) to improve performance or to help tolerate failures.</p><p>The following controllers can have cloud provider dependencies:</p><ul><li>Node controller: For checking the cloud provider to determine if a node has been deleted in the cloud after it stops responding</li><li>Route controller: For setting up routes in the underlying cloud infrastructure</li><li>Service controller: For creating, updating and deleting cloud provider load balancers</li></ul><h2 id="node-components" tabindex="-1">Node Components <a class="header-anchor" href="#node-components" aria-label="Permalink to &quot;Node Components&quot;">​</a></h2><p>Node components run on every node, maintaining running pods and providing the Kubernetes runtime environment.</p><h3 id="kubelet" tabindex="-1">kubelet <a class="header-anchor" href="#kubelet" aria-label="Permalink to &quot;kubelet&quot;">​</a></h3><p>An agent that runs on each <a href="https://kubernetes.io/docs/concepts/architecture/nodes/" target="_blank" rel="noreferrer">node</a> in the cluster. It makes sure that <a href="https://kubernetes.io/docs/concepts/containers/" target="_blank" rel="noreferrer">containers</a> are running in a <a href="https://kubernetes.io/docs/concepts/workloads/pods/" target="_blank" rel="noreferrer">Pod</a>.</p><p>The kubelet takes a set of PodSpecs that are provided through various mechanisms and ensures that the containers described in those PodSpecs are running and healthy. The kubelet doesn&#39;t manage containers which were not created by Kubernetes.</p><h3 id="kube-proxy" tabindex="-1">kube-proxy <a class="header-anchor" href="#kube-proxy" aria-label="Permalink to &quot;kube-proxy&quot;">​</a></h3><p>kube-proxy is a network proxy that runs on each <a href="https://kubernetes.io/docs/concepts/architecture/nodes/" target="_blank" rel="noreferrer">node</a> in your cluster, implementing part of the Kubernetes <a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noreferrer">Service</a> concept.</p><p><a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/" target="_blank" rel="noreferrer">kube-proxy</a> maintains network rules on nodes. These network rules allow network communication to your Pods from network sessions inside or outside of your cluster.</p><p>kube-proxy uses the operating system packet filtering layer if there is one and it&#39;s available. Otherwise, kube-proxy forwards the traffic itself.</p><h3 id="container-runtime" tabindex="-1">Container runtime <a class="header-anchor" href="#container-runtime" aria-label="Permalink to &quot;Container runtime&quot;">​</a></h3><p>A fundamental component that empowers Kubernetes to run containers effectively. It is responsible for managing the execution and lifecycle of containers within the Kubernetes environment.</p><p>Kubernetes supports container runtimes such as <a href="https://containerd.io/docs/" target="_blank" rel="noreferrer">containerd</a>, <a href="https://cri-o.io/#what-is-cri-o" target="_blank" rel="noreferrer">CRI-O</a>, and any other implementation of the <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md" target="_blank" rel="noreferrer">Kubernetes CRI (Container Runtime Interface)</a>.</p><h2 id="addons" tabindex="-1">Addons <a class="header-anchor" href="#addons" aria-label="Permalink to &quot;Addons&quot;">​</a></h2><p>Addons use Kubernetes resources (<a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset" target="_blank" rel="noreferrer">DaemonSet</a>, <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noreferrer">Deployment</a>, etc) to implement cluster features. Because these are providing cluster-level features, namespaced resources for addons belong within the <code>kube-system</code> namespace.</p><p>Selected addons are described below; for an extended list of available addons, please see <a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/" target="_blank" rel="noreferrer">Addons</a>.</p><h3 id="dns" tabindex="-1">DNS <a class="header-anchor" href="#dns" aria-label="Permalink to &quot;DNS&quot;">​</a></h3><p>While the other addons are not strictly required, all Kubernetes clusters should have <a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/" target="_blank" rel="noreferrer">cluster DNS</a>, as many examples rely on it.</p><p>Cluster DNS is a DNS server, in addition to the other DNS server(s) in your environment, which serves DNS records for Kubernetes services.</p><p>Containers started by Kubernetes automatically include this DNS server in their DNS searches.</p><h3 id="web-ui-dashboard" tabindex="-1">Web UI (Dashboard) <a class="header-anchor" href="#web-ui-dashboard" aria-label="Permalink to &quot;Web UI (Dashboard)&quot;">​</a></h3><p><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noreferrer">Dashboard</a> is a general purpose, web-based UI for Kubernetes clusters. It allows users to manage and troubleshoot applications running in the cluster, as well as the cluster itself.</p><h3 id="container-resource-monitoring" tabindex="-1">Container Resource Monitoring <a class="header-anchor" href="#container-resource-monitoring" aria-label="Permalink to &quot;Container Resource Monitoring&quot;">​</a></h3><p>Container Resource Monitoring records generic time-series metrics about containers in a central database, and provides a UI for browsing that data.</p><h3 id="cluster-level-logging" tabindex="-1">Cluster-level Logging <a class="header-anchor" href="#cluster-level-logging" aria-label="Permalink to &quot;Cluster-level Logging&quot;">​</a></h3><p>A <a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/resource-usage-monitoring/" target="_blank" rel="noreferrer">cluster-level logging</a> mechanism is responsible for saving container logs to a central log store with search/browsing interface.</p><h3 id="network-plugins" tabindex="-1">Network Plugins <a class="header-anchor" href="#network-plugins" aria-label="Permalink to &quot;Network Plugins&quot;">​</a></h3><p><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins" target="_blank" rel="noreferrer">Network plugins</a> are software components that implement the container network interface (CNI) specification. They are responsible for allocating IP addresses to pods and enabling them to communicate with each other within the cluster.</p><h2 id="what-s-next" tabindex="-1">What&#39;s next <a class="header-anchor" href="#what-s-next" aria-label="Permalink to &quot;What&#39;s next&quot;">​</a></h2><p>Learn more about the following:</p><ul><li><a href="https://kubernetes.io/docs/concepts/architecture/nodes/" target="_blank" rel="noreferrer">Nodes</a> and <a href="https://kubernetes.io/docs/concepts/architecture/control-plane-node-communication/" target="_blank" rel="noreferrer">their communication</a> with the control plane.</li><li>Kubernetes <a href="https://kubernetes.io/docs/concepts/architecture/controller/" target="_blank" rel="noreferrer">controllers</a>.</li><li><a href="https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/" target="_blank" rel="noreferrer">kube-scheduler</a> which is the default scheduler for Kubernetes.</li><li>Etcd&#39;s official <a href="https://etcd.io/docs/" target="_blank" rel="noreferrer">documentation</a>.</li><li>Several <a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/" target="_blank" rel="noreferrer">container runtimes</a> in Kubernetes.</li><li>Integrating with cloud providers using <a href="https://kubernetes.io/docs/concepts/architecture/cloud-controller/" target="_blank" rel="noreferrer">cloud-controller-manager</a>.</li><li><a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands" target="_blank" rel="noreferrer">kubectl</a> commands.</li></ul>',61),l=[s];function i(c,u,d,h,p,b){return r(),t("div",null,l)}const k=e(a,[["render",i]]);export{m as __pageData,k as default};
