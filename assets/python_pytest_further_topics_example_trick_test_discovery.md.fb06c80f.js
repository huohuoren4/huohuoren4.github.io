import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"Changing standard (Python) test discovery","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/further_topics/example_trick/test_discovery.md","filePath":"python/pytest/further_topics/example_trick/test_discovery.md","lastUpdated":1692807718000}'),l={name:"python/pytest/further_topics/example_trick/test_discovery.md"},o=p(`<h1 id="changing-standard-python-test-discovery" tabindex="-1">Changing standard (Python) test discovery <a class="header-anchor" href="#changing-standard-python-test-discovery" aria-label="Permalink to &quot;Changing standard (Python) test discovery {#changing-standard-python-test-discovery}&quot;">​</a></h1><h2 id="ignore-paths-during-test-collection" tabindex="-1">Ignore paths during test collection <a class="header-anchor" href="#ignore-paths-during-test-collection" aria-label="Permalink to &quot;Ignore paths during test collection {#ignore-paths-during-test-collection}&quot;">​</a></h2><p>You can easily ignore certain test directories and modules during collection by passing the <code>--ignore=path</code> option on the cli. <code>pytest</code> allows multiple <code>--ignore</code> options. Example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">tests/</span></span>
<span class="line"><span style="color:#e1e4e8;">|-- example</span></span>
<span class="line"><span style="color:#e1e4e8;">|   |-- test_example_01.py</span></span>
<span class="line"><span style="color:#e1e4e8;">|   |-- test_example_02.py</span></span>
<span class="line"><span style="color:#e1e4e8;">|   &#39;-- test_example_03.py</span></span>
<span class="line"><span style="color:#e1e4e8;">|-- foobar</span></span>
<span class="line"><span style="color:#e1e4e8;">|   |-- test_foobar_01.py</span></span>
<span class="line"><span style="color:#e1e4e8;">|   |-- test_foobar_02.py</span></span>
<span class="line"><span style="color:#e1e4e8;">|   &#39;-- test_foobar_03.py</span></span>
<span class="line"><span style="color:#e1e4e8;">&#39;-- hello</span></span>
<span class="line"><span style="color:#e1e4e8;">    &#39;-- world</span></span>
<span class="line"><span style="color:#e1e4e8;">        |-- test_world_01.py</span></span>
<span class="line"><span style="color:#e1e4e8;">        |-- test_world_02.py</span></span>
<span class="line"><span style="color:#e1e4e8;">        &#39;-- test_world_03.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">tests/</span></span>
<span class="line"><span style="color:#24292e;">|-- example</span></span>
<span class="line"><span style="color:#24292e;">|   |-- test_example_01.py</span></span>
<span class="line"><span style="color:#24292e;">|   |-- test_example_02.py</span></span>
<span class="line"><span style="color:#24292e;">|   &#39;-- test_example_03.py</span></span>
<span class="line"><span style="color:#24292e;">|-- foobar</span></span>
<span class="line"><span style="color:#24292e;">|   |-- test_foobar_01.py</span></span>
<span class="line"><span style="color:#24292e;">|   |-- test_foobar_02.py</span></span>
<span class="line"><span style="color:#24292e;">|   &#39;-- test_foobar_03.py</span></span>
<span class="line"><span style="color:#24292e;">&#39;-- hello</span></span>
<span class="line"><span style="color:#24292e;">    &#39;-- world</span></span>
<span class="line"><span style="color:#24292e;">        |-- test_world_01.py</span></span>
<span class="line"><span style="color:#24292e;">        |-- test_world_02.py</span></span>
<span class="line"><span style="color:#24292e;">        &#39;-- test_world_03.py</span></span></code></pre></div><p>Now if you invoke <code>pytest</code> with <code>--ignore=tests/foobar/test_foobar_03.py --ignore=tests/hello/</code>, you will see that <code>pytest</code> only collects test-modules, which do not match the patterns specified:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-5.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">py-1.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-0.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> $REGENDOC_TMPDIR</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">inifile:</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">tests/example/test_example_01.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">                                   [ </span><span style="color:#79B8FF;">20</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">tests/example/test_example_02.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">                                   [ </span><span style="color:#79B8FF;">40</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">tests/example/test_example_03.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">                                   [ </span><span style="color:#79B8FF;">60</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">tests/foobar/test_foobar_01.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">                                     [ </span><span style="color:#79B8FF;">80</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">tests/foobar/test_foobar_02.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">                                     [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.02</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">seconds</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-5.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">py-1.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-0.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> $REGENDOC_TMPDIR</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">inifile:</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">tests/example/test_example_01.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                                   [ </span><span style="color:#005CC5;">20</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">tests/example/test_example_02.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                                   [ </span><span style="color:#005CC5;">40</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">tests/example/test_example_03.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                                   [ </span><span style="color:#005CC5;">60</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">tests/foobar/test_foobar_01.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                                     [ </span><span style="color:#005CC5;">80</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">tests/foobar/test_foobar_02.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                                     [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.02</span><span style="color:#24292E;"> </span><span style="color:#032F62;">seconds</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=========================</span></span></code></pre></div><p>The <code>--ignore-glob</code> option allows to ignore test file paths based on Unix shell-style wildcards. If you want to exclude test-modules that end with <code>_01.py</code>, execute <code>pytest</code> with <code>--ignore-glob=&#39;*_01.py&#39;</code>.</p><h2 id="deselect-tests-during-test-collection" tabindex="-1">Deselect tests during test collection <a class="header-anchor" href="#deselect-tests-during-test-collection" aria-label="Permalink to &quot;Deselect tests during test collection {#deselect-tests-during-test-collection}&quot;">​</a></h2><p>Tests can individually be deselected during collection by passing the <code>--deselect=item</code> option. For example, say <code>tests/foobar/test_foobar_01.py</code> contains <code>test_a</code> and <code>test_b</code>. You can run all of the tests within <code>tests/</code> except for <code>tests/foobar/test_foobar_01.py::test_a by</code> invoking pytest with <code>--deselect tests/foobar/test_foobar_01.py::test_a. pytest</code> allows multiple <code>--deselect</code> options.</p><h2 id="keeping-duplicate-paths-specified-from-command-line" tabindex="-1">Keeping duplicate paths specified from command line <a class="header-anchor" href="#keeping-duplicate-paths-specified-from-command-line" aria-label="Permalink to &quot;Keeping duplicate paths specified from command line {#keeping-duplicate-paths-specified-from-command-line}&quot;">​</a></h2><p>Default behavior of <code>pytest</code> is to ignore duplicate paths specified from the command line. Example:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path_a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path_a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">item</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path_a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path_a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">item</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span></code></pre></div><p>Just collect tests once.</p><p>To collect duplicate tests, use the <code>--keep-duplicates</code> option on the cli. Example:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--keep-duplicates</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path_a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path_a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--keep-duplicates</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path_a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path_a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span></code></pre></div><p>As the collector just works on directories, if you specify twice a single test file, <code>pytest</code> will still collect it twice, no matter if the <code>--keep-duplicates</code> is not specified. Example:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_a.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_a.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">...</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"><span style="color:#79B8FF;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_a.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_a.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">...</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"><span style="color:#005CC5;">...</span></span></code></pre></div><h2 id="changing-directory-recursion" tabindex="-1">Changing directory recursion <a class="header-anchor" href="#changing-directory-recursion" aria-label="Permalink to &quot;Changing directory recursion {#changing-directory-recursion}&quot;">​</a></h2><p>You can set the <code>norecursedirs</code> option in an ini-file, for example your <code>pytest.ini</code> in the project root directory:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">norecursedirs</span><span style="color:#E1E4E8;"> = .svn _build tmp*</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">norecursedirs</span><span style="color:#24292E;"> = .svn _build tmp*</span></span></code></pre></div><p>This would tell <code>pytest</code> to not recurse into typical subversion or sphinx-build directories or into any <code>tmp</code> prefixed directory.</p><h2 id="changing-naming-conventions" tabindex="-1">Changing naming conventions <a class="header-anchor" href="#changing-naming-conventions" aria-label="Permalink to &quot;Changing naming conventions {#changing-naming-conventions}&quot;">​</a></h2><p>You can configure different naming conventions by setting the <code>python_files</code>, <code>python_classes</code> and <code>python_functions</code> in your configuration file. Here is an example:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#6A737D;"># Example 1: have pytest look for &quot;check&quot; instead of &quot;test&quot;</span></span>
<span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">python_files</span><span style="color:#E1E4E8;"> = check_*.py</span></span>
<span class="line"><span style="color:#F97583;">python_classes</span><span style="color:#E1E4E8;"> = Check</span></span>
<span class="line"><span style="color:#F97583;">python_functions</span><span style="color:#E1E4E8;"> = *_check</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#6A737D;"># Example 1: have pytest look for &quot;check&quot; instead of &quot;test&quot;</span></span>
<span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">python_files</span><span style="color:#24292E;"> = check_*.py</span></span>
<span class="line"><span style="color:#D73A49;">python_classes</span><span style="color:#24292E;"> = Check</span></span>
<span class="line"><span style="color:#D73A49;">python_functions</span><span style="color:#24292E;"> = *_check</span></span></code></pre></div><p>This would make <code>pytest</code> look for tests in files that match the <code>check_* .py</code> glob-pattern, <code>Check</code> prefixes in classes, and functions and methods that match <code>*_check</code>. For example, if we have:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of check_myapp.py</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CheckMyApp</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">simple_check</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">complex_check</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of check_myapp.py</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CheckMyApp</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">simple_check</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">complex_check</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>The test collection would look like this:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--collect-only</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">configfile:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Module check_myapp.py</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">CheckMyAp</span><span style="color:#E1E4E8;">p</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">simple_chec</span><span style="color:#E1E4E8;">k</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">complex_chec</span><span style="color:#E1E4E8;">k</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">======================== </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--collect-only</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">configfile:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Module check_myapp.py</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">CheckMyAp</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">simple_chec</span><span style="color:#24292E;">k</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">complex_chec</span><span style="color:#24292E;">k</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">======================== </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">========================</span></span></code></pre></div><p>You can check for multiple glob patterns by adding a space between the patterns:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># Example 2: have pytest look for files with &quot;test&quot; and &quot;example&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">python_files</span><span style="color:#E1E4E8;"> = test_*.py example_*.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Example 2: have pytest look for files with &quot;test&quot; and &quot;example&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">python_files</span><span style="color:#24292E;"> = test_*.py example_*.py</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>the <code>python_functions</code> and <code>python_classes</code> options has no effect for <code>unittest.TestCase</code> test discovery because pytest delegates discovery of test case methods to unittest code.</p></div><h2 id="interpreting-cmdline-arguments-as-python-packages" tabindex="-1">Interpreting cmdline arguments as Python packages <a class="header-anchor" href="#interpreting-cmdline-arguments-as-python-packages" aria-label="Permalink to &quot;Interpreting cmdline arguments as Python packages {#interpreting-cmdline-arguments-as-python-packages}&quot;">​</a></h2><p>You can use the <code>--pyargs</code> option to make <code>pytest</code> try interpreting arguments as python package names, deriving their file system path and then running the test. For example if you have unittest2 installed you can type:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--pyargs</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unittest2.test.test_skipping</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-q</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--pyargs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unittest2.test.test_skipping</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-q</span></span></code></pre></div><p>which would run the respective test module. Like with other options, through an ini-file and the <code>addopts</code> option you can make this change more permanently:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">addopts</span><span style="color:#E1E4E8;"> = --pyargs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">addopts</span><span style="color:#24292E;"> = --pyargs</span></span></code></pre></div><p>Now a simple invocation of <code>pytest NAME</code> will check if NAME exists as an importable package/module and otherwise treat it as a filesystem path.</p><h2 id="finding-out-what-is-collected" tabindex="-1">Finding out what is collected <a class="header-anchor" href="#finding-out-what-is-collected" aria-label="Permalink to &quot;Finding out what is collected {#finding-out-what-is-collected}&quot;">​</a></h2><p>You can always peek at the collection tree without running tests like this:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">.</span><span style="color:#E1E4E8;"> $ </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--collect-only</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pythoncollection.py</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">configfile:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Module CWD/pythoncollection.py</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_functio</span><span style="color:#E1E4E8;">n</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">TestClas</span><span style="color:#E1E4E8;">s</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_metho</span><span style="color:#E1E4E8;">d</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_anothermetho</span><span style="color:#E1E4E8;">d</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">======================== </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">.</span><span style="color:#24292E;"> $ </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--collect-only</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pythoncollection.py</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">configfile:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Module CWD/pythoncollection.py</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_functio</span><span style="color:#24292E;">n</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;"> </span><span style="color:#032F62;">TestClas</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_metho</span><span style="color:#24292E;">d</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_anothermetho</span><span style="color:#24292E;">d</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">======================== </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">========================</span></span></code></pre></div><h2 id="customizing-test-collection" tabindex="-1">Customizing test collection <a class="header-anchor" href="#customizing-test-collection" aria-label="Permalink to &quot;Customizing test collection {#customizing-test-collection}&quot;">​</a></h2><p>You can easily instruct pytest to discover tests from every Python file:</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">[pytest]</span></span>
<span class="line"><span style="color:#F97583;">python_files</span><span style="color:#E1E4E8;"> = *.py</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">[pytest]</span></span>
<span class="line"><span style="color:#D73A49;">python_files</span><span style="color:#24292E;"> = *.py</span></span></code></pre></div><p>However, many projects will have a <code>setup.py</code> which they don’t want to be imported. Moreover, there may files only importable by a specific python version. For such cases you can dynamically define files to be ignored by listing them in a <code>conftest.py</code> file:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">collect_ignore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;setup.py&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> sys.version_info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    collect_ignore.append(</span><span style="color:#9ECBFF;">&quot;pkg/module_py2.py&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">collect_ignore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;setup.py&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> sys.version_info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    collect_ignore.append(</span><span style="color:#032F62;">&quot;pkg/module_py2.py&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>and then if you have a module file like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of pkg/module_py2.py</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_only_on_python2</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">except</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Exception</span><span style="color:#E1E4E8;">, e:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">pass</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of pkg/module_py2.py</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_only_on_python2</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">except</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Exception</span><span style="color:#24292E;">, e:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">pass</span></span></code></pre></div><p>and a <code>setup.py</code> dummy file like this:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of setup.py</span></span>
<span class="line"><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># will raise exception if imported</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of setup.py</span></span>
<span class="line"><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># will raise exception if imported</span></span></code></pre></div><p>If you run with a Python 2 interpreter then you will find the one test and will leave out the <code>setup.py</code> file:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#$ pytest --collect-only</span></span>
<span class="line"><span style="color:#E1E4E8;">====== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">======</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2.7</span><span style="color:#9ECBFF;">.10,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-2.9.1,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">py-1.4.31,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-0.3.1</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> $REGENDOC_TMPDIR</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">inifile:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Module </span><span style="color:#9ECBFF;">&#39;pkg/module_py2.py&#39;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test_only_on_python2&#39;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">====== </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">found</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.04</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">seconds</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">======</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#$ pytest --collect-only</span></span>
<span class="line"><span style="color:#24292E;">====== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">======</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2.7</span><span style="color:#032F62;">.10,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-2.9.1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">py-1.4.31,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-0.3.1</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> $REGENDOC_TMPDIR</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">inifile:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Module </span><span style="color:#032F62;">&#39;pkg/module_py2.py&#39;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test_only_on_python2&#39;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">====== </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">found</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.04</span><span style="color:#24292E;"> </span><span style="color:#032F62;">seconds</span><span style="color:#24292E;"> </span><span style="color:#032F62;">======</span></span></code></pre></div><p>If you run with a Python 3 interpreter both the one test and the <code>setup.py</code> file will be left out:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--collect-only</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">configfile:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest.ini</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">======================= </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--collect-only</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">configfile:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest.ini</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">======================= </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">collected</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">========================</span></span></code></pre></div><p>It’s also possible to ignore files based on Unix shell-style wildcards by adding patterns to <code>collect_ignore_glob</code>.</p><p>The following example <code>conftest.py</code> ignores the file <code>setup.py</code> and in addition all files that end with <code>*_py2.py</code> when executed with a Python 3 interpreter:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">collect_ignore </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;setup.py&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> sys.version_info[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    collect_ignore_glob </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;*_py2.py&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of conftest.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">collect_ignore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;setup.py&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> sys.version_info[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    collect_ignore_glob </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;*_py2.py&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>Since Pytest 2.6, users can prevent pytest from discovering classes that start with <code>Test</code> by setting a boolean <code>__test__</code> attribute to <code>False</code>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># Will not be discovered as a test</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClass</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    __test__ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Will not be discovered as a test</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClass</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    __test__ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span></code></pre></div>`,58),e=[o];function t(c,r,y,i,E,F){return n(),a("div",null,e)}const C=s(l,[["render",t]]);export{h as __pageData,C as default};
