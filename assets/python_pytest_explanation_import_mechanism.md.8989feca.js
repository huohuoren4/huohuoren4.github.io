import{_ as e,o as s,c as t,V as o}from"./chunks/framework.48c56699.js";const u=JSON.parse('{"title":"pytest import mechanisms and sys.path/PYTHONPATH","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/explanation/import_mechanism.md","filePath":"python/pytest/explanation/import_mechanism.md"}'),a={name:"python/pytest/explanation/import_mechanism.md"},n=o(`<h1 id="pytest-import-mechanisms-and-sys-path-pythonpath" tabindex="-1">pytest import mechanisms and sys.path/PYTHONPATH <a class="header-anchor" href="#pytest-import-mechanisms-and-sys-path-pythonpath" aria-label="Permalink to &quot;pytest import mechanisms and sys.path/PYTHONPATH&quot;">​</a></h1><h2 id="import-modes" tabindex="-1">Import modes <a class="header-anchor" href="#import-modes" aria-label="Permalink to &quot;Import modes&quot;">​</a></h2><p>pytest as a testing framework needs to import test modules and <code>conftest.py</code> files for execution.</p><p>Importing files in Python (at least until recently) is a non-trivial processes, often requiring changing <a href="https://docs.python.org/3/library/sys.html#sys.path" target="_blank" rel="noreferrer">sys.path</a>. Some aspects of the import process can be controlled through the <code>--import-mode</code> command-line flag, which can assume these values:</p><ul><li><p><code>prepend</code> (default): the directory path containing each module will be inserted into the beginning of <code>sys.path</code> if not already there, and then imported with the <code>importlib.import_module</code> function.</p><p>This requires test module names to be unique when the test directory tree is not arranged in packages, because the modules will put in <code>sys.modules</code> after importing.</p><p>This is the classic mechanism, dating back from the time Python 2 was still supported.</p></li><li><p><code>append</code>: the directory containing each module is appended to the end of <code>sys.path</code> if not already there, and imported with <code>importlib.import_module</code>.</p><p>This better allows to run test modules against installed versions of a package even if the package under test has the same import root. For example:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">testing/__init__.py</span></span>
<span class="line"><span style="color:#FFCB6B;">testing/test_pkg_under_test.py</span></span>
<span class="line"><span style="color:#FFCB6B;">pkg_under_test/</span></span></code></pre></div><p>the tests will run against the installed version of <code>pkg_under_test</code> when <code>--import-mode=append</code> is used whereas with <code>prepend</code> they would pick up the local version. This kind of confusion is why we advocate for using src layouts.</p><p>Same as <code>prepend</code>, requires test module names to be unique when the test directory tree is not arranged in packages, because the modules will put in <code>sys.modules</code> after importing.</p></li><li><p><code>importlib</code>: new in pytest-6.0, this mode uses more fine control mechanisms provided by <code>importlib</code> to import test modules. This gives full control over the import process, and doesn’t require changing <code>sys.path</code>.</p><p>For this reason this doesn’t require test module names to be unique.</p><p>One drawback however is that test modules are non-importable by each other. Also, utility modules in the tests directories are not automatically importable because the tests directory is no longer added to <code>sys.path</code>.</p><p>Initially we intended to make <code>importlib</code> the default in future releases, however it is clear now that it has its own set of drawbacks so the default will remain <code>prepend</code> for the foreseeable future.</p></li></ul><div class="tip custom-block"><p class="custom-block-title">See also</p><p>The <a href="https://docs.pytest.org/en/latest/reference/reference.html#confval-pythonpath" target="_blank" rel="noreferrer">pythonpath</a> configuration variable.</p></div><h2 id="prepend-and-append-import-modes-scenarios" tabindex="-1">prepend and append import modes scenarios <a class="header-anchor" href="#prepend-and-append-import-modes-scenarios" aria-label="Permalink to &quot;prepend and append import modes scenarios&quot;">​</a></h2><p>Here’s a list of scenarios when using <code>prepend</code> or <code>append</code> import modes where pytest needs to change <code>sys.path</code> in order to import test modules or <code>conftest.py</code> files, and the issues users might encounter because of that.</p><h3 id="test-modules-conftest-py-files-inside-packages" tabindex="-1">Test modules / conftest.py files inside packages <a class="header-anchor" href="#test-modules-conftest-py-files-inside-packages" aria-label="Permalink to &quot;Test modules / conftest.py files inside packages&quot;">​</a></h3><p>Consider this file and directory layout:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">root/</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foo/</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">__init__.py</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">conftest.py</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bar/</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">__init__.py</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tests/</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">__init__.py</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_foo.py</span></span></code></pre></div><p>When executing:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">root/</span></span></code></pre></div><p>pytest will find <code>foo/bar/tests/test_foo.py</code> and realize it is part of a package given that there’s an <code>__init__.py</code> file in the same folder. It will then search upwards until it can find the last folder which still contains an <code>__init__.py</code> file in order to find the package root (in this case foo/). To load the module, it will insert root/ to the front of <code>sys.path</code> (if not there already) in order to load test_foo.py as the module <code>foo.bar.tests.test_foo</code>.</p><p>The same logic applies to the <code>conftest.py</code> file: it will be imported as <code>foo.conftest</code> module.</p><p>Preserving the full package name is important when tests live in a package to avoid problems and allow test modules to have duplicated names. This is also discussed in details in <a href="https://docs.pytest.org/en/latest/explanation/goodpractices.html#test-discovery" target="_blank" rel="noreferrer">Conventions for Python test discovery</a>.</p><h3 id="standalone-test-modules-conftest-py-files" tabindex="-1">Standalone test modules / conftest.py files <a class="header-anchor" href="#standalone-test-modules-conftest-py-files" aria-label="Permalink to &quot;Standalone test modules / conftest.py files&quot;">​</a></h3><p>Consider this file and directory layout:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">root/</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">foo/</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">conftest.py</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bar/</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tests/</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_foo.py</span></span></code></pre></div><p>When executing:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">root/</span></span></code></pre></div><p>pytest will find <code>foo/bar/tests/test_foo.py</code> and realize it is NOT part of a package given that there’s no <code>__init__.py</code> file in the same folder. It will then add <code>root/foo/bar/tests</code> to <code>sys.path</code> in order to import <code>test_foo.py</code> as the module <code>test_foo</code>. The same is done with the <code>conftest.py</code> file by adding <code>root/foo</code> to <code>sys.path</code> to import it as <code>conftest</code>.</p><p>For this reason this layout cannot have test modules with the same name, as they all will be imported in the global import namespace.</p><p>This is also discussed in details in <a href="https://docs.pytest.org/en/latest/explanation/goodpractices.html#test-discovery" target="_blank" rel="noreferrer">Conventions for Python test discovery</a>.</p><h2 id="invoking-pytest-versus-python-m-pytest" tabindex="-1">Invoking pytest versus python -m pytest <a class="header-anchor" href="#invoking-pytest-versus-python-m-pytest" aria-label="Permalink to &quot;Invoking pytest versus python -m pytest&quot;">​</a></h2><p>Running pytest with <code>pytest [...]</code> instead of <code>python -m pytest [...]</code> yields nearly equivalent behaviour, except that the latter will add the current directory to <code>sys.path</code>, which is standard <code>python</code> behavior.</p><p>See also <a href="https://docs.pytest.org/en/latest/how-to/usage.html#invoke-python" target="_blank" rel="noreferrer">Calling pytest through python -m pytest</a>.</p>`,27),p=[n];function l(i,r,c,d,h,y){return s(),t("div",null,p)}const f=e(a,[["render",l]]);export{u as __pageData,f as default};
