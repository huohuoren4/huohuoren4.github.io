import{_ as s,o as e,c as a,X as t}from"./chunks/framework.b5656a4e.js";const h=JSON.parse('{"title":"URL Route Registrations","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/api_reference/url_route.md","filePath":"python/flask/api_reference/url_route.md","lastUpdated":1692979908000}'),o={name:"python/flask/api_reference/url_route.md"},n=t(`<h1 id="url-route-registrations" tabindex="-1">URL Route Registrations <a class="header-anchor" href="#url-route-registrations" aria-label="Permalink to &quot;URL Route Registrations {#url-route-registrations}&quot;">​</a></h1><p>Generally there are three ways to define rules for the routing system:</p><ol><li><p>You can use the <code>flask.Flask.route()</code> decorator.</p></li><li><p>You can use the <code>flask.Flask.add_url_rule()</code> function.</p></li><li><p>You can directly access the underlying <code>Werkzeug</code> routing system which is exposed as <code>flask.Flask.url_map</code>.</p></li></ol><p>Variable parts in the route can be specified with angular brackets (<code>/user/&lt;username&gt;</code>). By default a variable part in the URL accepts any string without a slash however a different converter can be specified as well by using <code>&lt;converter:name&gt;</code>.</p><p>Variable parts are passed to the view function as keyword arguments.</p><p>The following converters are available:</p><table><thead><tr><th><code>string</code></th><th>accepts any text without a slash (the default)</th></tr></thead><tbody><tr><td><code>int</code></td><td>accepts integers</td></tr><tr><td><code>float</code></td><td>like <code>int</code> but for floating point values</td></tr><tr><td><code>path</code></td><td>like the default but also accepts slashes</td></tr><tr><td><code>any</code></td><td>matches one of the items provided</td></tr><tr><td><code>uuid</code></td><td>accepts <code>UUID</code> strings</td></tr></tbody></table><p>Custom converters can be defined using <code>flask.Flask.url_map</code>.</p><p>Here are some examples:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">index</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/&lt;username&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">show_user</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">username</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">pass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/post/&lt;int:post_id&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">show_post</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">post_id</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">pass</span></span></code></pre></div><p>An important detail to keep in mind is how Flask deals with trailing slashes. The idea is to keep each URL unique so the following rules apply:</p><ol><li><p>If a rule ends with a slash and is requested without a slash by the user, the user is automatically redirected to the same page with a trailing slash attached.</p></li><li><p>If a rule does not end with a trailing slash and the user requests the page with a trailing slash, a 404 not found is raised.</p></li></ol><p>This is consistent with how web servers deal with static files. This also makes it possible to use relative link targets safely.</p><p>You can also define multiple rules for the same function. They have to be unique however. Defaults can also be specified. Here for example is a definition for a URL that accepts an optional page:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/users/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">defaults</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">page</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/users/page/&lt;int:page&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">show_users</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">page</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">pass</span></span></code></pre></div><p>This specifies that <code>/users/</code> will be the URL for page one and <code>/users/page/N</code> will be the URL for page N.</p><p>If a URL contains a default value, it will be redirected to its simpler form with a <code>301</code> redirect. In the above example, <code>/users/page/1</code> will be redirected to <code>/users/</code>. If your route handles <code>GET</code> and <code>POST</code> requests, make sure the default route only handles <code>GET</code>, as redirects can’t preserve form data.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/region/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">defaults</span><span style="color:#89DDFF;">={</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">route</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/region/&lt;int:id&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">methods</span><span style="color:#89DDFF;">=[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">])</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">region</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;font-style:italic;">pass</span></span></code></pre></div><p>Here are the parameters that <code>route()</code> and <code>add_url_rule()</code> accept. The only difference is that with the route parameter the view function is defined with the decorator instead of the view_func parameter.</p><table><thead><tr><th><code>rule</code></th><th>the URL rule as string</th></tr></thead><tbody><tr><td><code>endpoint</code></td><td>the endpoint for the registered URL rule. Flask itself assumes that the name of the view function is the name of the endpoint if not explicitly stated.</td></tr><tr><td><code>view_func</code></td><td>the function to call when serving a request to the provided endpoint. If this is not provided one can specify the function later by storing it in the <code>view_functions</code> dictionary with the endpoint as key.</td></tr><tr><td><code>defaults</code></td><td>A dictionary with defaults for this rule. See the example above for how defaults work.</td></tr><tr><td><code>subdomain</code></td><td>specifies the rule for the subdomain in case subdomain matching is in use. If not specified the default subdomain is assumed.</td></tr><tr><td><code>**options</code></td><td>the options to be forwarded to the underlying <code>Rule</code> object. A change to <code>Werkzeug</code> is handling of method options. methods is a list of methods this rule should be limited to (<code>GET</code>, <code>POST</code> etc.). By default a rule just listens for <code>GET</code> (and implicitly <code>HEAD</code>). Starting with <code>Flask 0.6</code>, <code>OPTIONS</code> is implicitly added and handled by the standard request handling. They have to be specified as keyword arguments.</td></tr></tbody></table>`,20),l=[n];function p(r,c,i,d,F,y){return e(),a("div",null,l)}const u=s(o,[["render",p]]);export{h as __pageData,u as default};
