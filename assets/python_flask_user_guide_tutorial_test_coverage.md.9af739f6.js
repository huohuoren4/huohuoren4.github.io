import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.01af844e.js";const h=JSON.parse('{"title":"Test Coverage","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/tutorial/test_coverage.md","filePath":"python/flask/user_guide/tutorial/test_coverage.md","lastUpdated":1693328004000}'),l={name:"python/flask/user_guide/tutorial/test_coverage.md"},o=p(`<h1 id="test-coverage" tabindex="-1">Test Coverage <a class="header-anchor" href="#test-coverage" aria-label="Permalink to &quot;Test Coverage {#test-coverage}&quot;">​</a></h1><p>Writing unit tests for your application lets you check that the code you wrote works the way you expect. Flask provides a test client that simulates requests to the application and returns the response data.</p><p>You should test as much of your code as possible. Code in functions only runs when the function is called, and code in branches, such as <code>if</code> blocks, only runs when the condition is met. You want to make sure that each function is tested with data that covers each branch.</p><p>The closer you get to 100% coverage, the more comfortable you can be that making a change won’t unexpectedly change other behavior. However, 100% coverage doesn’t guarantee that your application doesn’t have bugs. In particular, it doesn’t test how the user interacts with the application in the browser. Despite this, test coverage is an important tool to use during development.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This is being introduced late in the tutorial, but in your future projects you should test as you develop.</p></div><p>You’ll use <a href="/python/pytest/home#pytest-helps-you-write-better-programs">pytest</a> and <a href="https://coverage.readthedocs.io/" target="_blank" rel="noreferrer">coverage</a> to test and measure your code. Install them both:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">coverage</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">coverage</span></span></code></pre></div><h2 id="setup-and-fixtures" tabindex="-1">Setup and Fixtures <a class="header-anchor" href="#setup-and-fixtures" aria-label="Permalink to &quot;Setup and Fixtures {#setup-and-fixtures}&quot;">​</a></h2><p>The test code is located in the <code>tests</code> directory. This directory is next to the <code>flaskr</code> package, not inside it. The <code>tests/conftest.py</code> file contains setup functions called fixtures that each test will use. Tests are in Python modules that start with <code>test_</code>, and each test function in those modules also starts with <code>test_</code>.</p><p>Each test will create a new temporary database file and populate some data that will be used in the tests. Write a SQL file to insert that data.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">-- tests/data.sql</span></span>
<span class="line"><span style="color:#F97583;">INSERT INTO</span><span style="color:#E1E4E8;"> user (username, </span><span style="color:#F97583;">password</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">VALUES</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#9ECBFF;">&#39;other&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">INSERT INTO</span><span style="color:#E1E4E8;"> post (title, body, author_id, created)</span></span>
<span class="line"><span style="color:#F97583;">VALUES</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#9ECBFF;">&#39;test title&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> x</span><span style="color:#9ECBFF;">&#39;0a&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;body&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2018-01-01 00:00:00&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">-- tests/data.sql</span></span>
<span class="line"><span style="color:#D73A49;">INSERT INTO</span><span style="color:#24292E;"> user (username, </span><span style="color:#D73A49;">password</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">VALUES</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;pbkdf2:sha256:50000$TCI4GzcX$0de171a4f4dac32e3364c7ddc7c14f3e2fa61f2d17574483f7ffbb431b4acb2f&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#032F62;">&#39;other&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;pbkdf2:sha256:50000$kJPKsz6N$d2d4784f1b030a9761f5ccaeeaca413f27f2ecb76d6168407af962ddce849f79&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">INSERT INTO</span><span style="color:#24292E;"> post (title, body, author_id, created)</span></span>
<span class="line"><span style="color:#D73A49;">VALUES</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#032F62;">&#39;test title&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> x</span><span style="color:#032F62;">&#39;0a&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;body&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2018-01-01 00:00:00&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>The <code>app</code> fixture will call the factory and pass <code>test_config</code> to configure the application and database for testing instead of using your local development configuration.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/conftest.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> os</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> tempfile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flaskr </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> create_app</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flaskr.db </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> get_db, init_db</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">open</span><span style="color:#E1E4E8;">(os.path.join(os.path.dirname(</span><span style="color:#79B8FF;">__file__</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&#39;data.sql&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&#39;rb&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> f:</span></span>
<span class="line"><span style="color:#E1E4E8;">    _data_sql </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f.read().decode(</span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">app</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    db_fd, db_path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tempfile.mkstemp()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    app </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> create_app({</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;TESTING&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;DATABASE&#39;</span><span style="color:#E1E4E8;">: db_path,</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="color:#E1E4E8;">        init_db()</span></span>
<span class="line"><span style="color:#E1E4E8;">        get_db().executescript(_data_sql)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    os.close(db_fd)</span></span>
<span class="line"><span style="color:#E1E4E8;">    os.unlink(db_path)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">client</span><span style="color:#E1E4E8;">(app):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> app.test_client()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runner</span><span style="color:#E1E4E8;">(app):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> app.test_cli_runner()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/conftest.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> tempfile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flaskr </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> create_app</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flaskr.db </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> get_db, init_db</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(os.path.join(os.path.dirname(</span><span style="color:#005CC5;">__file__</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&#39;data.sql&#39;</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&#39;rb&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#24292E;">    _data_sql </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.read().decode(</span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">app</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    db_fd, db_path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tempfile.mkstemp()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> create_app({</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;TESTING&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;DATABASE&#39;</span><span style="color:#24292E;">: db_path,</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> app.app_context():</span></span>
<span class="line"><span style="color:#24292E;">        init_db()</span></span>
<span class="line"><span style="color:#24292E;">        get_db().executescript(_data_sql)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    os.close(db_fd)</span></span>
<span class="line"><span style="color:#24292E;">    os.unlink(db_path)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">client</span><span style="color:#24292E;">(app):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> app.test_client()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runner</span><span style="color:#24292E;">(app):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> app.test_cli_runner()</span></span></code></pre></div><p><code>tempfile.mkstemp()</code> creates and opens a temporary file, returning the file descriptor and the path to it. The <code>DATABASE</code> path is overridden so it points to this temporary path instead of the instance folder. After setting the path, the database tables are created and the test data is inserted. After the test is over, the temporary file is closed and removed.</p><p><code>TESTING</code> tells Flask that the app is in test mode. Flask changes some internal behavior so it’s easier to test, and other extensions can also use the flag to make testing them easier.</p><p>The <code>client</code> fixture calls <code>app.test_client()</code> with the application object created by the <code>app</code> fixture. Tests will use the client to make requests to the application without running the server.</p><p>The <code>runner</code> fixture is similar to client. <code>app.test_cli_runner()</code> creates a runner that can call the Click commands registered with the application.</p><p>Pytest uses fixtures by matching their function names with the names of arguments in the test functions. For example, the <code>test_hello</code> function you’ll write next takes a <code>client</code> argument. Pytest matches that with the <code>client</code> fixture function, calls it, and passes the returned value to the test function.</p><h2 id="factory" tabindex="-1">Factory <a class="header-anchor" href="#factory" aria-label="Permalink to &quot;Factory {#factory}&quot;">​</a></h2><p>There’s not much to test about the factory itself. Most of the code will be executed for each test already, so if something fails the other tests will notice.</p><p>The only behavior that can change is passing test config. If config is not passed, there should be some default configuration, otherwise the configuration should be overridden.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/test_factory.py</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flaskr </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> create_app</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_config</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> create_app().testing</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> create_app({</span><span style="color:#9ECBFF;">&#39;TESTING&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">True</span><span style="color:#E1E4E8;">}).testing</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_hello</span><span style="color:#E1E4E8;">(client):</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.get(</span><span style="color:#9ECBFF;">&#39;/hello&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> response.data </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;Hello, World!&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/test_factory.py</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flaskr </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> create_app</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_config</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> create_app().testing</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> create_app({</span><span style="color:#032F62;">&#39;TESTING&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">True</span><span style="color:#24292E;">}).testing</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_hello</span><span style="color:#24292E;">(client):</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.get(</span><span style="color:#032F62;">&#39;/hello&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> response.data </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;Hello, World!&#39;</span></span></code></pre></div><p>You added the <code>hello</code> route as an example when writing the factory at the beginning of the tutorial. It returns “Hello, World!”, so the test checks that the response data matches.</p><h2 id="database" tabindex="-1">Database <a class="header-anchor" href="#database" aria-label="Permalink to &quot;Database {#database}&quot;">​</a></h2><p>Within an application context, <code>get_db</code> should return the same connection each time it’s called. After the context, the connection should be closed.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/test_db.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> sqlite3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flaskr.db </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> get_db</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_get_close_db</span><span style="color:#E1E4E8;">(app):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="color:#E1E4E8;">        db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_db()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> db </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> get_db()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> pytest.raises(sqlite3.ProgrammingError) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> e:</span></span>
<span class="line"><span style="color:#E1E4E8;">        db.execute(</span><span style="color:#9ECBFF;">&#39;SELECT 1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;closed&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;">(e.value)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/test_db.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> sqlite3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flaskr.db </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> get_db</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_get_close_db</span><span style="color:#24292E;">(app):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> app.app_context():</span></span>
<span class="line"><span style="color:#24292E;">        db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_db()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> db </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> get_db()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> pytest.raises(sqlite3.ProgrammingError) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> e:</span></span>
<span class="line"><span style="color:#24292E;">        db.execute(</span><span style="color:#032F62;">&#39;SELECT 1&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;closed&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;">(e.value)</span></span></code></pre></div><p>The <code>init-db</code> command should call the <code>init_db</code> function and output a message.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/test_db.py</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_init_db_command</span><span style="color:#E1E4E8;">(runner, monkeypatch):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Recorder</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        called </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fake_init_db</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">        Recorder.called </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    monkeypatch.setattr(</span><span style="color:#9ECBFF;">&#39;flaskr.db.init_db&#39;</span><span style="color:#E1E4E8;">, fake_init_db)</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> runner.invoke(</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;init-db&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Initialized&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> result.output</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> Recorder.called</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/test_db.py</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_init_db_command</span><span style="color:#24292E;">(runner, monkeypatch):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Recorder</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fake_init_db</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">        Recorder.called </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    monkeypatch.setattr(</span><span style="color:#032F62;">&#39;flaskr.db.init_db&#39;</span><span style="color:#24292E;">, fake_init_db)</span></span>
<span class="line"><span style="color:#24292E;">    result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> runner.invoke(</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;init-db&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Initialized&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> result.output</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> Recorder.called</span></span></code></pre></div><p>This test uses Pytest’s <code>monkeypatch</code> fixture to replace the <code>init_db</code> function with one that records that it’s been called. The <code>runner</code> fixture you wrote above is used to call the <code>init-db</code> command by name.</p><h2 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-label="Permalink to &quot;Authentication {#authentication}&quot;">​</a></h2><p>For most of the views, a user needs to be logged in. The easiest way to do this in tests is to make a <code>POST</code> request to the <code>login</code> view with the client. Rather than writing that out every time, you can write a class with methods to do that, and use a fixture to pass it the client for each test.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/conftest.py</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AuthActions</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">object</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">__init__</span><span style="color:#E1E4E8;">(self, client):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">._client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(self, username</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, password</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">._client.post(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;/auth/login&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">: username, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">: password}</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">logout</span><span style="color:#E1E4E8;">(self):</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">._client.get(</span><span style="color:#9ECBFF;">&#39;/auth/logout&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.fixture</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;">(client):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> AuthActions(client)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/conftest.py</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AuthActions</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">object</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">__init__</span><span style="color:#24292E;">(self, client):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(self, username</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">, password</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._client.post(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&#39;/auth/login&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">: username, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">: password}</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">logout</span><span style="color:#24292E;">(self):</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#24292E;">._client.get(</span><span style="color:#032F62;">&#39;/auth/logout&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.fixture</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">auth</span><span style="color:#24292E;">(client):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> AuthActions(client)</span></span></code></pre></div><p>With the <code>auth</code> fixture, you can call <code>auth.login()</code> in a test to log in as the <code>test</code> user, which was inserted as part of the test data in the <code>app</code> fixture.</p><p>The <code>register</code> view should render successfully on <code>GET</code>. On <code>POST</code> with valid form data, it should redirect to the login URL and the user’s data should be in the database. Invalid data should display error messages.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/test_auth.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flask </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> g, session</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flaskr.db </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> get_db</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_register</span><span style="color:#E1E4E8;">(client, app):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> client.get(</span><span style="color:#9ECBFF;">&#39;/auth/register&#39;</span><span style="color:#E1E4E8;">).status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.post(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;/auth/register&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> response.headers[</span><span style="color:#9ECBFF;">&quot;Location&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/auth/login&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> get_db().execute(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;SELECT * FROM user WHERE username = &#39;a&#39;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ).fetchone() </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">), (</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;Username is required.&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;Password is required.&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;already registered&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_register_validate_input</span><span style="color:#E1E4E8;">(client, username, password, message):</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.post(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;/auth/register&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">: username, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">: password}</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> response.data</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/test_auth.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flask </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> g, session</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flaskr.db </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> get_db</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_register</span><span style="color:#24292E;">(client, app):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> client.get(</span><span style="color:#032F62;">&#39;/auth/register&#39;</span><span style="color:#24292E;">).status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.post(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;/auth/register&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> response.headers[</span><span style="color:#032F62;">&quot;Location&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/auth/login&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> app.app_context():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> get_db().execute(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;SELECT * FROM user WHERE username = &#39;a&#39;&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        ).fetchone() </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">), (</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;Username is required.&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;Password is required.&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;already registered&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_register_validate_input</span><span style="color:#24292E;">(client, username, password, message):</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.post(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;/auth/register&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">: username, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">: password}</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> response.data</span></span></code></pre></div><p><code>client.get()</code> makes a <code>GET</code> request and returns the <code>Response</code> object returned by Flask. Similarly, <code>client.post()</code> makes a <code>POST</code> request, converting the <code>data</code> dict into form data.</p><p>To test that the page renders successfully, a simple request is made and checked for a <code>200 OK status_code</code>. If rendering failed, Flask would return a <code>500 Internal Server Error</code> code.</p><p>headers will have a <code>Location</code> header with the login URL when the register view redirects to the login view.</p><p><code>data</code> contains the body of the response as bytes. If you expect a certain value to render on the page, check that it’s in <code>data</code>. Bytes must be compared to bytes. If you want to compare text, use <code>get_data(as_text=True)</code> instead.</p><p><code>pytest.mark.parametrize</code> tells Pytest to run the same test function with different arguments. You use it here to test different invalid input and error messages without writing the same code three times.</p><p>The tests for the <code>login</code> view are very similar to those for <code>register</code>. Rather than testing the data in the database, <code>session</code> should have <code>user_id</code> set after logging in.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/test_auth.py</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_login</span><span style="color:#E1E4E8;">(client, auth):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> client.get(</span><span style="color:#9ECBFF;">&#39;/auth/login&#39;</span><span style="color:#E1E4E8;">).status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> auth.login()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> response.headers[</span><span style="color:#9ECBFF;">&quot;Location&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> client:</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.get(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> session[</span><span style="color:#9ECBFF;">&#39;user_id&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> g.user[</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;test&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&#39;username&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;password&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">), (</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;Incorrect username.&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;Incorrect password.&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_login_validate_input</span><span style="color:#E1E4E8;">(auth, username, password, message):</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> auth.login(username, password)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> response.data</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/test_auth.py</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_login</span><span style="color:#24292E;">(client, auth):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> client.get(</span><span style="color:#032F62;">&#39;/auth/login&#39;</span><span style="color:#24292E;">).status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> auth.login()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> response.headers[</span><span style="color:#032F62;">&quot;Location&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> client:</span></span>
<span class="line"><span style="color:#24292E;">        client.get(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> session[</span><span style="color:#032F62;">&#39;user_id&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> g.user[</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&#39;username&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;password&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">), (</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;Incorrect username.&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;Incorrect password.&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_login_validate_input</span><span style="color:#24292E;">(auth, username, password, message):</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> auth.login(username, password)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> response.data</span></span></code></pre></div><p>Using <code>client</code> in a <code>with</code> block allows accessing context variables such as <code>session</code> after the response is returned. Normally, accessing <code>session</code> outside of a request would raise an error.</p><p>Testing <code>logout</code> is the opposite of <code>login</code>. <code>session</code> should not contain <code>user_id</code> after logging out.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/test_auth.py</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_logout</span><span style="color:#E1E4E8;">(client, auth):</span></span>
<span class="line"><span style="color:#E1E4E8;">    auth.login()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> client:</span></span>
<span class="line"><span style="color:#E1E4E8;">        auth.logout()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;user_id&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> session</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/test_auth.py</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_logout</span><span style="color:#24292E;">(client, auth):</span></span>
<span class="line"><span style="color:#24292E;">    auth.login()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> client:</span></span>
<span class="line"><span style="color:#24292E;">        auth.logout()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;user_id&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> session</span></span></code></pre></div><h2 id="blog" tabindex="-1">Blog <a class="header-anchor" href="#blog" aria-label="Permalink to &quot;Blog {#blog}&quot;">​</a></h2><p>All the blog views use the <code>auth</code> fixture you wrote earlier. Call <code>auth.login()</code> and subsequent requests from the client will be logged in as the <code>test</code> user.</p><p>The <code>index</code> view should display information about the post that was added with the test data. When logged in as the author, there should be a link to edit the post.</p><p>You can also test some more authentication behavior while testing the <code>index</code> view. When not logged in, each page shows links to log in or register. When logged in, there’s a link to log out.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/test_blog.py</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> pytest</span></span>
<span class="line"><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> flaskr.db </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> get_db</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_index</span><span style="color:#E1E4E8;">(client, auth):</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.get(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&quot;Log In&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> response.data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&quot;Register&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> response.data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    auth.login()</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.get(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;Log Out&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> response.data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;test title&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> response.data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;by test on 2018-01-01&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> response.data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;test</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">body&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> response.data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;href=&quot;/1/update&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> response.data</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/test_blog.py</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> pytest</span></span>
<span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> flaskr.db </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> get_db</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_index</span><span style="color:#24292E;">(client, auth):</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.get(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&quot;Log In&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> response.data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&quot;Register&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> response.data</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    auth.login()</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.get(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;Log Out&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> response.data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;test title&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> response.data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;by test on 2018-01-01&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> response.data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;test</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">body&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> response.data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;href=&quot;/1/update&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> response.data</span></span></code></pre></div><p>A user must be logged in to access the <code>create</code>, <code>update</code>, and <code>delete</code> views. The logged in user must be the author of the post to access <code>update</code> and <code>delete</code>, otherwise a <code>403 Forbidden</code> status is returned. If a <code>post</code> with the given <code>id</code> doesn’t exist, <code>update</code> and <code>delete</code> should return <code>404 Not Found</code>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/test_blog.py</span></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">, (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;/create&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;/1/update&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;/1/delete&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_login_required</span><span style="color:#E1E4E8;">(client, path):</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.post(path)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> response.headers[</span><span style="color:#9ECBFF;">&quot;Location&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/auth/login&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_author_required</span><span style="color:#E1E4E8;">(app, client, auth):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># change the post author to another user</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="color:#E1E4E8;">        db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_db()</span></span>
<span class="line"><span style="color:#E1E4E8;">        db.execute(</span><span style="color:#9ECBFF;">&#39;UPDATE post SET author_id = 2 WHERE id = 1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        db.commit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    auth.login()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># current user can&#39;t modify other user&#39;s post</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> client.post(</span><span style="color:#9ECBFF;">&#39;/1/update&#39;</span><span style="color:#E1E4E8;">).status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">403</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> client.post(</span><span style="color:#9ECBFF;">&#39;/1/delete&#39;</span><span style="color:#E1E4E8;">).status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">403</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># current user doesn&#39;t see edit link</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;href=&quot;/1/update&quot;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">not</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> client.get(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">).data</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">, (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;/2/update&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;/2/delete&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_exists_required</span><span style="color:#E1E4E8;">(client, auth, path):</span></span>
<span class="line"><span style="color:#E1E4E8;">    auth.login()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> client.post(path).status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">404</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/test_blog.py</span></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">, (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;/create&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;/1/update&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;/1/delete&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_login_required</span><span style="color:#24292E;">(client, path):</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.post(path)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> response.headers[</span><span style="color:#032F62;">&quot;Location&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/auth/login&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_author_required</span><span style="color:#24292E;">(app, client, auth):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># change the post author to another user</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> app.app_context():</span></span>
<span class="line"><span style="color:#24292E;">        db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_db()</span></span>
<span class="line"><span style="color:#24292E;">        db.execute(</span><span style="color:#032F62;">&#39;UPDATE post SET author_id = 2 WHERE id = 1&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        db.commit()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    auth.login()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># current user can&#39;t modify other user&#39;s post</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> client.post(</span><span style="color:#032F62;">&#39;/1/update&#39;</span><span style="color:#24292E;">).status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">403</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> client.post(</span><span style="color:#032F62;">&#39;/1/delete&#39;</span><span style="color:#24292E;">).status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">403</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># current user doesn&#39;t see edit link</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;href=&quot;/1/update&quot;&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> client.get(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">).data</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">, (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;/2/update&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;/2/delete&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_exists_required</span><span style="color:#24292E;">(client, auth, path):</span></span>
<span class="line"><span style="color:#24292E;">    auth.login()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> client.post(path).status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">404</span></span></code></pre></div><p>The <code>create</code> and <code>update</code> views should render and return a <code>200 OK</code> status for a <code>GET</code> request. When valid data is sent in a <code>POST</code> request, <code>create</code> should insert the new post data into the database, and <code>update</code> should modify the existing data. Both pages should show an error message on invalid data.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/test_blog.py</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_create</span><span style="color:#E1E4E8;">(client, auth, app):</span></span>
<span class="line"><span style="color:#E1E4E8;">    auth.login()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> client.get(</span><span style="color:#9ECBFF;">&#39;/create&#39;</span><span style="color:#E1E4E8;">).status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">    client.post(</span><span style="color:#9ECBFF;">&#39;/create&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;created&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;body&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="color:#E1E4E8;">        db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_db()</span></span>
<span class="line"><span style="color:#E1E4E8;">        count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.execute(</span><span style="color:#9ECBFF;">&#39;SELECT COUNT(id) FROM post&#39;</span><span style="color:#E1E4E8;">).fetchone()[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_update</span><span style="color:#E1E4E8;">(client, auth, app):</span></span>
<span class="line"><span style="color:#E1E4E8;">    auth.login()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> client.get(</span><span style="color:#9ECBFF;">&#39;/1/update&#39;</span><span style="color:#E1E4E8;">).status_code </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span></span>
<span class="line"><span style="color:#E1E4E8;">    client.post(</span><span style="color:#9ECBFF;">&#39;/1/update&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;updated&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;body&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="color:#E1E4E8;">        db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_db()</span></span>
<span class="line"><span style="color:#E1E4E8;">        post </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.execute(</span><span style="color:#9ECBFF;">&#39;SELECT * FROM post WHERE id = 1&#39;</span><span style="color:#E1E4E8;">).fetchone()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> post[</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;updated&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">@pytest.mark.parametrize</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">, (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;/create&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;/1/update&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_create_update_validate</span><span style="color:#E1E4E8;">(client, auth, path):</span></span>
<span class="line"><span style="color:#E1E4E8;">    auth.login()</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.post(path, </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;body&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">b</span><span style="color:#9ECBFF;">&#39;Title is required.&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> response.data</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/test_blog.py</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_create</span><span style="color:#24292E;">(client, auth, app):</span></span>
<span class="line"><span style="color:#24292E;">    auth.login()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> client.get(</span><span style="color:#032F62;">&#39;/create&#39;</span><span style="color:#24292E;">).status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">    client.post(</span><span style="color:#032F62;">&#39;/create&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;title&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;created&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;body&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> app.app_context():</span></span>
<span class="line"><span style="color:#24292E;">        db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_db()</span></span>
<span class="line"><span style="color:#24292E;">        count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.execute(</span><span style="color:#032F62;">&#39;SELECT COUNT(id) FROM post&#39;</span><span style="color:#24292E;">).fetchone()[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_update</span><span style="color:#24292E;">(client, auth, app):</span></span>
<span class="line"><span style="color:#24292E;">    auth.login()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> client.get(</span><span style="color:#032F62;">&#39;/1/update&#39;</span><span style="color:#24292E;">).status_code </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span></span>
<span class="line"><span style="color:#24292E;">    client.post(</span><span style="color:#032F62;">&#39;/1/update&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;title&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;updated&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;body&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> app.app_context():</span></span>
<span class="line"><span style="color:#24292E;">        db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_db()</span></span>
<span class="line"><span style="color:#24292E;">        post </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.execute(</span><span style="color:#032F62;">&#39;SELECT * FROM post WHERE id = 1&#39;</span><span style="color:#24292E;">).fetchone()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> post[</span><span style="color:#032F62;">&#39;title&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;updated&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@pytest.mark.parametrize</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">, (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;/create&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;/1/update&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_create_update_validate</span><span style="color:#24292E;">(client, auth, path):</span></span>
<span class="line"><span style="color:#24292E;">    auth.login()</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.post(path, </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;title&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;body&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">b</span><span style="color:#032F62;">&#39;Title is required.&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> response.data</span></span></code></pre></div><p>The <code>delete</code> view should redirect to the index URL and the post should no longer exist in the database.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># tests/test_blog.py</span></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_delete</span><span style="color:#E1E4E8;">(client, auth, app):</span></span>
<span class="line"><span style="color:#E1E4E8;">    auth.login()</span></span>
<span class="line"><span style="color:#E1E4E8;">    response </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.post(</span><span style="color:#9ECBFF;">&#39;/1/delete&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> response.headers[</span><span style="color:#9ECBFF;">&quot;Location&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="color:#E1E4E8;">        db </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> get_db()</span></span>
<span class="line"><span style="color:#E1E4E8;">        post </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> db.execute(</span><span style="color:#9ECBFF;">&#39;SELECT * FROM post WHERE id = 1&#39;</span><span style="color:#E1E4E8;">).fetchone()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> post </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">None</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># tests/test_blog.py</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_delete</span><span style="color:#24292E;">(client, auth, app):</span></span>
<span class="line"><span style="color:#24292E;">    auth.login()</span></span>
<span class="line"><span style="color:#24292E;">    response </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.post(</span><span style="color:#032F62;">&#39;/1/delete&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> response.headers[</span><span style="color:#032F62;">&quot;Location&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> app.app_context():</span></span>
<span class="line"><span style="color:#24292E;">        db </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> get_db()</span></span>
<span class="line"><span style="color:#24292E;">        post </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> db.execute(</span><span style="color:#032F62;">&#39;SELECT * FROM post WHERE id = 1&#39;</span><span style="color:#24292E;">).fetchone()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> post </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">None</span></span></code></pre></div><h3 id="running-the-tests" tabindex="-1">Running the Tests <a class="header-anchor" href="#running-the-tests" aria-label="Permalink to &quot;Running the Tests {#running-the-tests}&quot;">​</a></h3><p>Some extra configuration, which is not required but makes running tests with coverage less verbose, can be added to the project’s <code>pyproject.toml</code> file.</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FDAEB7;font-style:italic;">&lt;!-- pyproject.toml --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ini_options</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">testpaths = [</span><span style="color:#9ECBFF;">&quot;tests&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">tool</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">coverage</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">branch = </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">source = [</span><span style="color:#9ECBFF;">&quot;flaskr&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#B31D28;font-style:italic;">&lt;!-- pyproject.toml --&gt;</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ini_options</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">testpaths = [</span><span style="color:#032F62;">&quot;tests&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">tool</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">coverage</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">branch = </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">source = [</span><span style="color:#032F62;">&quot;flaskr&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><p>To run the tests, use the <code>pytest</code> command. It will find and run all the test functions you’ve written.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3.6</span><span style="color:#9ECBFF;">.4,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-3.5.0,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">py-1.5.3,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-0.6.0</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/user/Projects/flask-tutorial</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">tests/test_auth.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">........</span><span style="color:#E1E4E8;">                                      [ </span><span style="color:#79B8FF;">34</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">tests/test_blog.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">............</span><span style="color:#E1E4E8;">                                  [ </span><span style="color:#79B8FF;">86</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">tests/test_db.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">..</span><span style="color:#E1E4E8;">                                              [ </span><span style="color:#79B8FF;">95</span><span style="color:#9ECBFF;">%]</span></span>
<span class="line"><span style="color:#B392F0;">tests/test_factory.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">..</span><span style="color:#E1E4E8;">                                         [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">====================== </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">seconds</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=======================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.6</span><span style="color:#032F62;">.4,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-3.5.0,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">py-1.5.3,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-0.6.0</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/user/Projects/flask-tutorial</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">tests/test_auth.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">........</span><span style="color:#24292E;">                                      [ </span><span style="color:#005CC5;">34</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">tests/test_blog.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">............</span><span style="color:#24292E;">                                  [ </span><span style="color:#005CC5;">86</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">tests/test_db.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">..</span><span style="color:#24292E;">                                              [ </span><span style="color:#005CC5;">95</span><span style="color:#032F62;">%]</span></span>
<span class="line"><span style="color:#6F42C1;">tests/test_factory.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">..</span><span style="color:#24292E;">                                         [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">====================== </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">seconds</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=======================</span></span></code></pre></div><p>If any tests fail, pytest will show the error that was raised. You can run <code>pytest -v</code> to get a list of each test function rather than dots.</p><p>To measure the code coverage of your tests, use the <code>coverage</code> command to run pytest instead of running it directly.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">coverage</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">coverage</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span></span></code></pre></div><p>You can either view a simple coverage report in the terminal:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">coverage</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">report</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;">                 </span><span style="color:#9ECBFF;">Stmts</span><span style="color:#E1E4E8;">   </span><span style="color:#9ECBFF;">Miss</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Branch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">BrPart</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">Cover</span></span>
<span class="line"><span style="color:#B392F0;">------------------------------------------------------</span></span>
<span class="line"><span style="color:#B392F0;">flaskr/__init__.py</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">100</span><span style="color:#9ECBFF;">%</span></span>
<span class="line"><span style="color:#B392F0;">flaskr/auth.py</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">54</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">100</span><span style="color:#9ECBFF;">%</span></span>
<span class="line"><span style="color:#B392F0;">flaskr/blog.py</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">54</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">100</span><span style="color:#9ECBFF;">%</span></span>
<span class="line"><span style="color:#B392F0;">flaskr/db.py</span><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">24</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">100</span><span style="color:#9ECBFF;">%</span></span>
<span class="line"><span style="color:#B392F0;">------------------------------------------------------</span></span>
<span class="line"><span style="color:#B392F0;">TOTAL</span><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">153</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">44</span><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">100</span><span style="color:#9ECBFF;">%</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">coverage</span><span style="color:#24292E;"> </span><span style="color:#032F62;">report</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Name</span><span style="color:#24292E;">                 </span><span style="color:#032F62;">Stmts</span><span style="color:#24292E;">   </span><span style="color:#032F62;">Miss</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Branch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BrPart</span><span style="color:#24292E;">  </span><span style="color:#032F62;">Cover</span></span>
<span class="line"><span style="color:#6F42C1;">------------------------------------------------------</span></span>
<span class="line"><span style="color:#6F42C1;">flaskr/__init__.py</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">21</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">100</span><span style="color:#032F62;">%</span></span>
<span class="line"><span style="color:#6F42C1;">flaskr/auth.py</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">54</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">22</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">100</span><span style="color:#032F62;">%</span></span>
<span class="line"><span style="color:#6F42C1;">flaskr/blog.py</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">54</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">100</span><span style="color:#032F62;">%</span></span>
<span class="line"><span style="color:#6F42C1;">flaskr/db.py</span><span style="color:#24292E;">            </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">100</span><span style="color:#032F62;">%</span></span>
<span class="line"><span style="color:#6F42C1;">------------------------------------------------------</span></span>
<span class="line"><span style="color:#6F42C1;">TOTAL</span><span style="color:#24292E;">                  </span><span style="color:#005CC5;">153</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">     </span><span style="color:#005CC5;">44</span><span style="color:#24292E;">      </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">100</span><span style="color:#032F62;">%</span></span></code></pre></div><p>An HTML report allows you to see which lines were covered in each file:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">coverage</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">coverage</span><span style="color:#24292E;"> </span><span style="color:#032F62;">html</span></span></code></pre></div><p>This generates files in the <code>htmlcov</code> directory. Open <code>htmlcov/index.html</code> in your browser to see the report.</p><p>Continue to <a href="/python/flask/user_guide/tutorial/deploy#deploy-to-production">Deploy to Production</a>.</p>`,70),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{h as __pageData,u as default};
