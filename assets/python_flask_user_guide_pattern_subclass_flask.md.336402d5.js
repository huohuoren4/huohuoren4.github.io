import{_ as s,o as a,c as l,V as e}from"./chunks/framework.d3b95951.js";const d=JSON.parse('{"title":"Subclassing Flask","description":"","frontmatter":{},"headers":[],"relativePath":"python/flask/user_guide/pattern/subclass_flask.md","filePath":"python/flask/user_guide/pattern/subclass_flask.md"}'),t={name:"python/flask/user_guide/pattern/subclass_flask.md"},n=e(`<h1 id="subclassing-flask" tabindex="-1">Subclassing Flask <a class="header-anchor" href="#subclassing-flask" aria-label="Permalink to &quot;Subclassing Flask&quot;">​</a></h1><p>The <a href="https://flask.palletsprojects.com/en/2.3.x/api/#flask.Flask" target="_blank" rel="noreferrer">Flask</a> class is designed for subclassing.</p><p>For example, you may want to override how request parameters are handled to preserve their order:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> flask </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Flask</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Request</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> werkzeug</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">datastructures </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> ImmutableOrderedMultiDict</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyRequest</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">Request subclass to override request parameter storage</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    parameter_storage_class </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ImmutableOrderedMultiDict</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyFlask</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Flask</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">Flask subclass using the custom request class</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    request_class </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MyRequest</span></span></code></pre></div><p>This is the recommended approach for overriding or augmenting Flask’s internal functionality.</p>`,5),o=[n];function p(r,c,i,u,y,F){return a(),l("div",null,o)}const f=s(t,[["render",p]]);export{d as __pageData,f as default};
