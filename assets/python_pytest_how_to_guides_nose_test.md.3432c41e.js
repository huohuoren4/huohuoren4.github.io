import{_ as t,o as e,c as s,X as o}from"./chunks/framework.b5656a4e.js";const f=JSON.parse('{"title":"How to run tests written for nose","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/nose_test.md","filePath":"python/pytest/how_to_guides/nose_test.md","lastUpdated":1692620003000}'),a={name:"python/pytest/how_to_guides/nose_test.md"},l=o(`<h1 id="how-to-run-tests-written-for-nose" tabindex="-1">How to run tests written for nose <a class="header-anchor" href="#how-to-run-tests-written-for-nose" aria-label="Permalink to &quot;How to run tests written for nose&quot;">​</a></h1><p><code>pytest</code> has basic support for running tests written for <a href="https://nose.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">nose</a>.</p><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>This functionality has been deprecated and is likely to be removed in <code>pytest 8.x</code>.</p></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>After <a href="/python/pytest/get_started#install-pytest">Install pytest</a> type:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">python</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">setup.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">develop</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># make sure tests can import our package</span></span>
<span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># instead of &#39;nosetests&#39;</span></span></code></pre></div><p>and you should be able to run your nose style tests and make use of pytest’s capabilities.</p><h2 id="supported-nose-idioms" tabindex="-1">Supported nose Idioms <a class="header-anchor" href="#supported-nose-idioms" aria-label="Permalink to &quot;Supported nose Idioms&quot;">​</a></h2><ul><li><p><code>setup()</code> and <code>teardown()</code> at module/class/method level: any function or method called <code>setup</code> will be called during the setup phase for each test, same for <code>teardown</code>.</p></li><li><p><code>SkipTest</code> exceptions and markers</p></li><li><p>setup/teardown decorators</p></li><li><p><code>__test__</code> attribute on modules/classes/functions</p></li><li><p>general usage of nose utilities</p></li></ul><h2 id="unsupported-idioms-known-issues" tabindex="-1">Unsupported idioms / known issues <a class="header-anchor" href="#unsupported-idioms-known-issues" aria-label="Permalink to &quot;Unsupported idioms / known issues&quot;">​</a></h2><ul><li><p>unittest-style <code>setUp, tearDown, setUpClass, tearDownClass</code> are recognized only on <code>unittest.TestCase</code> classes but not on plain classes. <code>nose</code> supports these methods also on plain classes but pytest deliberately does not. As <code>nose</code> and pytest already both support <code>setup_class, teardown_class, setup_method, teardown_method</code> it doesn’t seem useful to duplicate the unittest-API like nose does. If you however rather think pytest should support the unittest-spelling on plain classes please post to <a href="https://github.com/pytest-dev/pytest/issues/377" target="_blank" rel="noreferrer">issue #377</a>.</p></li><li><p>nose imports test modules with the same import path (e.g. <code>tests.test_mode</code>) but different file system paths (e.g. <code>tests/test_mode.py</code> and <code>other/tests/test_mode.py</code>) by extending sys.path/import semantics. pytest does not do that. Note that <a href="https://nose2.readthedocs.io/en/latest/differences.html#test-discovery-and-loading" target="_blank" rel="noreferrer">nose2 choose to avoid this sys.path/import hackery</a>.</p><p>If you place a conftest.py file in the root directory of your project (as determined by pytest) pytest will run tests “nose style” against the code below that directory by adding it to your <code>sys.path</code> instead of running against your installed code.</p><p>You may find yourself wanting to do this if you ran <code>python setup.py install</code> to set up your project, as opposed to <code>python setup.py develop</code> or any of the package manager equivalents. Installing with develop in a virtual environment like tox is recommended over this pattern.</p></li><li><p>nose-style doctests are not collected and executed correctly, also doctest fixtures don’t work.</p></li><li><p>no nose-configuration is recognized.</p></li><li><p><code>yield</code>-based methods are fundamentally incompatible with pytest because they don’t support fixtures properly since collection and test execution are separated.</p></li></ul><p>Here is a table comparing the default supported naming conventions for both nose and pytest.</p><table><thead><tr><th style="text-align:left;">what</th><th style="text-align:left;">default naming convention</th><th style="text-align:left;">pytest</th><th style="text-align:left;">nose</th></tr></thead><tbody><tr><td style="text-align:left;">module</td><td style="text-align:left;"><code>test*.py</code></td><td style="text-align:left;"></td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;">module</td><td style="text-align:left;"><code>test_*.py</code></td><td style="text-align:left;">✅</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;">module</td><td style="text-align:left;"><code>*_test.py</code></td><td style="text-align:left;">✅</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">module</td><td style="text-align:left;"><code>*_tests.py</code></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;"><code>*(unittest.TestCase)</code></td><td style="text-align:left;">✅</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;">method</td><td style="text-align:left;"><code>test_*.py</code></td><td style="text-align:left;">✅</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;"><code>Test*.py</code></td><td style="text-align:left;">✅</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">method</td><td style="text-align:left;"><code>test_*.py</code></td><td style="text-align:left;">✅</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">method</td><td style="text-align:left;"><code>test_*.py</code></td><td style="text-align:left;">✅</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="migrating-from-nose-to-pytest" tabindex="-1">Migrating from nose to pytest <a class="header-anchor" href="#migrating-from-nose-to-pytest" aria-label="Permalink to &quot;Migrating from nose to pytest&quot;">​</a></h2><p><a href="https://github.com/pytest-dev/nose2pytest" target="_blank" rel="noreferrer">nose2pytest</a> is a Python script and pytest plugin to help convert Nose-based tests into pytest-based tests. Specifically, the script transforms <code>nose.tools.assert_*</code> function calls into raw assert statements, while preserving format of original arguments as much as possible.</p>`,15),n=[l];function d(i,r,p,c,y,u){return e(),s("div",null,n)}const g=t(a,[["render",d]]);export{f as __pageData,g as default};
