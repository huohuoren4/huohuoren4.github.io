import{_ as e,o as s,c as n,Q as a}from"./chunks/framework.01af844e.js";const y=JSON.parse('{"title":"Container Runtimes","description":"","frontmatter":{},"headers":[],"relativePath":"golang/k8s/get_started/prod_env/runtime.md","filePath":"golang/k8s/get_started/prod_env/runtime.md","lastUpdated":1694020305000}'),o={name:"golang/k8s/get_started/prod_env/runtime.md"},t=a(`<h1 id="container-runtimes" tabindex="-1">Container Runtimes <a class="header-anchor" href="#container-runtimes" aria-label="Permalink to &quot;Container Runtimes&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Dockershim has been removed from the Kubernetes project as of release 1.24. Read the <a href="https://kubernetes.io/dockershim" target="_blank" rel="noreferrer">Dockershim Removal FAQ</a> for further details.</p></div><p>You need to install a container runtime into each node in the cluster so that Pods can run there. This page outlines what is involved and describes related tasks for setting up nodes.</p><p>Kubernetes 1.28 requires that you use a runtime that conforms with the Container Runtime Interface (CRI).</p><p>See <a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cri-versions" target="_blank" rel="noreferrer">CRI version support</a> for more information.</p><p>This page provides an outline of how to use several common container runtimes with Kubernetes.</p><ul><li><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd" target="_blank" rel="noreferrer">containerd</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cri-o" target="_blank" rel="noreferrer">CRI-O</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker" target="_blank" rel="noreferrer">Docker Engine</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#mcr" target="_blank" rel="noreferrer">Mirantis Container Runtime</a></li></ul><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Kubernetes releases before v1.24 included a direct integration with Docker Engine, using a component named dockershim. That special direct integration is no longer part of Kubernetes (this removal was <a href="https://kubernetes.io/blog/2020/12/08/kubernetes-1-20-release-announcement/#dockershim-deprecation" target="_blank" rel="noreferrer">announced</a> as part of the v1.20 release). You can read <a href="https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/check-if-dockershim-removal-affects-you/" target="_blank" rel="noreferrer">Check whether Dockershim removal affects you</a> to understand how this removal might affect you. To learn about migrating from using dockershim, see <a href="https://kubernetes.io/docs/tasks/administer-cluster/migrating-from-dockershim/" target="_blank" rel="noreferrer">Migrating from dockershim</a>.</p><p>If you are running a version of Kubernetes other than v1.28, check the documentation for that version.</p></div><h2 id="install-and-configure-prerequisites" tabindex="-1">Install and configure prerequisites <a class="header-anchor" href="#install-and-configure-prerequisites" aria-label="Permalink to &quot;Install and configure prerequisites&quot;">​</a></h2><p>The following steps apply common settings for Kubernetes nodes on Linux.</p><p>You can skip a particular setting if you&#39;re certain you don&#39;t need it.</p><p>For more information, see <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/#network-plugin-requirements" target="_blank" rel="noreferrer">Network Plugin Requirements</a> or the documentation for your specific container runtime.</p><h3 id="forwarding-ipv4-and-letting-iptables-see-bridged-traffic" tabindex="-1">Forwarding IPv4 and letting iptables see bridged traffic <a class="header-anchor" href="#forwarding-ipv4-and-letting-iptables-see-bridged-traffic" aria-label="Permalink to &quot;Forwarding IPv4 and letting iptables see bridged traffic&quot;">​</a></h3><p>Execute the below mentioned instructions:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#9ECBFF;">EOF</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> sudo tee /etc/modules-load.d/k8s.conf</span></span>
<span class="line"><span style="color:#9ECBFF;">overlay</span></span>
<span class="line"><span style="color:#9ECBFF;">br_netfilter</span></span>
<span class="line"><span style="color:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">modprobe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">overlay</span></span>
<span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">modprobe</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">br_netfilter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># sysctl params required by setup, params persist across reboots</span></span>
<span class="line"><span style="color:#B392F0;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#9ECBFF;">EOF</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> sudo tee /etc/sysctl.d/k8s.conf</span></span>
<span class="line"><span style="color:#9ECBFF;">net.bridge.bridge-nf-call-iptables  = 1</span></span>
<span class="line"><span style="color:#9ECBFF;">net.bridge.bridge-nf-call-ip6tables = 1</span></span>
<span class="line"><span style="color:#9ECBFF;">net.ipv4.ip_forward                 = 1</span></span>
<span class="line"><span style="color:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Apply sysctl params without reboot</span></span>
<span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sysctl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--system</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">EOF</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> sudo tee /etc/modules-load.d/k8s.conf</span></span>
<span class="line"><span style="color:#032F62;">overlay</span></span>
<span class="line"><span style="color:#032F62;">br_netfilter</span></span>
<span class="line"><span style="color:#032F62;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">modprobe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">overlay</span></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">modprobe</span><span style="color:#24292E;"> </span><span style="color:#032F62;">br_netfilter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># sysctl params required by setup, params persist across reboots</span></span>
<span class="line"><span style="color:#6F42C1;">cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#032F62;">EOF</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> sudo tee /etc/sysctl.d/k8s.conf</span></span>
<span class="line"><span style="color:#032F62;">net.bridge.bridge-nf-call-iptables  = 1</span></span>
<span class="line"><span style="color:#032F62;">net.bridge.bridge-nf-call-ip6tables = 1</span></span>
<span class="line"><span style="color:#032F62;">net.ipv4.ip_forward                 = 1</span></span>
<span class="line"><span style="color:#032F62;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Apply sysctl params without reboot</span></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sysctl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--system</span></span></code></pre></div><p>Verify that the <code>br_netfilter</code>, <code>overlay</code> modules are loaded by running the following commands:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">lsmod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">br_netfilter</span></span>
<span class="line"><span style="color:#B392F0;">lsmod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">overlay</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">lsmod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">br_netfilter</span></span>
<span class="line"><span style="color:#6F42C1;">lsmod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">overlay</span></span></code></pre></div><p>Verify that the <code>net.bridge.bridge-nf-call-iptables</code>, <code>net.bridge.bridge-nf-call-ip6tables</code>, and <code>net.ipv4.ip_forward</code> system variables are set to <code>1</code> in your <code>sysctl</code> config by running the following command:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sysctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">net.bridge.bridge-nf-call-iptables</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">net.bridge.bridge-nf-call-ip6tables</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">net.ipv4.ip_forward</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sysctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">net.bridge.bridge-nf-call-iptables</span><span style="color:#24292E;"> </span><span style="color:#032F62;">net.bridge.bridge-nf-call-ip6tables</span><span style="color:#24292E;"> </span><span style="color:#032F62;">net.ipv4.ip_forward</span></span></code></pre></div><h2 id="cgroup-drivers" tabindex="-1">cgroup drivers <a class="header-anchor" href="#cgroup-drivers" aria-label="Permalink to &quot;cgroup drivers&quot;">​</a></h2><p>On Linux, control groups are used to constrain resources that are allocated to processes.</p><p>Both the kubelet and the underlying container runtime need to interface with control groups to enforce <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/" target="_blank" rel="noreferrer">resource management for pods and containers</a> and set resources such as cpu/memory requests and limits. To interface with control groups, the kubelet and the container runtime need to use a cgroup driver. It&#39;s critical that the kubelet and the container runtime use the same cgroup driver and are configured the same.</p><p>There are two cgroup drivers available:</p><ul><li><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#cgroupfs-cgroup-driver" target="_blank" rel="noreferrer">cgroupfs</a></li><li><a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#systemd-cgroup-driver" target="_blank" rel="noreferrer">systemd</a></li></ul><h3 id="cgroupfs-driver" tabindex="-1">cgroupfs driver <a class="header-anchor" href="#cgroupfs-driver" aria-label="Permalink to &quot;cgroupfs driver&quot;">​</a></h3><p>The <code>cgroupfs</code> driver is the <a href="https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1" target="_blank" rel="noreferrer">default cgroup driver in the kubelet</a>. When the <code>cgroupfs</code> driver is used, the kubelet and the container runtime directly interface with the cgroup filesystem to configure cgroups.</p><p>The <code>cgroupfs</code> driver is not recommended when <a href="https://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noreferrer">systemd</a> is the init system because systemd expects a single cgroup manager on the system. Additionally, if you use <a href="https://kubernetes.io/docs/concepts/architecture/cgroups" target="_blank" rel="noreferrer">cgroup v2</a>, use the systemd <code>cgroup</code> driver instead of <code>cgroupfs</code>.</p><h3 id="systemd-cgroup-driver" tabindex="-1">systemd cgroup driver <a class="header-anchor" href="#systemd-cgroup-driver" aria-label="Permalink to &quot;systemd cgroup driver&quot;">​</a></h3><p>When <a href="https://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noreferrer">systemd</a> is chosen as the init system for a Linux distribution, the init process generates and consumes a root control group (<code>cgroup</code>) and acts as a cgroup manager.</p><p>systemd has a tight integration with cgroups and allocates a cgroup per systemd unit. As a result, if you use <code>systemd</code> as the init system with the <code>cgroupfs</code> driver, the system gets two different cgroup managers.</p><p>Two cgroup managers result in two views of the available and in-use resources in the system. In some cases, nodes that are configured to use <code>cgroupfs</code> for the kubelet and container runtime, but use <code>systemd</code> for the rest of the processes become unstable under resource pressure.</p><p>The approach to mitigate this instability is to use <code>systemd</code> as the cgroup driver for the kubelet and the container runtime when systemd is the selected init system.</p><p>To set <code>systemd</code> as the cgroup driver, edit the <a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/" target="_blank" rel="noreferrer">KubeletConfiguration</a> option of <code>cgroupDriver</code> and set it to <code>systemd</code>. For example:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">kubelet.config.k8s.io/v1beta1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">KubeletConfiguration</span></span>
<span class="line"><span style="color:#B392F0;">...</span></span>
<span class="line"><span style="color:#85E89D;">cgroupDriver</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">systemd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">kubelet.config.k8s.io/v1beta1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">KubeletConfiguration</span></span>
<span class="line"><span style="color:#6F42C1;">...</span></span>
<span class="line"><span style="color:#22863A;">cgroupDriver</span><span style="color:#24292E;">: </span><span style="color:#032F62;">systemd</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>Starting with v1.22 and later, when creating a cluster with kubeadm, if the user does not set the <code>cgroupDriver</code> field under <code>KubeletConfiguration</code>, kubeadm defaults it to <code>systemd</code>.</p></div><p>In Kubernetes v1.28, with the <code>KubeletCgroupDriverFromCRI</code> <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/" target="_blank" rel="noreferrer">feature gate</a> enabled and a container runtime that supports the <code>RuntimeConfig</code> CRI RPC, the kubelet automatically detects the appropriate cgroup driver from the runtime, and ignores the <code>cgroupDriver</code> setting within the kubelet configuration.</p><p>If you configure <code>systemd</code> as the cgroup driver for the kubelet, you must also configure <code>systemd</code> as the cgroup driver for the container runtime. Refer to the documentation for your container runtime for instructions. For example:</p><ul><li>containerd</li><li>CRI-O</li></ul><div class="warning custom-block"><p class="custom-block-title">Caution:</p><p>Changing the cgroup driver of a Node that has joined a cluster is a sensitive operation. If the kubelet has created Pods using the semantics of one cgroup driver, changing the container runtime to another cgroup driver can cause errors when trying to re-create the Pod sandbox for such existing Pods. Restarting the kubelet may not solve such errors.</p><p>If you have automation that makes it feasible, replace the node with another using the updated configuration, or reinstall it using automation.</p></div><h3 id="migrating-to-the-systemd-driver-in-kubeadm-managed-clusters" tabindex="-1">Migrating to the <code>systemd</code> driver in kubeadm managed clusters <a class="header-anchor" href="#migrating-to-the-systemd-driver-in-kubeadm-managed-clusters" aria-label="Permalink to &quot;Migrating to the \`systemd\` driver in kubeadm managed clusters&quot;">​</a></h3><p>If you wish to migrate to the <code>systemd</code> cgroup driver in existing kubeadm managed clusters, follow <a href="https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/" target="_blank" rel="noreferrer">configuring a cgroup driver</a>.</p><h2 id="cri-version-support" tabindex="-1">CRI version support <a class="header-anchor" href="#cri-version-support" aria-label="Permalink to &quot;CRI version support&quot;">​</a></h2><p>Your container runtime must support at least v1alpha2 of the container runtime interface.</p><p>Kubernetes <a href="https://kubernetes.io/blog/2022/11/18/upcoming-changes-in-kubernetes-1-26/#cri-api-removal" target="_blank" rel="noreferrer">starting v1.26</a> only works with v1 of the CRI API. Earlier versions default to v1 version, however if a container runtime does not support the v1 API, the kubelet falls back to using the (deprecated) v1alpha2 API instead.</p><h2 id="container-runtimes-1" tabindex="-1">Container runtimes <a class="header-anchor" href="#container-runtimes-1" aria-label="Permalink to &quot;Container runtimes&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>This section links to third party projects that provide functionality required by Kubernetes. The Kubernetes project authors aren&#39;t responsible for these projects, which are listed alphabetically. To add a project to this list, read the <a href="https://kubernetes.io/docs/contribute/style/content-guide/#third-party-content" target="_blank" rel="noreferrer">content guide</a> before submitting a change. <a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#third-party-content-disclaimer" target="_blank" rel="noreferrer">More information</a>.</p></div><h3 id="containerd" tabindex="-1">containerd <a class="header-anchor" href="#containerd" aria-label="Permalink to &quot;containerd&quot;">​</a></h3><p>This section outlines the necessary steps to use containerd as CRI runtime.</p><p>To install containerd on your system, follow the instructions on <a href="https://github.com/containerd/containerd/blob/main/docs/getting-started.md" target="_blank" rel="noreferrer">getting started with containerd</a>. Return to this step once you&#39;ve created a valid <code>config.toml</code> configuration file.</p><ul><li><p><strong>Linux</strong></p><p>You can find this file under the path <code>/etc/containerd/config.toml</code>.</p></li><li><p><strong>Windows</strong></p><p>You can find this file under the path <code>C:\\Program Files\\containerd\\config.toml</code>.</p></li></ul><p>On Linux the default CRI socket for containerd is <code>/run/containerd/containerd.sock</code>. On Windows the default CRI endpoint is <code>npipe://./pipe/containerd-containerd</code>.</p><h4 id="configuring-the-systemd-cgroup-driver" tabindex="-1">Configuring the systemd cgroup driver <a class="header-anchor" href="#configuring-the-systemd-cgroup-driver" aria-label="Permalink to &quot;Configuring the systemd cgroup driver&quot;">​</a></h4><p>To use the <code>systemd</code> cgroup driver in <code>/etc/containerd/config.toml</code> with <code>runc</code>, set</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">plugins</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">&quot;io</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">containerd</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">grpc</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">v1</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">cri&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">containerd</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">runtimes</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">runc</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FDAEB7;font-style:italic;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#B392F0;">plugins</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">&quot;io</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">containerd</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">grpc</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">v1</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">cri&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">containerd</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">runtimes</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">runc</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">options</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    SystemdCgroup = </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">plugins</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">&quot;io</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">containerd</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">grpc</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">v1</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">cri&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">containerd</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">runtimes</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">runc</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#B31D28;font-style:italic;">...</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#6F42C1;">plugins</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">&quot;io</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">containerd</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">grpc</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">v1</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">cri&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">containerd</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">runtimes</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">runc</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">options</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    SystemdCgroup = </span><span style="color:#005CC5;">true</span></span></code></pre></div><p>The <code>systemd</code> cgroup driver is recommended if you use <a href="https://kubernetes.io/docs/concepts/architecture/cgroups" target="_blank" rel="noreferrer">cgroup v2</a>.</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>If you installed containerd from a package (for example, <code>RPM</code> or <code>.deb</code>), you may find that the CRI integration plugin is disabled by default.</p><p>You need CRI support enabled to use containerd with Kubernetes. Make sure that cri is not included in <code>thedisabled_plugins</code> list within <code>/etc/containerd/config.toml</code>; if you made changes to that file, also restart <code>containerd</code>.</p><p>If you experience container crash loops after the initial cluster installation or after installing a CNI, the containerd configuration provided with the package might contain incompatible configuration parameters. Consider resetting the containerd configuration with <code>containerd config default &gt; /etc/containerd/config.toml</code> as specified in <a href="https://github.com/containerd/containerd/blob/main/docs/getting-started.md#advanced-topics" target="_blank" rel="noreferrer">getting-started.md</a> and then set the configuration parameters specified above accordingly.</p></div><p>If you apply this change, make sure to restart containerd:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">restart</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">containerd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">restart</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containerd</span></span></code></pre></div><p>When using kubeadm, manually configure the <a href="https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/#configuring-the-kubelet-cgroup-driver" target="_blank" rel="noreferrer">cgroup driver for kubelet</a>.</p><p>In Kubernetes v1.28, you can enable automatic detection of the cgroup driver as an alpha feature. See <a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#systemd-cgroup-driver" target="_blank" rel="noreferrer">systemd cgroup driver</a> for more details.</p><h4 id="overriding-the-sandbox-pause-image" tabindex="-1">Overriding the sandbox (pause) image <a class="header-anchor" href="#overriding-the-sandbox-pause-image" aria-label="Permalink to &quot;Overriding the sandbox (pause) image&quot;">​</a></h4><p>In your <a href="https://github.com/containerd/containerd/blob/main/docs/cri/config.md" target="_blank" rel="noreferrer">containerd config</a> you can overwrite the sandbox image by setting the following config:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">plugins</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">&quot;io</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">containerd</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">grpc</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">v1</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">cri&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  sandbox_image = </span><span style="color:#9ECBFF;">&quot;registry.k8s.io/pause:3.2&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">plugins</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">&quot;io</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">containerd</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">grpc</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">v1</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">cri&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  sandbox_image = </span><span style="color:#032F62;">&quot;registry.k8s.io/pause:3.2&quot;</span></span></code></pre></div><p>You might need to restart <code>containerd</code> as well once you&#39;ve updated the config file: <code>systemctl restart containerd</code>.</p><p>Please note, that it is a best practice for kubelet to declare the matching <code>pod-infra-container-image</code>. If not configured, kubelet may attempt to garbage collect the <code>pause</code> image. There is ongoing work in <a href="https://github.com/containerd/containerd/issues/6352" target="_blank" rel="noreferrer">containerd to pin the pause image</a> and not require this setting on kubelet any longer.</p><h3 id="cri-o" tabindex="-1">CRI-O <a class="header-anchor" href="#cri-o" aria-label="Permalink to &quot;CRI-O&quot;">​</a></h3><p>This section contains the necessary steps to install CRI-O as a container runtime.</p><p>To install CRI-O, follow <a href="https://github.com/cri-o/cri-o/blob/main/install.md#readme" target="_blank" rel="noreferrer">CRI-O Install Instructions</a>.</p><h4 id="cgroup-driver" tabindex="-1">cgroup driver <a class="header-anchor" href="#cgroup-driver" aria-label="Permalink to &quot;cgroup driver&quot;">​</a></h4><p>CRI-O uses the systemd cgroup driver per default, which is likely to work fine for you. To switch to the cgroupfs cgroup driver, either edit <code>/etc/crio/crio.conf</code> or place a drop-in configuration in <code>/etc/crio/crio.conf.d/02-cgroup-manager.conf</code>, for example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[crio.runtime]</span></span>
<span class="line"><span style="color:#e1e4e8;">conmon_cgroup = &quot;pod&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">cgroup_manager = &quot;cgroupfs&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[crio.runtime]</span></span>
<span class="line"><span style="color:#24292e;">conmon_cgroup = &quot;pod&quot;</span></span>
<span class="line"><span style="color:#24292e;">cgroup_manager = &quot;cgroupfs&quot;</span></span></code></pre></div><p>You should also note the changed <code>conmon_cgroup</code>, which has to be set to the value pod when using CRI-O with <code>cgroupfs</code>. It is generally necessary to keep the cgroup driver configuration of the kubelet (usually done via kubeadm) and CRI-O in sync.</p><p>In Kubernetes v1.28, you can enable automatic detection of the cgroup driver as an alpha feature. See <a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes/#systemd-cgroup-driver" target="_blank" rel="noreferrer">systemd cgroup driver</a> for more details.</p><p>For CRI-O, the CRI socket is <code>/var/run/crio/crio.sock</code> by default.</p><h4 id="overriding-the-sandbox-pause-image-1" tabindex="-1">Overriding the sandbox (pause) image <a class="header-anchor" href="#overriding-the-sandbox-pause-image-1" aria-label="Permalink to &quot;Overriding the sandbox (pause) image&quot;">​</a></h4><p>In your CRI-O config you can set the following config value:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">[crio.image]</span></span>
<span class="line"><span style="color:#e1e4e8;">pause_image=&quot;registry.k8s.io/pause:3.6&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[crio.image]</span></span>
<span class="line"><span style="color:#24292e;">pause_image=&quot;registry.k8s.io/pause:3.6&quot;</span></span></code></pre></div><p><code>This config option supports live configuration reload to apply this change:</code>systemctl reload crio<code>or by sending</code>SIGHUP<code>to the</code>crio\` process.</p><h3 id="docker-engine" tabindex="-1">Docker Engine <a class="header-anchor" href="#docker-engine" aria-label="Permalink to &quot;Docker Engine&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>These instructions assume that you are using the <a href="https://github.com/Mirantis/cri-dockerd" target="_blank" rel="noreferrer">cri-dockerd</a> adapter to integrate Docker Engine with Kubernetes.</p></div><ol><li><p>On each of your nodes, install Docker for your Linux distribution as per <a href="https://docs.docker.com/engine/install/#server" target="_blank" rel="noreferrer">Install Docker Engine</a>.</p></li><li><p>Install <a href="https://github.com/Mirantis/cri-dockerd" target="_blank" rel="noreferrer">cri-dockerd</a>, following the instructions in that source code repository.</p></li></ol><p>For <code>cri-dockerd</code>, the CRI socket is <code>/run/cri-dockerd.sock</code> by default.</p><h4 id="mirantis-container-runtime" tabindex="-1">Mirantis Container Runtime <a class="header-anchor" href="#mirantis-container-runtime" aria-label="Permalink to &quot;Mirantis Container Runtime&quot;">​</a></h4><p><a href="https://docs.mirantis.com/mcr/20.10/overview.html" target="_blank" rel="noreferrer">Mirantis Container Runtime</a> (MCR) is a commercially available container runtime that was formerly known as Docker Enterprise Edition.</p><p>You can use Mirantis Container Runtime with Kubernetes using the open source <a href="https://github.com/Mirantis/cri-dockerd" target="_blank" rel="noreferrer">cri-dockerd</a> component, included with MCR.</p><p>To learn more about how to install Mirantis Container Runtime, visit <a href="https://docs.mirantis.com/mcr/20.10/install.html" target="_blank" rel="noreferrer">MCR Deployment Guide</a>.</p><p>Check the systemd unit named <code>cri-docker.socket</code> to find out the path to the CRI socket.</p><h4 id="overriding-the-sandbox-pause-image-2" tabindex="-1">Overriding the sandbox (pause) image <a class="header-anchor" href="#overriding-the-sandbox-pause-image-2" aria-label="Permalink to &quot;Overriding the sandbox (pause) image&quot;">​</a></h4><p>The <code>cri-dockerd</code> adapter accepts a command line argument for specifying which container image to use as the Pod infrastructure container (“pause image”). The command line argument to use is <code>--pod-infra-container-image</code>.</p><h2 id="what-s-next" tabindex="-1">What&#39;s next <a class="header-anchor" href="#what-s-next" aria-label="Permalink to &quot;What&#39;s next&quot;">​</a></h2><p>As well as a container runtime, your cluster will need a working <a href="https://kubernetes.io/docs/concepts/cluster-administration/networking/#how-to-implement-the-kubernetes-networking-model" target="_blank" rel="noreferrer">network plugin</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Items on this page refer to third party products or projects that provide functionality required by Kubernetes. The Kubernetes project authors aren&#39;t responsible for those third-party products or projects. See the <a href="https://github.com/cncf/foundation/blob/master/website-guidelines.md" target="_blank" rel="noreferrer">CNCF website guidelines</a> for more details.</p><p>You should read the <a href="https://kubernetes.io/docs/contribute/style/content-guide/#third-party-content" target="_blank" rel="noreferrer">content guide</a> before proposing a change that adds an extra third-party link.</p></div>`,92),r=[t];function l(i,p,c,d,u,h){return s(),n("div",null,r)}const m=e(o,[["render",l]]);export{y as __pageData,m as default};
