import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.01af844e.js";const F=JSON.parse('{"title":"How to capture stdout/stderr output","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/output.md","filePath":"python/pytest/how_to_guides/output.md","lastUpdated":1692720083000}'),o={name:"python/pytest/how_to_guides/output.md"},l=p(`<h1 id="how-to-capture-stdout-stderr-output" tabindex="-1">How to capture stdout/stderr output <a class="header-anchor" href="#how-to-capture-stdout-stderr-output" aria-label="Permalink to &quot;How to capture stdout/stderr output {#how-to-capture-stdout-stderr-output}&quot;">​</a></h1><h2 id="default-stdout-stderr-stdin-capturing-behaviour" tabindex="-1">Default stdout/stderr/stdin capturing behaviour <a class="header-anchor" href="#default-stdout-stderr-stdin-capturing-behaviour" aria-label="Permalink to &quot;Default stdout/stderr/stdin capturing behaviour {#default-stdout-stderr-stdin-capturing-behaviour}&quot;">​</a></h2><p>During test execution any output sent to <code>stdout</code> and <code>stderr</code> is captured. If a test or a setup method fails its according captured output will usually be shown along with the failure traceback. (this behavior can be configured by the <code>--show-capture</code> command-line option).</p><p>In addition, <code>stdin</code> is set to a “null” object which will fail on attempts to read from it because it is rarely desired to wait for interactive input when running automated tests.</p><p>By default capturing is done by intercepting writes to low level file descriptors. This allows to capture output from simple print statements as well as output from a subprocess started by a test.</p><h2 id="setting-capturing-methods-or-disabling-capturing" tabindex="-1">Setting capturing methods or disabling capturing <a class="header-anchor" href="#setting-capturing-methods-or-disabling-capturing" aria-label="Permalink to &quot;Setting capturing methods or disabling capturing {#setting-capturing-methods-or-disabling-capturing}&quot;">​</a></h2><p>There are three ways in which <code>pytest</code> can perform capturing:</p><ul><li><p><code>fd</code> (file descriptor) level capturing (default): All writes going to the operating system file descriptors 1 and 2 will be captured.</p></li><li><p>sys level capturing: Only writes to Python files <code>sys.stdout</code> and <code>sys.stderr</code> will be captured. No capturing of writes to filedescriptors is performed.</p></li><li><p><code>tee-sys</code> capturing: Python writes to <code>sys.stdout</code> and <code>sys.stderr</code> will be captured, however the writes will also be passed-through to the actual <code>sys.stdout</code> and <code>sys.stderr</code>. This allows output to be ‘live printed’ and captured for plugin use, such as junitxml (new in pytest 5.4).</p></li></ul><p>You can influence output capturing mechanisms from the command line:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;">                  </span><span style="color:#6A737D;"># disable all capturing</span></span>
<span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--capture=sys</span><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;"># replace sys.stdout/stderr with in-mem files</span></span>
<span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--capture=fd</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;"># also point filedescriptors 1 and 2 to temp file</span></span>
<span class="line"><span style="color:#B392F0;">pytest</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--capture=tee-sys</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># combines &#39;sys&#39; and &#39;-s&#39;, capturing sys.stdout/stderr</span></span>
<span class="line"><span style="color:#E1E4E8;">                           </span><span style="color:#6A737D;"># and passing it along to the actual sys.stdout/stderr</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;"># disable all capturing</span></span>
<span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--capture=sys</span><span style="color:#24292E;">       </span><span style="color:#6A737D;"># replace sys.stdout/stderr with in-mem files</span></span>
<span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--capture=fd</span><span style="color:#24292E;">        </span><span style="color:#6A737D;"># also point filedescriptors 1 and 2 to temp file</span></span>
<span class="line"><span style="color:#6F42C1;">pytest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--capture=tee-sys</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># combines &#39;sys&#39; and &#39;-s&#39;, capturing sys.stdout/stderr</span></span>
<span class="line"><span style="color:#24292E;">                           </span><span style="color:#6A737D;"># and passing it along to the actual sys.stdout/stderr</span></span></code></pre></div><h2 id="using-print-statements-for-debugging" tabindex="-1">Using print statements for debugging <a class="header-anchor" href="#using-print-statements-for-debugging" aria-label="Permalink to &quot;Using print statements for debugging {#using-print-statements-for-debugging}&quot;">​</a></h2><p>One primary benefit of the default capturing of stdout/stderr output is that you can use print statements for debugging:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># content of test_module.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setup_function</span><span style="color:#E1E4E8;">(function):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;setting up&quot;</span><span style="color:#E1E4E8;">, function)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_func1</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">True</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_func2</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">False</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># content of test_module.py</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup_function</span><span style="color:#24292E;">(function):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;setting up&quot;</span><span style="color:#24292E;">, function)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_func1</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_func2</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span></code></pre></div><p>and running this module will show you precisely the output of the failing function and hide the other one:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest</span></span>
<span class="line"><span style="color:#E1E4E8;">=========================== </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">session</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">starts</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">============================</span></span>
<span class="line"><span style="color:#B392F0;">platform</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">linux</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pytest-7.x.y,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#B392F0;">rootdir:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/home/sweet/project</span></span>
<span class="line"><span style="color:#B392F0;">collected</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_module.py</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.F</span><span style="color:#E1E4E8;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">================================= </span><span style="color:#9ECBFF;">FAILURES</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=================================</span></span>
<span class="line"><span style="color:#B392F0;">________________________________</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_func2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">________________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_func2</span><span style="color:#E1E4E8;">()</span><span style="color:#9ECBFF;">:</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">       assert False</span></span>
<span class="line"><span style="color:#B392F0;">E</span><span style="color:#E1E4E8;">       </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test_module.py:12:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AssertionError</span></span>
<span class="line"><span style="color:#B392F0;">--------------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Captured</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stdout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">setup</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">---------------------------</span></span>
<span class="line"><span style="color:#B392F0;">setting</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">up</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_func2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xdeadbeef000</span><span style="color:#F97583;">1&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">========================= </span><span style="color:#9ECBFF;">short</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">summary</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">info</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">==========================</span></span>
<span class="line"><span style="color:#B392F0;">FAILED</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_module.py::test_func2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">assert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">False</span></span>
<span class="line"><span style="color:#E1E4E8;">======================= </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed,</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.12</span><span style="color:#9ECBFF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">========================</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest</span></span>
<span class="line"><span style="color:#24292E;">=========================== </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">session</span><span style="color:#24292E;"> </span><span style="color:#032F62;">starts</span><span style="color:#24292E;"> </span><span style="color:#032F62;">============================</span></span>
<span class="line"><span style="color:#6F42C1;">platform</span><span style="color:#24292E;"> </span><span style="color:#032F62;">linux</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pytest-7.x.y,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#6F42C1;">rootdir:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/home/sweet/project</span></span>
<span class="line"><span style="color:#6F42C1;">collected</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_module.py</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.F</span><span style="color:#24292E;">                                                    [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">================================= </span><span style="color:#032F62;">FAILURES</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=================================</span></span>
<span class="line"><span style="color:#6F42C1;">________________________________</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_func2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">________________________________</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">def</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_func2</span><span style="color:#24292E;">()</span><span style="color:#032F62;">:</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">       assert False</span></span>
<span class="line"><span style="color:#6F42C1;">E</span><span style="color:#24292E;">       </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">test_module.py:12:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AssertionError</span></span>
<span class="line"><span style="color:#6F42C1;">--------------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Captured</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stdout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">setup</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">---------------------------</span></span>
<span class="line"><span style="color:#6F42C1;">setting</span><span style="color:#24292E;"> </span><span style="color:#032F62;">up</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">function</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_func2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xdeadbeef000</span><span style="color:#D73A49;">1&gt;</span></span>
<span class="line"><span style="color:#24292E;">========================= </span><span style="color:#032F62;">short</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">summary</span><span style="color:#24292E;"> </span><span style="color:#032F62;">info</span><span style="color:#24292E;"> </span><span style="color:#032F62;">==========================</span></span>
<span class="line"><span style="color:#6F42C1;">FAILED</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_module.py::test_func2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">-</span><span style="color:#24292E;"> </span><span style="color:#032F62;">assert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">False</span></span>
<span class="line"><span style="color:#24292E;">======================= </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed,</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.12</span><span style="color:#032F62;">s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">========================</span></span></code></pre></div><h2 id="accessing-captured-output-from-a-test-function" tabindex="-1">Accessing captured output from a test function <a class="header-anchor" href="#accessing-captured-output-from-a-test-function" aria-label="Permalink to &quot;Accessing captured output from a test function {#accessing-captured-output-from-a-test-function}&quot;">​</a></h2><p>The <code>capsys</code>, <code>capsysbinary</code>, <code>capfd</code>, and <code>capfdbinary</code> fixtures allow access to stdout/stderr output created during test execution. Here is an example test function that performs some output related checks:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_myoutput</span><span style="color:#E1E4E8;">(capsys):  </span><span style="color:#6A737D;"># or use &quot;capfd&quot; for fd-level</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    sys.stderr.write(</span><span style="color:#9ECBFF;">&quot;world</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    captured </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> capsys.readouterr()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> captured.out </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> captured.err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;world</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;next&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    captured </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> capsys.readouterr()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> captured.out </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;next</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_myoutput</span><span style="color:#24292E;">(capsys):  </span><span style="color:#6A737D;"># or use &quot;capfd&quot; for fd-level</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    sys.stderr.write(</span><span style="color:#032F62;">&quot;world</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    captured </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> capsys.readouterr()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> captured.out </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> captured.err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;next&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    captured </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> capsys.readouterr()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> captured.out </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;next</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span></span></code></pre></div><p>The <code>readouterr()</code> call snapshots the output so far - and capturing will be continued. After the test function finishes the original streams will be restored. Using <code>capsys</code> this way frees your test from having to care about setting/resetting output streams and also interacts well with pytest&#39;s own per-test capturing.</p><p>If you want to capture on filedescriptor level you can use the <code>capfd</code> fixture which offers the exact same interface but allows to also capture output from libraries or subprocesses that directly write to operating system level output streams (FD1 and FD2).</p><p>The return value from <code>readouterr</code> changed to a <code>namedtuple</code> with two attributes, <code>out</code> and <code>err</code>.</p><p>If the code under test writes non-textual data, you can capture this using the <code>capsysbinary</code> fixture which instead returns <code>bytes</code> from the <code>readouterr</code> method.</p><p>If the code under test writes non-textual data, you can capture this using the <code>capfdbinary</code> fixture which instead returns <code>bytes</code> from the <code>readouterr</code> method. The <code>capfdbinary</code> fixture operates on the filedescriptor level.</p><p>To temporarily disable capture within a test, both <code>capsys</code> and <code>capfd</code> have a <code>disabled()</code> method that can be used as a context manager, disabling capture inside the <code>with</code> block:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">def</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test_disabling_capturing</span><span style="color:#E1E4E8;">(capsys):</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;this output is captured&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> capsys.disabled():</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;output not captured, going directly to sys.stdout&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;this output is also captured&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test_disabling_capturing</span><span style="color:#24292E;">(capsys):</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;this output is captured&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> capsys.disabled():</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output not captured, going directly to sys.stdout&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;this output is also captured&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div>`,25),t=[l];function e(c,r,y,i,E,u){return a(),n("div",null,t)}const h=s(o,[["render",e]]);export{F as __pageData,h as default};
