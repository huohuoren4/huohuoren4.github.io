import{_ as e,o as s,c as a,Q as o}from"./chunks/framework.01af844e.js";const y=JSON.parse('{"title":"Considerations for large clusters","description":"","frontmatter":{},"headers":[],"relativePath":"container/k8s/get_started/best_practice/consideration.md","filePath":"container/k8s/get_started/best_practice/consideration.md","lastUpdated":1694607182000}'),n={name:"container/k8s/get_started/best_practice/consideration.md"},t=o(`<h1 id="considerations-for-large-clusters" tabindex="-1">Considerations for large clusters <a class="header-anchor" href="#considerations-for-large-clusters" aria-label="Permalink to &quot;Considerations for large clusters&quot;">​</a></h1><p>A cluster is a set of nodes (physical or virtual machines) running Kubernetes agents, managed by the control plane. Kubernetes v1.28 supports clusters with up to 5,000 nodes. More specifically, Kubernetes is designed to accommodate configurations that meet all of the following criteria:</p><ul><li>No more than 110 pods per node</li><li>No more than 5,000 nodes</li><li>No more than 150,000 total pods</li><li>No more than 300,000 total containers</li></ul><p>You can scale your cluster by adding or removing nodes. The way you do this depends on how your cluster is deployed.</p><h2 id="cloud-provider-resource-quotas" tabindex="-1">Cloud provider resource quotas <a class="header-anchor" href="#cloud-provider-resource-quotas" aria-label="Permalink to &quot;Cloud provider resource quotas&quot;">​</a></h2><p>To avoid running into cloud provider quota issues, when creating a cluster with many nodes, consider:</p><ul><li><p>Requesting a quota increase for cloud resources such as:</p><ul><li>Computer instances</li><li>CPUs</li><li>Storage volumes</li><li>In-use IP addresses</li><li>Packet filtering rule sets</li><li>Number of load balancers</li><li>Network subnets</li><li>Log streams</li></ul></li><li><p>Gating the cluster scaling actions to bring up new nodes in batches, with a pause between batches, because some cloud providers rate limit the creation of new instances.</p></li></ul><h2 id="control-plane-components" tabindex="-1">Control plane components <a class="header-anchor" href="#control-plane-components" aria-label="Permalink to &quot;Control plane components&quot;">​</a></h2><p>For a large cluster, you need a control plane with sufficient compute and other resources.</p><p>Typically you would run one or two control plane instances per failure zone, scaling those instances vertically first and then scaling horizontally after reaching the point of falling returns to (vertical) scale.</p><p>You should run at least one instance per failure zone to provide fault-tolerance. Kubernetes nodes do not automatically steer traffic towards control-plane endpoints that are in the same failure zone; however, your cloud provider might have its own mechanisms to do this.</p><p>For example, using a managed load balancer, you configure the load balancer to send traffic that originates from the kubelet and Pods in failure zone A, and direct that traffic only to the control plane hosts that are also in zone A. If a single control-plane host or endpoint failure zone A goes offline, that means that all the control-plane traffic for nodes in zone A is now being sent between zones. Running multiple control plane hosts in each zone makes that outcome less likely.</p><h3 id="etcd-storage" tabindex="-1">etcd storage <a class="header-anchor" href="#etcd-storage" aria-label="Permalink to &quot;etcd storage&quot;">​</a></h3><p>To improve performance of large clusters, you can store Event objects in a separate dedicated etcd instance.</p><p>When creating a cluster, you can (using custom tooling):</p><ul><li>start and configure additional etcd instance</li><li>configure the API server to use it for storing events</li></ul><p>See <a href="https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/" target="_blank" rel="noreferrer">Operating etcd clusters for Kubernetes</a> and <a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/setup-ha-etcd-with-kubeadm/" target="_blank" rel="noreferrer">Set up a High Availability etcd cluster with kubeadm</a> for details on configuring and managing etcd for a large cluster.</p><h2 id="addon-resources" tabindex="-1">Addon resources <a class="header-anchor" href="#addon-resources" aria-label="Permalink to &quot;Addon resources&quot;">​</a></h2><p>Kubernetes <a href="https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/" target="_blank" rel="noreferrer">resource limits</a> help to minimize the impact of memory leaks and other ways that pods and containers can impact on other components. These resource limits apply to addon resources just as they apply to application workloads.</p><p>For example, you can set CPU and memory limits for a logging component:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">fluentd-cloud-logging</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">fluent/fluentd-kubernetes-daemonset:v1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">resources</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">limits</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">cpu</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">100m</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">memory</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">200Mi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">...</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">fluentd-cloud-logging</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">fluent/fluentd-kubernetes-daemonset:v1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">resources</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">limits</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">cpu</span><span style="color:#24292E;">: </span><span style="color:#032F62;">100m</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">memory</span><span style="color:#24292E;">: </span><span style="color:#032F62;">200Mi</span></span></code></pre></div><p>Addons&#39; default limits are typically based on data collected from experience running each addon on small or medium Kubernetes clusters. When running on large clusters, addons often consume more of some resources than their default limits. If a large cluster is deployed without adjusting these values, the addon(s) may continuously get killed because they keep hitting the memory limit. Alternatively, the addon may run but with poor performance due to CPU time slice restrictions.</p><p>To avoid running into cluster addon resource issues, when creating a cluster with many nodes, consider the following:</p><ul><li>Some addons scale vertically - there is one replica of the addon for the cluster or serving a whole failure zone. For these addons, increase requests and limits as you scale out your cluster.</li><li>Many addons scale horizontally - you add capacity by running more pods - but with a very large cluster you may also need to raise CPU or memory limits slightly. The VerticalPodAutoscaler can run in recommender mode to provide suggested figures for requests and limits.</li><li>Some addons run as one copy per node, controlled by a DaemonSet: for example, a node-level log aggregator. Similar to the case with horizontally-scaled addons, you may also need to raise CPU or memory limits slightly.</li></ul><h2 id="what-s-next" tabindex="-1">What&#39;s next <a class="header-anchor" href="#what-s-next" aria-label="Permalink to &quot;What&#39;s next&quot;">​</a></h2><ul><li><p><code>VerticalPodAutoscaler</code> is a custom resource that you can deploy into your cluster to help you manage resource requests and limits for pods.</p><p>Learn more about <a href="https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler#readme" target="_blank" rel="noreferrer">Vertical Pod Autoscaler</a> and how you can use it to scale cluster components, including cluster-critical addons.</p></li><li><p>The <a href="https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler#readme" target="_blank" rel="noreferrer">cluster autoscaler</a> integrates with a number of cloud providers to help you run the right number of nodes for the level of resource demand in your cluster.</p></li><li><p>The <a href="https://github.com/kubernetes/autoscaler/tree/master/addon-resizer#readme" target="_blank" rel="noreferrer">addon resizer</a> helps you in resizing the addons automatically as your cluster&#39;s scale changes.</p></li></ul>`,26),r=[t];function l(i,c,p,u,d,h){return s(),a("div",null,r)}const g=e(n,[["render",l]]);export{y as __pageData,g as default};
