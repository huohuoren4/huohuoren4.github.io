import{_ as s,o as a,c as n,X as o}from"./chunks/framework.b5656a4e.js";const C=JSON.parse('{"title":"How to use skip and xfail to deal with tests that cannot succeed","description":"","frontmatter":{},"headers":[],"relativePath":"python/pytest/how_to_guides/skip_xfail.md","filePath":"python/pytest/how_to_guides/skip_xfail.md","lastUpdated":1692720083000}'),l={name:"python/pytest/how_to_guides/skip_xfail.md"},p=o(`<h1 id="how-to-use-skip-and-xfail-to-deal-with-tests-that-cannot-succeed" tabindex="-1">How to use skip and xfail to deal with tests that cannot succeed <a class="header-anchor" href="#how-to-use-skip-and-xfail-to-deal-with-tests-that-cannot-succeed" aria-label="Permalink to &quot;How to use skip and xfail to deal with tests that cannot succeed {#how-to-use-skip-and-xfail-to-deal-with-tests-that-cannot-succeed}&quot;">​</a></h1><p>You can mark test functions that cannot be run on certain platforms or that you expect to fail so pytest can deal with them accordingly and present a summary of the test session, while keeping the test suite green.</p><p>A <code>skip</code> means that you expect your test to pass only if some conditions are met, otherwise pytest should skip running the test altogether. Common examples are skipping windows-only tests on non-windows platforms, or skipping tests that depend on an external resource which is not available at the moment (for example a database).</p><p>An <code>xfail</code> means that you expect a test to fail for some reason. A common example is a test for a feature not yet implemented, or a bug not yet fixed. When a test passes despite being expected to fail (marked with <code>pytest.mark.xfail</code>), it’s an <code>xpass</code> and will be reported in the test summary.</p><p><code>pytest</code> counts and lists <code>skip</code> and <code>xfail</code> tests separately. Detailed information about skipped/xfailed tests is not shown by default to avoid cluttering the output. You can use the <code>-r</code> option to see details corresponding to the “short” letters shown in the test progress:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rxXs</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># show extra info on xfailed, xpassed, and skipped tests</span></span></code></pre></div><p>More details on the <code>-r</code> option can be found by running <code>pytest -h</code>.</p><p>(See <a href="/python/pytest/reference_guides/configuration#builtin-configuration-file-options">Builtin configuration file options</a>)</p><h2 id="skipping-test-functions" tabindex="-1">Skipping test functions <a class="header-anchor" href="#skipping-test-functions" aria-label="Permalink to &quot;Skipping test functions {#skipping-test-functions}&quot;">​</a></h2><p>The simplest way to skip a test function is to mark it with the <code>skip</code> decorator which may be passed an optional <code>reason</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skip</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">no way of currently testing this</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_the_unknown</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>Alternatively, it is also possible to skip imperatively during test execution or setup by calling the <code>pytest.skip(reason)</code> function:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">valid_config</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">        pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skip</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">unsupported configuration</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>The imperative method is useful when it is not possible to evaluate the skip condition during import time.</p><p>It is also possible to skip the whole module using <code>pytest.skip(reason, allow_module_level=True)</code> at the module level:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> sys</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">platform</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startswith</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">win</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skip</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">skipping windows-only tests</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">allow_module_level</span><span style="color:#89DDFF;">=True)</span></span></code></pre></div><p>Reference: <code>pytest.mark.skip</code></p><h3 id="skipif" tabindex="-1">skipif <a class="header-anchor" href="#skipif" aria-label="Permalink to &quot;skipif {#skipif}&quot;">​</a></h3><p>If you wish to skip something conditionally then you can use <code>skipif</code> instead. Here is an example of marking a test function to be skipped when run on an interpreter earlier than Python3.10:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> sys</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skipif</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sys</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">version_info</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">requires python3.10 or higher</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>If the condition evaluates to <code>True</code> during collection, the test function will be skipped, with the specified reason appearing in the summary when using <code>-rs</code>.</p><p>You can share <code>skipif</code> markers between modules. Consider this test module:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># content of test_mymodule.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> mymodule</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">minversion </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skipif</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    mymodule</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">__versioninfo__</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">at least mymodule-1.1 required</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">minversion</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>You can import the marker and reuse it in another test module:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># test_myothermodule.py</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> test_mymodule </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> minversion</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">minversion</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_anotherfunction</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>For larger test suites it’s usually a good idea to have one file where you define the markers which you then consistently apply throughout your test suite.</p><p>Alternatively, you can use <a href="/python/pytest/further_topics/historical_note#conditions-as-strings-instead-of-booleans">condition strings</a> instead of booleans, but they can’t be shared between modules easily so they are supported mainly for backward compatibility reasons.</p><p><strong>Reference</strong>: <code>pytest.mark.skipif</code></p><h3 id="skip-all-test-functions-of-a-class-or-module" tabindex="-1">Skip all test functions of a class or module <a class="header-anchor" href="#skip-all-test-functions-of-a-class-or-module" aria-label="Permalink to &quot;Skip all test functions of a class or module {#skip-all-test-functions-of-a-class-or-module}&quot;">​</a></h3><p>You can use the <code>skipif</code> marker (as any other marker) on classes:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skipif</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sys</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">platform</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">win32</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">does not run on windows</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestPosixCalls</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;font-style:italic;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#676E95;font-style:italic;">will not be setup or run under &#39;win32&#39; platform</span><span style="color:#89DDFF;font-style:italic;">&quot;</span></span></code></pre></div><p>If the condition is <code>True</code>, this marker will produce a skip result for each of the test methods of that class.</p><p>If you want to skip all test functions of a module, you may use the <code>pytestmark</code> global:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># test_module.py</span></span>
<span class="line"><span style="color:#A6ACCD;">pytestmark </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skipif</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">...</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>If multiple <code>skipif</code> decorators are applied to a test function, it will be skipped if any of the skip conditions is true.</p><h3 id="skipping-files-or-directories" tabindex="-1">Skipping files or directories <a class="header-anchor" href="#skipping-files-or-directories" aria-label="Permalink to &quot;Skipping files or directories {#skipping-files-or-directories}&quot;">​</a></h3><p>Sometimes you may need to skip an entire file or directory, for example if the tests rely on Python version-specific features or contain code that you do not wish pytest to run. In this case, you must exclude the files and directories from collection. Refer to <a href="/python/pytest/further_topics/example_trick/test_discovery#customizing-test-collection">Customizing test collection</a> for more information.</p><h3 id="skipping-on-a-missing-import-dependency" tabindex="-1">Skipping on a missing import dependency <a class="header-anchor" href="#skipping-on-a-missing-import-dependency" aria-label="Permalink to &quot;Skipping on a missing import dependency {#skipping-on-a-missing-import-dependency}&quot;">​</a></h3><p>You can skip tests on a missing import by using <code>pytest.importorskip</code> at module level, within a test, or test setup function.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docutils </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">importorskip</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">docutils</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>If <code>docutils</code> cannot be imported here, this will lead to a skip outcome of the test. You can also skip based on the version number of a library:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docutils </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">importorskip</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">docutils</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">minversion</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>The version will be read from the specified module’s <code>__version__</code> attribute.</p><h3 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary {#summary}&quot;">​</a></h3><p>Here’s a quick guide on how to skip tests in a module in different situations:</p><ol><li>Skip all tests in a module unconditionally:</li></ol><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pytestmark </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skip</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">all tests still WIP</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><ol start="2"><li>Skip all tests in a module based on some condition:</li></ol><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pytestmark </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skipif</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sys</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">platform</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">win32</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tests for linux only</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><ol start="3"><li>Skip all tests in a module if some import is missing:</li></ol><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pexpect </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">importorskip</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pexpect</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h2 id="xfail-mark-test-functions-as-expected-to-fail" tabindex="-1">XFail: mark test functions as expected to fail <a class="header-anchor" href="#xfail-mark-test-functions-as-expected-to-fail" aria-label="Permalink to &quot;XFail: mark test functions as expected to fail {#xfail-mark-test-functions-as-expected-to-fail}&quot;">​</a></h2><p>You can use the <code>xfail</code> marker to indicate that you expect a test to fail:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>This test will run but no traceback will be reported when it fails. Instead, terminal reporting will list it in the “expected to fail” (<code>XFAIL</code>) or “unexpectedly passing” (<code>XPASS</code>) sections.</p><p>Alternatively, you can also mark a test as <code>XFAIL</code> from within the test or its setup function imperatively:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">valid_config</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">        pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">failing configuration (but should work)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function2</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> slow_module</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> slow_module</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slow_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">        pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">slow_module taking too long</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>These two examples illustrate situations where you don’t want to check for a condition at the module level, which is when a condition would otherwise be evaluated for marks.</p><p>This will make <code>test_function</code> <code>XFAIL</code>. Note that no other code is executed after <code>pytest.mark.xfail()</code> call, differently from the marker. That’s because it is implemented internally by raising a known exception.</p><p><strong>Reference</strong>: <code>pytest.mark.xfail</code></p><h3 id="condition-parameter" tabindex="-1">condition parameter <a class="header-anchor" href="#condition-parameter" aria-label="Permalink to &quot;condition parameter {#condition-parameter}&quot;">​</a></h3><p>If a test is only expected to fail under a certain condition, you can pass that condition as the first parameter:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sys</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">platform</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">==</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">win32</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bug in a 3rd party library</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>Note that you have to pass a reason as well (see the parameter description at <code>pytest.mark.xfail</code>).</p><h3 id="reason-parameter" tabindex="-1">reason parameter <a class="header-anchor" href="#reason-parameter" aria-label="Permalink to &quot;reason parameter {#reason-parameter}&quot;">​</a></h3><p>You can specify the motive of an expected failure with the <code>reason</code> parameter:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">known parser issue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><h3 id="raises-parameter" tabindex="-1">raises parameter <a class="header-anchor" href="#raises-parameter" aria-label="Permalink to &quot;raises parameter {#raises-parameter}&quot;">​</a></h3><p>If you want to be more specific as to why the test is failing, you can specify a single exception, or a tuple of exceptions, in the <code>raises</code> argument.</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">raises</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">RuntimeError</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>Then the test will be reported as a regular failure if it fails with an exception not mentioned in <code>raises</code>.</p><h3 id="run-parameter" tabindex="-1">run parameter <a class="header-anchor" href="#run-parameter" aria-label="Permalink to &quot;run parameter {#run-parameter}&quot;">​</a></h3><p>If a test should be marked as xfail and reported as such but should not be even executed, use the run parameter as <code>False</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">run</span><span style="color:#89DDFF;">=False)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>This is specially useful for xfailing tests that are crashing the interpreter and should be investigated later.</p><h3 id="strict-parameter" tabindex="-1">strict parameter <a class="header-anchor" href="#strict-parameter" aria-label="Permalink to &quot;strict parameter {#strict-parameter}&quot;">​</a></h3><p>Both <code>XFAIL</code> and <code>XPASS</code> don’t fail the test suite by default. You can change this by setting the <code>strict</code> keyword-only parameter to <code>True</code>:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">strict</span><span style="color:#89DDFF;">=True)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_function</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    ...</span></span></code></pre></div><p>This will make <code>XPASS</code> (“unexpectedly passing”) results from this test to fail the test suite.</p><p>You can change the default value of the <code>strict</code> parameter using the <code>xfail_strict</code> ini option:</p><div class="language-ini"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[pytest]</span></span>
<span class="line"><span style="color:#F07178;">xfail_strict</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">true</span></span></code></pre></div><h3 id="ignoring-xfail" tabindex="-1">Ignoring xfail <a class="header-anchor" href="#ignoring-xfail" aria-label="Permalink to &quot;Ignoring xfail {#ignoring-xfail}&quot;">​</a></h3><p>By specifying on the commandline:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--runxfail</span></span></code></pre></div><p>you can force the running and reporting of an <code>xfail</code> marked test as if it weren’t marked at all. This also causes <code>pytest.xfail()</code> to produce no effect.</p><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples {#examples}&quot;">​</a></h3><p>Here is a simple test file with the several usages:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">xfail </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">xfail</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">xfail</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_hello</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">run</span><span style="color:#89DDFF;">=False)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_hello2</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hasattr(os, &#39;sep&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_hello3</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bug 110</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_hello4</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pytest.__version__[0] != &quot;17&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_hello5</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_hello6</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">reason</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">raises</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">IndexError</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_hello7</span><span style="color:#89DDFF;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">    x</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span></code></pre></div><p>Running it with the report-on-xfail option gives this output:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pytest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xfail_demo.py</span></span>
<span class="line"><span style="color:#A6ACCD;">=========================== </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">session</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">starts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span>
<span class="line"><span style="color:#FFCB6B;">platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Python</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest-6.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">py-1.x.y,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pluggy-1.x.y</span></span>
<span class="line"><span style="color:#FFCB6B;">cachedir:</span><span style="color:#A6ACCD;"> $PYTHON_PREFIX</span><span style="color:#C3E88D;">/.pytest_cache</span></span>
<span class="line"><span style="color:#FFCB6B;">rootdir:</span><span style="color:#A6ACCD;"> $REGENDOC_TMPDIR</span><span style="color:#C3E88D;">/example</span></span>
<span class="line"><span style="color:#FFCB6B;">collected</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">items</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">xfail_demo.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxxxxxx</span><span style="color:#A6ACCD;">                                                [100%]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">========================= </span><span style="color:#C3E88D;">short</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">summary</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">==========================</span></span>
<span class="line"><span style="color:#FFCB6B;">XFAIL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xfail_demo.py::test_hello</span></span>
<span class="line"><span style="color:#FFCB6B;">XFAIL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xfail_demo.py::test_hello2</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">reason:</span><span style="color:#A6ACCD;"> [NOTRUN]</span></span>
<span class="line"><span style="color:#FFCB6B;">XFAIL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xfail_demo.py::test_hello3</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">condition:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hasattr</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">os,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sep</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">XFAIL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xfail_demo.py::test_hello4</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">bug</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">110</span></span>
<span class="line"><span style="color:#FFCB6B;">XFAIL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xfail_demo.py::test_hello5</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">condition:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytest.__version__[</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">17</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">XFAIL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xfail_demo.py::test_hello6</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">reason:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reason</span></span>
<span class="line"><span style="color:#FFCB6B;">XFAIL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xfail_demo.py::test_hello7</span></span>
<span class="line"><span style="color:#A6ACCD;">============================ </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xfailed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.12</span><span style="color:#C3E88D;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">============================</span></span></code></pre></div><h2 id="skip-xfail-with-parametrize" tabindex="-1">Skip/xfail with parametrize <a class="header-anchor" href="#skip-xfail-with-parametrize" aria-label="Permalink to &quot;Skip/xfail with parametrize {#skip-xfail-with-parametrize}&quot;">​</a></h2><p>It is possible to apply markers like skip and xfail to individual test instances when using parametrize:</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pytest</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parametrize</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">expected</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">param</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">marks</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">xfail</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">param</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">marks</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">xfail</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">some bug</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">        pytest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">param</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#82AAFF;">            </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">marks</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">pytest</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">mark</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">skipif</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sys</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">version_info</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> </span><span style="color:#A6ACCD;font-style:italic;">reason</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">py2k</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">        </span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#82AAFF;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test_increment</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">expected</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">assert</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> expected</span></span></code></pre></div>`,93),e=[p];function t(c,r,i,y,F,D){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{C as __pageData,d as default};
