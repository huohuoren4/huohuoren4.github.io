import{_ as e,o as s,c as a,Q as t}from"./chunks/framework.01af844e.js";const b=JSON.parse('{"title":"Objects In Kubernetes","description":"","frontmatter":{},"headers":[],"relativePath":"golang/k8s/concept/overview/object_k8s/overview.md","filePath":"golang/k8s/concept/overview/object_k8s/overview.md","lastUpdated":1693758126000}'),n={name:"golang/k8s/concept/overview/object_k8s/overview.md"},o=t(`<h1 id="objects-in-kubernetes" tabindex="-1">Objects In Kubernetes <a class="header-anchor" href="#objects-in-kubernetes" aria-label="Permalink to &quot;Objects In Kubernetes&quot;">​</a></h1><p>This page explains how Kubernetes objects are represented in the Kubernetes API, and how you can express them in <code>.yaml</code> format.</p><h2 id="understanding-kubernetes-objects" tabindex="-1">Understanding Kubernetes objects <a class="header-anchor" href="#understanding-kubernetes-objects" aria-label="Permalink to &quot;Understanding Kubernetes objects&quot;">​</a></h2><p>Kubernetes objects are persistent entities in the Kubernetes system. Kubernetes uses these entities to represent the state of your cluster. Specifically, they can describe:</p><ul><li>What containerized applications are running (and on which nodes)</li><li>The resources available to those applications</li><li>The policies around how those applications behave, such as restart policies, upgrades, and fault-tolerance</li></ul><p>A Kubernetes object is a &quot;record of intent&quot;--once you create the object, the Kubernetes system will constantly work to ensure that object exists. By creating an object, you&#39;re effectively telling the Kubernetes system what you want your cluster&#39;s workload to look like; this is your cluster&#39;s desired state.</p><p>To work with Kubernetes objects--whether to create, modify, or delete them--you&#39;ll need to use the <a href="https://kubernetes.io/docs/concepts/overview/kubernetes-api/" target="_blank" rel="noreferrer">Kubernetes API</a>. When you use the <code>kubectl</code> command-line interface, for example, the CLI makes the necessary Kubernetes API calls for you. You can also use the Kubernetes API directly in your own programs using one of the <a href="https://kubernetes.io/docs/reference/using-api/client-libraries/" target="_blank" rel="noreferrer">Client Libraries</a>.</p><h3 id="object-spec-and-status" tabindex="-1">Object spec and status <a class="header-anchor" href="#object-spec-and-status" aria-label="Permalink to &quot;Object spec and status&quot;">​</a></h3><p>Almost every Kubernetes object includes two nested object fields that govern the object&#39;s configuration: the object <code>spec</code> and the object <code>status</code>. For objects that have a <code>spec</code>, you have to set this when you create the object, providing a description of the characteristics you want the resource to have: its desired state.</p><p>The <code>status</code> describes the current state of the object, supplied and updated by the Kubernetes system and its components. The Kubernetes <a href="https://kubernetes.io/docs/reference/glossary/?all=true#term-control-plane" target="_blank" rel="noreferrer">control plane</a> continually and actively manages every object&#39;s actual state to match the desired state you supplied.</p><p>For example: in Kubernetes, a Deployment is an object that can represent an application running on your cluster. When you create the Deployment, you might set the Deployment <code>spec</code> to specify that you want three replicas of the application to be running. The Kubernetes system reads the Deployment spec and starts three instances of your desired application--updating the status to match your spec. If any of those instances should fail (a status change), the Kubernetes system responds to the difference between spec and status by making a correction--in this case, starting a replacement instance.</p><p>For more information on the object spec, status, and metadata, see the <a href="https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md" target="_blank" rel="noreferrer">Kubernetes API Conventions</a>.</p><h3 id="describing-a-kubernetes-object" tabindex="-1">Describing a Kubernetes object <a class="header-anchor" href="#describing-a-kubernetes-object" aria-label="Permalink to &quot;Describing a Kubernetes object&quot;">​</a></h3><p>When you create an object in Kubernetes, you must provide the object spec that describes its desired state, as well as some basic information about the object (such as a name). When you use the Kubernetes API to create the object (either directly or via <code>kubectl</code>), that API request must include that information as JSON in the request body. Most often, you provide the information to <code>kubectl</code> in a <code>.yaml</code> file. kubectl converts the information to JSON when making the API request.</p><p>Here&#39;s an example <code>.yaml</code> file that shows the required fields and object spec for a Kubernetes Deployment:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># application/deployment.yaml</span></span>
<span class="line"><span style="color:#85E89D;">apiVersion</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">apps/v1</span></span>
<span class="line"><span style="color:#85E89D;">kind</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Deployment</span></span>
<span class="line"><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx-deployment</span></span>
<span class="line"><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">selector</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">matchLabels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">replicas</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># tells deployment to run 2 pods matching the template</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">metadata</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">labels</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">spec</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">containers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">nginx:1.14.2</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#85E89D;">containerPort</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">80</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># application/deployment.yaml</span></span>
<span class="line"><span style="color:#22863A;">apiVersion</span><span style="color:#24292E;">: </span><span style="color:#032F62;">apps/v1</span></span>
<span class="line"><span style="color:#22863A;">kind</span><span style="color:#24292E;">: </span><span style="color:#032F62;">Deployment</span></span>
<span class="line"><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx-deployment</span></span>
<span class="line"><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">selector</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">matchLabels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">replicas</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># tells deployment to run 2 pods matching the template</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">template</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">metadata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">labels</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">app</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">spec</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">containers</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nginx:1.14.2</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        - </span><span style="color:#22863A;">containerPort</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">80</span></span></code></pre></div><p>One way to create a Deployment using a .yaml file like the one above is to use the <code>kubectl apply</code> command in the <code>kubectl</code> command-line interface, passing the <code>.yaml</code> file as an argument. Here&#39;s an example:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">kubectl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://k8s.io/examples/application/deployment.yaml</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">kubectl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://k8s.io/examples/application/deployment.yaml</span></span></code></pre></div><p>The output is similar to this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">deployment.apps/nginx-deployment created</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">deployment.apps/nginx-deployment created</span></span></code></pre></div><h3 id="required-fields" tabindex="-1">Required fields <a class="header-anchor" href="#required-fields" aria-label="Permalink to &quot;Required fields&quot;">​</a></h3><p>In the <code>.yaml</code> file for the Kubernetes object you want to create, you&#39;ll need to set values for the following fields:</p><ul><li><code>apiVersion</code> - Which version of the Kubernetes API you&#39;re using to create this object</li><li><code>kind</code> - What kind of object you want to create</li><li><code>metadata</code> - Data that helps uniquely identify the object, including a <code>name</code> string, <code>UID</code>, and optional <code>namespace</code></li><li><code>spec</code> - What state you desire for the object</li></ul><p>The precise format of the object <code>spec</code> is different for every Kubernetes object, and contains nested fields specific to that object. The <a href="https://kubernetes.io/docs/reference/kubernetes-api/" target="_blank" rel="noreferrer">Kubernetes API Reference</a> can help you find the spec format for all of the objects you can create using Kubernetes.</p><p>For example, see the <a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec" target="_blank" rel="noreferrer">spec field</a> for the Pod API reference. For each Pod, the <code>.spec</code> field specifies the pod and its desired state (such as the container image name for each container within that pod). Another example of an object specification is the spec field for the StatefulSet API. For StatefulSet, the <a href="https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/#StatefulSetSpec" target="_blank" rel="noreferrer">.spec field</a> specifies the StatefulSet and its desired state. Within the <code>.spec</code> of a StatefulSet is a <a href="https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates" target="_blank" rel="noreferrer">template</a> for Pod objects. That template describes Pods that the StatefulSet controller will create in order to satisfy the StatefulSet specification. Different kinds of object can also have different <code>.status</code>; again, the API reference pages detail the structure of that <code>.status</code> field, and its content for each different type of object.</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>See <a href="https://kubernetes.io/docs/concepts/configuration/overview/" target="_blank" rel="noreferrer">Configuration Best Practices</a> for additional information on writing YAML configuration files.</p></div><h2 id="server-side-field-validation" tabindex="-1">Server side field validation <a class="header-anchor" href="#server-side-field-validation" aria-label="Permalink to &quot;Server side field validation&quot;">​</a></h2><p>Starting with Kubernetes v1.25, the API server offers server side <a href="https://kubernetes.io/docs/reference/using-api/api-concepts/#field-validation" target="_blank" rel="noreferrer">field validation</a> that detects unrecognized or duplicate fields in an object. It provides all the functionality of <code>kubectl --validate</code> on the server side.</p><p>The kubectl tool uses the --validate flag to set the level of field validation. It accepts the values <code>ignore</code>, <code>warn</code>, and <code>strict</code> while also accepting the values true (equivalent to <code>strict</code>) and <code>false</code> (equivalent to <code>ignore</code>). The default validation setting for kubectl is <code>--validate=true</code>.</p><ul><li><p><code>Strict</code>: Strict field validation, errors on validation failure</p></li><li><p><code>Warn</code>: Field validation is performed, but errors are exposed as warnings rather than failing the request</p></li><li><p><code>Ignore</code>: No server side field validation is performed</p></li></ul><p>When <code>kubectl</code> cannot connect to an API server that supports field validation it will fall back to using client-side validation. Kubernetes 1.27 and later versions always offer field validation; older Kubernetes releases might not. If your cluster is older than v1.27, check the documentation for your version of Kubernetes.</p><h2 id="what-s-next" tabindex="-1">What&#39;s next <a class="header-anchor" href="#what-s-next" aria-label="Permalink to &quot;What&#39;s next&quot;">​</a></h2><p>If you&#39;re new to Kubernetes, read more about the following:</p><ul><li><a href="https://kubernetes.io/docs/concepts/workloads/pods/" target="_blank" rel="noreferrer">Pods</a> which are the most important basic Kubernetes objects.</li><li><a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noreferrer">Deployment</a> objects.</li><li><a href="https://kubernetes.io/docs/concepts/architecture/controller/" target="_blank" rel="noreferrer">Controllers</a> in Kubernetes.</li><li><a href="https://kubernetes.io/docs/reference/kubectl/" target="_blank" rel="noreferrer">kubectl</a> and <a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands" target="_blank" rel="noreferrer">kubectl commands</a>.</li></ul><p>To learn about the Kubernetes API in general, visit:</p><ul><li><a href="https://kubernetes.io/docs/reference/using-api/" target="_blank" rel="noreferrer">Kubernetes API overview</a></li></ul><p>To learn about objects in Kubernetes in more depth, read other pages in this section:</p><ul><li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/object-management/" target="_blank" rel="noreferrer">Kubernetes Object Management</a></li><li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/names/" target="_blank" rel="noreferrer">Object Names and IDs</a></li><li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/" target="_blank" rel="noreferrer">Labels and Selectors</a></li><li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/" target="_blank" rel="noreferrer">Namespaces</a></li><li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/" target="_blank" rel="noreferrer">Annotations</a></li><li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/" target="_blank" rel="noreferrer">Field Selectors</a></li><li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/finalizers/" target="_blank" rel="noreferrer">Finalizers</a></li><li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/" target="_blank" rel="noreferrer">Owners and Dependents</a></li><li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/" target="_blank" rel="noreferrer">Recommended Labels</a></li></ul>`,38),l=[o];function r(p,c,i,d,h,u){return s(),a("div",null,l)}const f=e(n,[["render",r]]);export{b as __pageData,f as default};
